<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Native | liuchungui's Blog]]></title>
  <link href="http://www.liuchungui.com/blog/categories/native/atom.xml" rel="self"/>
  <link href="http://www.liuchungui.com/"/>
  <updated>2016-05-02T22:33:04+08:00</updated>
  <id>http://www.liuchungui.com/</id>
  <author>
    <name><![CDATA[刘春桂]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactNative之原生模块开发并发布——iOS篇]]></title>
    <link href="http://www.liuchungui.com/blog/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/"/>
    <updated>2016-05-02T19:48:27+08:00</updated>
    <id>http://www.liuchungui.com/blog/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian</id>
    <content type="html"><![CDATA[<p>ReactNative正在高速发展中，而现阶段很多地方并没有相应的模块封装，所以需要更多的开发者去贡献自己的代码，分享自己编写ReactNative原生模块。本篇文章主要是通过编写一个简单的原生模块并发布到npm上，来告诉大家如何编写原生模块并分享给他人使用。</p>

<p>博客示例代码github地址：<a href="https://github.com/liuchungui/react-native-BGNativeModuleExample">https://github.com/liuchungui/react-native-BGNativeModuleExample</a></p>

<!-- more -->


<h2>准备工作：</h2>

<p>我们需要先创建一个ReactNative工程，使用如下命令创建。</p>

<pre><code>react native init TestProject
</code></pre>

<p>创建好工程之后，我们使用xcode打开<code>TestProject/ios/</code>下的iOS工程。</p>

<h2>一、编写原生模块代码</h2>

<h4>1、创建原生模块</h4>

<p>我们在当前的iOS工程下，创建一个类<code>BGNativeModuleExample</code>，然后在头文件导入RCTBridgeModule.h，让BGNativeModuleExample遵循RCTBridgeModule协议。</p>

<pre><code class="objc">//BGNativeModuleExample.h文件的内容如下
#import &lt;Foundation/Foundation.h&gt;
#import "RCTBridgeModule.h"
@interface BGNativeModuleExample : NSObject &lt;RCTBridgeModule&gt;
@end
</code></pre>

<p>在<code>BGNativeModuleExample.m</code>文件中，我们需要实现<code>RCTBridgeModule</code>协议。为了实现<code>RCTBridgeModule</code>协议，我们的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果不指定，默认会使用这个类的名字。</p>

<p>在这里，我们指定了模块的名字为<code>BGNativeModuleExample</code>。</p>

<pre><code class="js">RCT_EXPORT_MODULE(BGNativeModuleExample);
</code></pre>

<p>实现了RCTBridgeModule协议之后，我们就可以在js中如下获取到我们创建的原生模块。</p>

<pre><code>import { NativeModules } from 'react-native';
var BGNativeModuleExample = NativeModules.BGNativeModuleExample;
</code></pre>

<p>需要注意的是，RCT_EXPORT_MODULE宏传递的参数不能是OC中的字符串。如果传递@&ldquo;BGNativeModuleExample"，那么我们导出给JS的模块名字其实是@"BGNativeModuleExample"，使用BGNativeModuleExample就找不到了。在这里，我们其实可以通过打印<code>NativeModules</code>来查找到我们创建的原生模块。</p>

<h4>2、为原生模块添加方法</h4>

<p>我们需要明确的声明要给JS导出的方法，否则ReactNative不会导出任何方法。声明通过RCT_EXPORT_METHOD()宏来实现：</p>

<pre><code class="objc">RCT_EXPORT_METHOD(testPrint:(NSString *)name info:(NSDictionary *)info) {
  RCTLogInfo(@"%@: %@", name, info);
}
</code></pre>

<p>在JS中，我们可以这样调用这个方法：</p>

<pre><code class="js">    BGNativeModuleExample.testPrint("Jack", {
      height: '1.78m',
      weight: '7kg'
    });
</code></pre>

<h4>3、回调函数</h4>

<blockquote><p>警告  <br/>
本章节内容目前还处在实验阶段，因为我们还并没有太多的实践经验来处理回调函数。</p></blockquote>

<p>回调函数，在官方的文档中是有上面的一个警告，不过在使用过程暂时未发现问题。在OC中，我们添加一个<code>getNativeClass</code>方法，将当前模块的类名回调给JS。</p>

<pre><code class="objc">RCT_EXPORT_METHOD(getNativeClass:(RCTResponseSenderBlock)callback) {
  callback(@[NSStringFromClass([self class])]);
}
</code></pre>

<p>在JS中，我们通过以下方式获取到原生模块的类名</p>

<pre><code class="js">    BGNativeModuleExample.getNativeClass(name =&gt; {
      console.log("nativeClass: ", name);
    });
</code></pre>

<p><strong>原生模块通常只应调用回调函数一次。但是，它们可以保存callback并在将来调用。</strong>这在封装那些通过“委托函数”来获得返回值的iOS API时最常见。</p>

<h4>4、Promiss</h4>

<blockquote><p>原生模块还可以使用promise来简化代码，搭配ES2016(ES7)标准的async/await语法则效果更佳。如果桥接原生方法的最后两个参数是RCTPromiseResolveBlock和RCTPromiseRejectBlock，则对应的JS方法就会返回一个Promise对象。</p></blockquote>

<p>我们通过Promiss来实现原生模块是否会响应方法，响应则返回YES，不响应则返回一个错误信息，代码如下：</p>

<pre><code class="objc">RCT_REMAP_METHOD(testRespondMethod,
                 name:(NSString *)name
                 resolver:(RCTPromiseResolveBlock)resolve
                 rejecter:(RCTPromiseRejectBlock)reject) {
  if([self respondsToSelector:NSSelectorFromString(name)]) {
    resolve(@YES);
  }
  else {
    reject(@"-1001", @"not respond this method", nil);
  }
}
</code></pre>

<p>在JS中，我们有两种方式调用，第一种是通过<code>then....catch</code>的方式：</p>

<pre><code class="js">BGNativeModuleExample.testRespondMethod("dealloc")
    .then(result =&gt; {
      console.log("result is ", result);
    })
    .catch(error =&gt; {
      console.log(error);
    });
</code></pre>

<p>第二种是通过<code>try...catch</code>来调用，与第一种相比，第二种会报警告”Possible Unhandled Promiss Rejection (id:0)“。</p>

<pre><code>    async testRespond() {
    try {
      var result = BGNativeModuleExample.testRespondMethod("hell");
      if(result) {
        console.log("respond this method");
      }
    } catch (e) {
      console.log(e);
    }
  }
</code></pre>

<p><strong>注意: 如果使用Promiss我们不需要参数，则在OC去掉name那一行就行了；如果需要多个参数，在name下面多加一行就行了，注意它们之间不需要添加逗号。</strong></p>

<h4>5、多线程</h4>

<p>我们这里操作的模块没有涉及到UI，所以专门建立一个串行的队列给它使用，如下：</p>

<pre><code>return dispatch_queue_create("com.liuchungui.demo", DISPATCH_QUEUE_SERIAL);
</code></pre>

<blockquote><p>注意: 在模块之间共享分发队列   <br/>
methodQueue方法会在模块被初始化的时候被执行一次，然后会被React Native的桥接机制保存下来，所以你不需要自己保存队列的引用，除非你希望在模块的其它地方使用它。但是，如果你希望在若干个模块中共享同一个队列，则需要自己保存并返回相同的队列实例；仅仅是返回相同名字的队列是不行的。</p></blockquote>

<p>更多线程的操作细节可以参考<a href="http://reactnative.cn/docs/0.24/native-modules-ios.html#content">http://reactnative.cn/docs/0.24/native-modules-ios.html#content</a></p>

<h4>6、导出常量</h4>

<p>原生模块可以导出一些常量，这些常量在JavaScript端随时都可以访问。用这种方法来传递一些静态数据，可以避免通过bridge进行一次来回交互。</p>

<p>OC中，我们实现<code>constantsToExport</code>方法，如下：</p>

<pre><code class="objc">- (NSDictionary *)constantsToExport {
  return @{ @"BGModuleName" : @"BGNativeModuleExample",
            TestEventName: TestEventName
            };
}
</code></pre>

<p>JS中，我们打印一下这个常量</p>

<pre><code class="js">console.log("BGModuleName value is ", BGNativeModuleExample.BGModuleName);
</code></pre>

<p>但是注意这个常量仅仅在初始化的时候导出了一次，所以即使你在运行期间改变constantToExport返回的值，也不会影响到JavaScript环境下所得到的结果。</p>

<h4>7、给JS发送事件</h4>

<p>即使没有被JS调用，本地模块也可以给JS发送事件通知。最直接的方式是使用<code>eventDispatcher</code>。</p>

<p>在这里，我们为了能够接收到事件，我们开一个定时器，每一秒发送一次事件。</p>

<pre><code class="objc">#import "BGNativeModuleExample.h"
#import "RCTEventDispatcher.h"
@implementation BGNativeModuleExample
@synthesize bridge = _bridge;
- (instancetype)init {
  if(self = [super init]) {
    [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(sendEventToJS) userInfo:nil repeats:YES];
  }
  return self;
}

- (void)receiveNotification:(NSNotification *)notification {
  [self.bridge.eventDispatcher sendAppEventWithName:TestEventName body:@{@"name": @"Jack"}];
}
@end
</code></pre>

<p>在JS中，我们这样接收事件</p>

<pre><code>NativeAppEventEmitter.addListener(BGNativeModuleExample.TestEventName, info =&gt; {
      console.log(info);
    });
</code></pre>

<p><strong>注意： 编写OC代码时，需要添加<code>@synthesize bridge = _bridge;</code>，否则接收事件的时候就会报<code>Exception -[BGNativeModuleExample brige]; unrecognized selector sent to instance</code>的错误。</strong></p>

<p>上面原生代码就编写好了，主要以代码实践为主，弥补官方文档中的一些不足，如果要需要了解更多的原生模块封装的知识，可以参考<a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content">原生模块</a>，也可以参考官方的源代码。</p>

<h2>二、发布上线</h2>

<p>我们按照上面步骤编写好原生模块之后，接下来将我们写的原生模块发布到npm。</p>

<h4>建立一个github仓库</h4>

<p>在github上创建一个仓库<code>react-native-BGNativeModuleExample</code>，克隆到本地，并且创建一个ios文件夹。</p>

<pre><code>git clone https://github.com/liuchungui/react-native-BGNativeModuleExample.git
cd react-native-BGNativeModuleExample
mkdir ios
</code></pre>

<h4>创建静态库，设置Header Search Paths</h4>

<p>由于ReactNative的组件都是一个个静态库，我们发布上线给别人使用的话，也需要建立静态库。</p>

<p>首先，我们使用xcode建立静态库，取名为<code>BGNativeModuleExample</code>。使用xcode打开创建的静态库，添加一行<code>Header Search Paths</code>，值为<code>$(SRCROOT)/../../react-native/React</code>，并设置为<code>recursive</code>。
<img src="http://ww2.sinaimg.cn/large/7746cd07jw1f3h69rwj3oj212s0r7dm6.jpg" alt="" /></p>

<p>然后，我们将前面编写原生模块代码的<code>BGNativeModuleExample.h</code>和<code>BGNativeModuleExample.m</code>文件替换静态库中的文件。当然，如果我们编写的原生模块依赖其它第三方包的话，我们也需要都copy过来并配置好。</p>

<p>其后，我们将创建的静态库中的文件，全部copy到<code>react-native-BGNativeModuleExample</code>下的ios目录下。ios文件目录如下：</p>

<pre><code>|____BGNativeModuleExample
| |____BGNativeModuleExample.h
| |____BGNativeModuleExample.m
|____BGNativeModuleExample.xcodeproj
</code></pre>

<p>最后，我们需要在react-native-BGNativeModuleExample目录下创建一个index.js，它是整个原生模块的入口，我们这里只是将原生进行导出。</p>

<pre><code>//index.js
import React, { NativeModules } from 'react-native';
module.exports = NativeModules.BGNativeModuleExample;
</code></pre>

<h4>发布到npm</h4>

<p>首先，初始化package.json
在发布到npm时，我们需要创建一个<code>package.json</code>文件，这个文件包含了module的所有信息，比如名称、版本、描述、依赖、作者、license等。
我们在react-native-BGNativeModuleExample根目录下使用<code>npm init</code>命令来创建<code>package.json</code>，系统会提示我们输入所需的信息，不想输入的直接按下<code>Enter</code>跳过。</p>

<pre><code>$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install &lt;pkg&gt; --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (react-native-BGNativeModuleExample)
</code></pre>

<p>输入完成之后，系统会要我们确认文件的内容是否有误，如果没有问题直接输入<code>yes</code>，那么<code>package.json</code>就创建好了。
我这里创建的package.json文件如下：</p>

<pre><code>{
  "name": "react-native-nativemodule-example",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/liuchungui/react-native-BGNativeModuleExample.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/liuchungui/react-native-BGNativeModuleExample/issues"
  },
  "homepage": "https://github.com/liuchungui/react-native-BGNativeModuleExample#readme"
}
</code></pre>

<p>如果我们编写的原生模块依赖于其他的原生模块，我们需要在<code>package.json</code>添加依赖关系，我们这里由于没有相关依赖，所以不需要添加：
<code>
"dependencies": {
}
</code></p>

<p><strong>初始化完package.json，我们就可以发布到npm上面了。</strong></p>

<p>如果没有npm的账号，我们需要在注册一个账号，这个账号会被添加到npm本地的配置中，用来发布module用。</p>

<pre><code>$ npm adduser   
Username: your name
Password: your password
Email: yourmail@gmail.com
</code></pre>

<p>成功之后，npm会把认证信息存储在~/.npmrc中，并且可以通过以下命令查看npm当前使用的用户：</p>

<pre><code>$ npm whoami 
</code></pre>

<p>以上完成之后，我们就可以进行发布了。</p>

<pre><code>$npm publish
+ react-native-nativemodule-example@1.0.0
</code></pre>

<p>到这里，我们已经成功把module发布到了<a href="npmjs.org">npmjs.org</a>。</p>

<h2>三、添加Example，测试是否可用，添加README</h2>

<p>我们在<code>react-native-BGNativeModuleExample</code>目录下创建一个Example的ReactNative工程，并且通过<code>rnpm install react-native-nativemodule-example</code>命令安装我们发布的<code>react-native-nativemodule-example</code>模块。</p>

<pre><code>$ rnpm install react-native-nativemodule-example
TestProject@0.0.1 /Users/user/github/TestProject
└── react-native-nativemodule-example@1.0.0 

rnpm-link info Linking react-native-nativemodule-example ios dependency 
rnpm-link info iOS module react-native-nativemodule-example has been successfully linked 
rnpm-link info Module react-native-nativemodule-example has been successfully installed &amp; linked 
</code></pre>

<p>上面提示安装并且link成功，我们就可以在js中进行使用了。</p>

<pre><code>import BGNativeModuleExample from 'react-native-nativemodule-example';

BGNativeModuleExample.testPrint("Jack", {
    height: '1.78m',
    weight: '7kg'
});
</code></pre>

<p>添加<code>.npmignore</code>文件，并且添加如下内容：</p>

<pre><code>Example/
.git
.gitignore
.idea
</code></pre>

<p>这样的话，我们npm进行发布的时候，就不会将Example发布到npm上了。</p>

<h4>最后，我们在发布上线之后还需要编写README文件。</h4>

<p>README文件是非常重要的，如果没有README文件，别人看到我们的原生组件，根本就不知道我们这个组件是用来干啥的。所以，我们很有必要添加一个README文件，这个文件需要告诉别人我们这个原生组件是干什么的、如何安装、API、使用手册等等。</p>

<h2>原生模块升级，发布新版本</h2>

<p>当我们添加新代码或者修复bug后，需要发布新的版本，我们只需要修改package.json文件中的<code>version</code>的值就行了，然后使用<code>npm publish</code>进行发布。</p>

<h2>总结</h2>

<p>主要说了编写原生模块代码中常用的一些知识，并且通过代码实践和总结了编写过程的一些注意的地方，并总结了下如何发布上线到npm上。不足的地方是没有加上自动化测试，待后续研究。</p>

<h2>参考</h2>

<p><a href="http://weizhifeng.net/how-to-publish-a-node-module.html">如何发布Node模块到NPM社区</a></p>

<p><a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content">原生模块</a></p>
]]></content>
  </entry>
  
</feed>
