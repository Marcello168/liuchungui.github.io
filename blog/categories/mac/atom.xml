<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | liuchungui's Blog]]></title>
  <link href="http://liuchungui.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://liuchungui.github.io/"/>
  <updated>2015-10-23T17:00:33+08:00</updated>
  <id>http://liuchungui.github.io/</id>
  <author>
    <name><![CDATA[刘春桂]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocoaPods创建私有Pods]]></title>
    <link href="http://liuchungui.github.io/blog/2015/10/19/cocoapodschuang-jian-si-you-pods/"/>
    <updated>2015-10-19T21:54:54+08:00</updated>
    <id>http://liuchungui.github.io/blog/2015/10/19/cocoapodschuang-jian-si-you-pods</id>
    <content type="html"><![CDATA[<p>创建Pod私有源步骤：  <br/>
1、创建一个git仓库，用来存放Podspec  <br/>
2、添加私有的repo到CocoaPods  <br/>
3、制作Podspec，并且推送到你创建的私有repo   <br/>
4、使用Pod，在Podfile添加私有源来搭建项目</p>

<p>下面，跟着我一步一步来制作Pod私有源，并且使用私有源当中框架来搭建项目。</p>

<h3>1、创建一个git仓库，用来存放Podspec</h3>

<p>这里我直接是使用github仓库<a href="https://github.com/liuchungui/first.git">https://github.com/liuchungui/first.git</a>    <br/>
当然如果是公司需要建立组件库，放在公司的git服务器上，这样就不会公开了。如果公司没有git服务器，不急，搭建git服务器很简单，可以参照我的<a href="http://www.liuchungui.com/blog/2015/10/23/gitzong-jie/">Git简单总结</a>来搭建。</p>

<h3>2、添加私有的repo到CocoaPods</h3>

<p>主要命令是<code>pod repo add REPO_NAME SOURCE_URL</code>。其中，REPO_NAME是repo的名字，随便你取；SOURCE_URL是你git仓库的链接。</p>

<pre><code>$ pod repo add liuchungui https://github.com/liuchungui/first.git
$ ls ~/.cocoapods/repos  
liuchungui  master
</code></pre>

<p>这时，你会发现有两个文件夹liuchungui和master，master是Cocoapods官方的repo，而liuchungui就是我刚刚创建的。进入liuchungui文件夹查看，你会发现它是clone了一份<code>https://github.com/liuchungui/first.git</code>。</p>

<h3>3、制作Podspec，并且推送到你创建的私有repo</h3>

<p>CocoaPods本身就是用来管理公共库和解决它们之间依赖的一套解决方案，这里我就以我写的一个框架<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>的Podspec制作为例。
1、在github上创建一个空的仓库，克隆到本地   <br/>
<code>git clone https://github.com/liuchungui/BGNetwork</code>   <br/>
2、在本地使用创建项目，然后写框架，框架写完了之后，提交到github，并打上版本号。</p>

<pre><code>git add .
git commit -m 'add file'
git push origin master
git tag -m 'add tag' '0.1.2'
git push --tags
</code></pre>

<p>3、我们开始制作Podspec文件。  <br/>
BGNetwork是一个基于AFNetworking的网络框架，它主要的源文件都在BGNetwork/BGNetwork路径下。我们将它放在CocoaPods给第三方使用，主要是将这个文件夹下的源文件加载到第三方的项目中以供使用，那么Podspec可以这样写。</p>

<pre><code>Pod::Spec.new do |spec|
  #项目名称
  spec.name         = 'BGNetwork'
  #版本号
  spec.version      = '0.1.1'
  #开源协议
  spec.license      = 'MIT'
  #对开源项目的描述
  spec.summary      = 'BGNetwork is a request util based on AFNetworking'
  #开源项目的首页，这个如果没有，可以随便写
  spec.homepage     = 'https://github.com/chunguiLiu/BGNetwork'
  #作者信息
  spec.author       = {'chunguiLiu' =&gt; 'chunguiLiu@126.com'}
  #项目的源和版本号，这个不能乱写
  spec.source       = { :git =&gt; 'https://github.com/chunguiLiu/BGNetwork.git', :tag =&gt; '0.1.1' }
  #源文件，这个就是供第三方使用的源文件
  spec.source_files = "BGNetwork/*"
  #适用于ios7及以上版本
  spec.platform     = :ios, '7.0'
  #使用的是ARC
  spec.requires_arc = true
  #依赖AFNetworking2.0
  spec.dependency 'AFNetworking', '~&gt; 2.0'
end
</code></pre>

<p>4、验证并推送到服务器    <br/>
在推送前，我们先验证Podspec，验证的时候是验证BGNetwork.podspec文件，所以我们需要保证进入的目录和BGNetwork.podspec同级的    <br/>
<code>$ pod lib lint</code>   <br/>
如果没有错误和警告我们就可以推送到服务器了    <br/>
<code>$ pod repo push liuchungui BGNetwork.podspec</code> <br/>
如果没有错误，但是有警告，我们就将警告解决，也可以加<code>--allow-warnings</code>来提交   <br/>
<code>$ pod repo push liuchungui BGNetwork.podspec --allow-warnings</code>   <br/>
如果有错误，我们可以去查看错误信息对应下的Note信息。</p>

<p>5、搜索我们的框架
到这一步，我们就可以通过<code>pod search BGNetwork</code>来搜索了</p>

<pre><code>$ pod search BGNetwork
-&gt; BGNetwork (0.1.2)
   BGNetwork is a request util based on AFNetworking
   pod 'BGNetwork', '~&gt; 0.1.2'
   Homepage: https://github.com/chunguiLiu/BGNetwork
   Source:   https://github.com/chunguiLiu/BGNetwork.git
   Versions: 0.1.1, 0.1.0 [liuchungui repo] - 0.1.2, 0.1.1 [master repo]
</code></pre>

<h4>注意</h4>

<p>1、若是需要提交给官方，请使用</p>

<pre><code>pod trunk register youremail
查看信息
pod trunk me
将对应的pod推送到服务器
pod turnk push
</code></pre>

<p>2、途中遇到了几次问题，就是pod repo push不上去，显示没有找到对应文件，后来发现是tag的原因。所以我们在维护一个框架时，修改好之后先打上tag，然后再修改podspec文件，最后push到对应的repo。</p>

<p>3、若是在框架当中，有文件依赖内部的文件，而又不在同一个文件当中，使用dependency设置依赖，具体可以参考<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec">AFNetworking的podspec</a>文件。</p>

<p>4、更新太慢，可以在install或update加一个参数</p>

<pre><code>$ pod install --verbose --no-repo-update
$ pod update --verbose --no-repo-update
</code></pre>

<h4>参考</h4>

<p><a href="https://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a>   <br/>
<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/">使用Cocoapods创建私有podspec</a>   <br/>
<a href="http://blog.csdn.net/wzzvictory/article/details/18737437?utm_source=tuicool">CocoaPods详解之&mdash;-使用篇</a></p>
]]></content>
  </entry>
  
</feed>
