<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac | liuchungui's Blog]]></title>
  <link href="http://liuchungui.github.io/blog/categories/mac/atom.xml" rel="self"/>
  <link href="http://liuchungui.github.io/"/>
  <updated>2015-11-02T01:16:47+08:00</updated>
  <id>http://liuchungui.github.io/</id>
  <author>
    <name><![CDATA[刘春桂]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CocoaPods创建私有Pods]]></title>
    <link href="http://liuchungui.github.io/blog/2015/10/19/cocoapodschuang-jian-si-you-pods/"/>
    <updated>2015-10-19T21:54:54+08:00</updated>
    <id>http://liuchungui.github.io/blog/2015/10/19/cocoapodschuang-jian-si-you-pods</id>
    <content type="html"><![CDATA[<p>创建Pod私有源步骤：  <br/>
1、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件  <br/>
2、添加私有的repo到CocoaPods  <br/>
3、制作Podspec，并且推送到你创建的私有repo   <br/>
4、使用Pod，在Podfile添加私有源来搭建项目</p>

<!-- more -->


<p></p>

<h3>1、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件</h3>

<p>在这一步当中需要git服务器用来创建仓库，我这里只是作为一个例子，所以直接使用github来当做我的服务器，我创建的这些项目都是public的。你如果是练手的话，也可以仿照我一样在github上面创建仓库。如果是为公司建立私有的公共组件库，你可以在github等平台上面创建私有仓库，或者直接搭建一个git服务器来创建仓库。搭建服务器可以参考<a href="http://www.liuchungui.com/blog/2015/10/23/gitzong-jie/">Git简单总结</a>的第一部分，里面有Mac搭建也有Linux搭建的链接。    <br/>
在这里，我们需要搭建两个git仓库。     <br/>
第一个仓库名称是<a href="https://github.com/liuchungui/first.git">first</a>，专门用来做私有Spec Repo。      <br/>
第二个仓库名称是<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>，这个就是我们公共组件库。     <br/>
在这里，我们来说一下什么是Spec Repo?</p>

<blockquote><p>他是所有的Pods的一个索引，就是一个容器，所有公开的Pods都在这个里面，他实际是一个Git仓库remote端。  <br/>
在GitHub上，当你使用了Cocoapods后他会被clone到本地的~/.cocoapods/repos目录下，可以进入到这个目录看到master文件夹就是这个官方的Spec Repo了。</p></blockquote>

<p>这里引用了<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/">使用Cocoapods创建私有podspec</a>的内容。</p>

<h3>2、添加私有的repo到CocoaPods</h3>

<p>主要命令是<code>pod repo add REPO_NAME SOURCE_URL</code>。其中，REPO_NAME是私有repo的名字，取一个容易记住的名字，后面还会用到，以后公司内部的组件对应的podspec都可以推送到这个repo中；SOURCE_URL就是刚刚我们创建的<code>first</code>仓库链接。</p>

<pre><code>$ pod repo add liuchungui https://github.com/liuchungui/first.git
$ ls ~/.cocoapods/repos  
liuchungui  master
</code></pre>

<p>这时，你会发现有两个文件夹<code>liuchungui</code>和<code>master</code>，master是Cocoapods官方的repo，而liuchungui就是我刚刚创建的。进入liuchungui文件夹查看，你会发现它是clone了一份<code>https://github.com/liuchungui/first.git</code>。   <br/>
在这里，我们是一个空的仓库，可以不检查，但是你的仓库如果有什么其他东西的话，可以检查一下。</p>

<pre><code>$ cd ~/.cocoapods/repos/liuchungui
$ pod repo lint .
</code></pre>

<h3>3、制作Podspec，并且推送到你创建的私有repo</h3>

<p>1、将我们前面创建的BGNetwork项目克隆到本地   <br/>
<code>git clone https://github.com/liuchungui/BGNetwork.git</code>   <br/>
2、在本地我们使用了xcode创建了项目，并且写了一个网络框架，运行没有问题，我们准备提交到github，并打上版本号。</p>

<pre><code>git add .
git commit -m 'add file'
git push origin master
git tag -m 'add tag' '0.1.1'
git push --tags
</code></pre>

<p>3、我们开始制作Podspec文件。  <br/>
<code>BGNetwork</code>是一个基于<code>AFNetworking</code>而封装的网络框架，它主要的源文件都在<code>BGNetwork/BGNetwork</code>路径下。我们将它放在CocoaPods给第三方使用，主要是将这个文件夹下的源文件加载到第三方的项目中以供使用。
下面是供第三方使用的源文件结构，具体可以下载<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>代码查看</p>

<pre><code>____BGNetwork
| |____BGAFHTTPClient.h
| |____BGAFHTTPClient.m
| |____BGAFRequestSerializer.h
| |____BGAFRequestSerializer.m
| |____BGAFResponseSerializer.h
| |____BGAFResponseSerializer.m
| |____BGNetworkCache.h
| |____BGNetworkCache.m
| |____BGNetworkConfiguration.h
| |____BGNetworkConfiguration.m
| |____BGNetworkConnector.h
| |____BGNetworkConnector.m
| |____BGNetworkManager.h
| |____BGNetworkManager.m
| |____BGNetworkRequest.h
| |____BGNetworkRequest.m
| |____BGNetworkUtil.h
| |____BGNetworkUtil.m
</code></pre>

<p>在BGNetwork项目的根目录下创建一个BGNetwork.podspec文件，对应上面的需求，我们的podspec可以这么写</p>

<pre><code>Pod::Spec.new do |spec|
  #项目名称
  spec.name         = 'BGNetwork'
  #版本号
  spec.version      = '0.1.1'
  #开源协议
  spec.license      = 'MIT'
  #对开源项目的描述
  spec.summary      = 'BGNetwork is a request util based on AFNetworking'
  #开源项目的首页
  spec.homepage     = 'https://github.com/chunguiLiu/BGNetwork'
  #作者信息
  spec.author       = {'chunguiLiu' =&gt; 'chunguiLiu@126.com'}
  #项目的源和版本号
  spec.source       = { :git =&gt; 'https://github.com/chunguiLiu/BGNetwork.git', :tag =&gt; '0.1.1' }
  #源文件，这个就是供第三方使用的源文件
  spec.source_files = "BGNetwork/*"
  #适用于ios7及以上版本
  spec.platform     = :ios, '7.0'
  #使用的是ARC
  spec.requires_arc = true
  #依赖AFNetworking2.0
  spec.dependency 'AFNetworking', '~&gt; 2.0'
end
</code></pre>

<p><strong>注意：</strong>spec.source源是<code>BGNetwork</code>的git仓库，版本号是我们上一步打上的版本号0.1.1。</p>

<p>4、验证并推送到服务器    <br/>
在推送前，我们先验证Podspec，验证的时候是验证BGNetwork.podspec文件，所以我们需要保证进入的目录和BGNetwork.podspec同级的    <br/>
<code>$ pod lib lint</code>   <br/>
注意：验证的时候，会获取<code>BGNetwork.podspec</code>文件中的<code>spec.source</code>来获取git服务器上面对应版本的代码，然后再找到<code>spec.source_files</code>中的源代码，通过xcode命令行工具建立工程并且进行编译。所以这一步的过程会比较久，如果没有编译没有错误，就验证通过。</p>

<p>如果没有错误和警告我们就可以推送到服务器了，推送使用的命令是<code>pod repo push REPO_NAME SPEC_NAME.podspec</code>，它也会先验证，然后再推送。         <br/>
<code>$ pod repo push liuchungui BGNetwork.podspec</code> <br/>
如果没有错误，但是有警告，我们就将警告解决，也可以加<code>--allow-warnings</code>来提交   <br/>
<code>$ pod repo push liuchungui BGNetwork.podspec --allow-warnings</code>   <br/>
如果有错误，我们可以去查看错误信息对应下的Note信息并解决。在这错误当中，常常会遇到找不到对应文件的错误，这个时候你需要查看<code>BGNetwork.podspec</code>文件中<code>spec.source</code>下git仓库链接是否没问题，git仓库下对应的tag版本中<code>spec.source_files</code>路径下是否正确。</p>

<p>5、搜索我们的框架
到这一步，我们就可以通过<code>pod search BGNetwork</code>来搜索了，搜索到了说明我们私有源建立成功。</p>

<pre><code>$ pod search BGNetwork
-&gt; BGNetwork (0.1.2)
   BGNetwork is a request util based on AFNetworking
   pod 'BGNetwork', '~&gt; 0.1.2'
   Homepage: https://github.com/chunguiLiu/BGNetwork
   Source:   https://github.com/chunguiLiu/BGNetwork.git
   Versions: 0.1.1, 0.1.0 [liuchungui repo] - 0.1.2, 0.1.1 [master repo]
</code></pre>

<p>由上面的搜索知道，BGNetwork在liuchungui这个私有repo中存在0.1.1和0.1.0版本，在master中存在0.1.2和0.1.1版本。  <br/>
搜索成功之后，我们将BGNetwork.podspec也推送到远程服务器。</p>

<h3>4、使用Pod，在Podfile添加私有源来搭建项目</h3>

<p>使用时，在Podfile文件中添加<strong>本地私有源和官方源</strong>。如果没有添加本地私有源，它默认是用官方的repo，这样找不到本地的Pod；如果只是设置了本地私有源，就不会再去官方源中查找。
 下面是Podfile内容</p>

<pre><code class="```">   #官方Cocoapods的源
   source 'https://github.com/CocoaPods/Specs.git'
   #本地私有源
   source 'https://github.com/liuchungui/first.git'
   platform :ios, '7.0'
   pod 'BGNetwork', '~&gt; 0.1.1'
</code></pre>

<h4>注意</h4>

<p>1、途中遇到了几次问题，就是<code>pod repo push</code>不上去，显示没有找到对应文件，后来发现是版本的问题，没有打上版本号或者<code>Podspec</code>中版本错了。所以我们在维护一个框架时，修改框架之后，push到git服务器之后先打上tag，然后再修改podspec文件中的版本，最后push到对应的pod repo中。</p>

<p>2、若是在框架当中，存在不同的文件夹，请使用<code>subspec</code>。如果不同文件夹之间的文件有相互导入的情况，请将被导入的头文件设置为<code>public_header_files</code>，并且通过<code>dependency</code>设置依赖，具体可以参考<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec">AFNetworking的podspec</a>文件。</p>

<p>3、若是需要提交给官方，请使用</p>

<pre><code>pod trunk register youremail
查看信息
pod trunk me
将对应的pod推送到服务器
pod turnk push
</code></pre>

<p>4、使用<code>pod install</code>时，它首先会更新整个官方的源，而Cocoapods每天都有很多人提交，所以更新比较慢。所以，建议每过一段时间更新一下官方库，平常的时候，咱们可以在<code>instal</code>l或<code>update</code>加一个参数<code>--no-repo-update</code>让它不用更新。</p>

<pre><code>$ pod install --verbose --no-repo-update
$ pod update --verbose --no-repo-update
</code></pre>

<h4>参考</h4>

<p><a href="https://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a>   <br/>
<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/">使用Cocoapods创建私有podspec</a>   <br/>
<a href="http://blog.csdn.net/wzzvictory/article/details/18737437?utm_source=tuicool">CocoaPods详解之&mdash;-使用篇</a></p>
]]></content>
  </entry>
  
</feed>
