<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[liuchungui's Blog]]></title>
  <link href="http://liuchungui.github.io/atom.xml" rel="self"/>
  <link href="http://liuchungui.github.io/"/>
  <updated>2015-10-11T13:17:28+08:00</updated>
  <id>http://liuchungui.github.io/</id>
  <author>
    <name><![CDATA[刘春桂]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS之适配HTTPS]]></title>
    <link href="http://liuchungui.github.io/blog/2015/10/11/ioszhi-gua-pei-https/"/>
    <updated>2015-10-11T13:15:11+08:00</updated>
    <id>http://liuchungui.github.io/blog/2015/10/11/ioszhi-gua-pei-https</id>
    <content type="html"><![CDATA[<p>最近的iOS9系统出来了，而网络方面的ATS(App Transport Security)特性可以说每个人都要经历。而我这篇博客，就是结合我最近几天的经历，来谈谈从服务器到iOS客户端的HTTPS适配。</p>

<h3>一、简单谈谈ATS(App Transport Security)</h3>

<p>ATS(App Transport Security)是为了提高App与服务器之间安全传输数据一个特性，这个特性从iOS9和OSX10.11开始出现，它默认需要满足以下几个条件：</p>

<ul>
<li>服务器TLS版本至少是1.2版本</li>
<li>连接加密只允许几种先进的加密</li>
<li>证书必须使用SHA256或者更好的哈希算法进行签名，要么是2048位或者更长的RSA密钥，要么就是256位或更长的ECC密钥</li>
</ul>


<p>如果想了解哪几种先进的加密是被允许的，详情请见官方文档<a href="https://developer.apple.com/library/mac/technotes/App-Transport-Security-Technote/">App Transport Security Technote</a></p>

<h3>二、搭建HTTPS服务器</h3>

<p>搭建HTTPS服务器有两种方式，一种是创建证书请求，然后到权威机构认证，随之配置到服务器；另外一种是自建证书，然后配置给服务器。第一种方式搭建的HTTPS服务器当然是最优的了，建立网站的话，直接就会被信任，而作为移动端app的服务器时，也不需要为ATS做过多的适配。虽然说权威的机构认证都是需要钱的，但是如今也不乏存在免费的第三方认证机构；第二种方式搭建的HTTPS服务器，对于网站来说完全不可行，用户打开时直接弹出一个警告提醒，说这是一个不受信任的网站，让用户是否继续，体验很差，而且让用户感觉网站不安全。对于移动端来说，在iOS9出现之前，这个没什么问题，但是在iOS9出来之后，第二种方式是通不过ATS特性，需要将NSAllowsArbitraryLoads设置为YES才行。所以，我推荐使用第一种方式搭建HTTPS服务器。   <br/>
下面，咱们来说说这两种方式都如何进行操作。</p>

<h5>第一种、使用CA机构认证的证书搭建HTTPS服务器</h5>

<p>1、创建证书请求，并提交给CA机构认证</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#生成私钥
</span><span class='line'>openssl genrsa -des3 -out private.key 2048
</span><span class='line'>#生成服务器的私钥，去除密钥口令 
</span><span class='line'>openssl rsa -in private.key -out server.key
</span><span class='line'>#生成证书请求
</span><span class='line'>openssl req -new -key private.key -out server.csr</span></code></pre></td></tr></table></div></figure>


<p>将生成server.csr提交给CA机构，CA机构对它进行签名之后，然后会生成签名后的根证书和服务器证书发送给你，这个时候的证书就是CA认证之后的证书。我们这里将根证书和服务器证书分别改名为ca.crt和serve.crt。</p>

<p>2、配置Apache服务器   <br/>
将ca.crt、server.key、server.crt上传到阿里云服务器，使用SSH登陆进入这三个文件的目录，执行下面命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ssl
</span><span class='line'>cp server.crt ssl/server.crt
</span><span class='line'>cp server.key ssl/server.key
</span><span class='line'>cp demoCA/cacert.pem ssl/ca.crt
</span><span class='line'>cp -r ssl /alidata/server/httpd/conf/</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/alidata/server/httpd/conf/extra/httpd-ssl.conf</code>文件，找到SSLCertificateFile、SSLCertificateKeyFile、SSLCACertificatePath、SSLCACertificateFile进行修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 指定服务器证书位置
</span><span class='line'>SSLCertificateFile "/alidata/server/httpd/conf/ssl/server.crt"
</span><span class='line'># 指定服务器证书key位置
</span><span class='line'>SSLCertificateKeyFile "/alidata/server/httpd/conf/ssl/server.key"
</span><span class='line'># 证书目录
</span><span class='line'>SSLCACertificatePath "/alidata/server/httpd/conf/ssl"
</span><span class='line'># 根证书位置
</span><span class='line'>SSLCACertificateFile "/alidata/server/httpd/conf/ssl/ca.crt"</span></code></pre></td></tr></table></div></figure>


<p>修改vhost配置<code>vim /alidata/server/httpd/conf/vhosts/phpwind.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:443&gt;
</span><span class='line'>        SSLCertificateFile    /alidata/server/httpd/conf/ssl/server.crt
</span><span class='line'>        SSLCertificateKeyFile /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>        SSLCACertificatePath /alidata/server/httpd/conf/ssl
</span><span class='line'>        SSLCACertificateFile /alidata/server/httpd/conf/ssl/ca.crt
</span><span class='line'>        ServerName www.casetree.cn
</span><span class='line'>        DocumentRoot /alidata/www
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>最后，重启Apache服务器，在浏览器输入网址查看是否配置成功。我这里是个人使用，申请的是免费的证书，我申请证书的网站是<a href="https://buy.wosign.com">沃通</a>。  <br/>
搭建的成果：<a href="https://www.casetree.cn">https://www.casetree.cn</a></p>

<h5>第二种、自建证书配置HTTPS服务器</h5>

<p>请查看我的上一篇<a href="http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/">自建证书配置HTTPS服务器</a></p>

<h3>三、使用nscurl对服务器进行检测</h3>

<p>搭建完HTTPS服务器之后，可以使用nscurl命令来进行检测，查看建立的HTTPS服务器是否能通过ATS特性。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nscurl --ats-diagnostics --verbose https://casetree.cn</span></code></pre></td></tr></table></div></figure>


<p>如果HTTPS服务器能通过ATS特性，则上面所有测试案例都是PASS；如果某一项的Reuslt是FAIL，就找到ATS Dictionary来查看，就能知道HTTPS服务器不满足ATS哪个条件。
这里我前面碰到一个问题，就是自建证书的时候，通过此命令进行测试时，发现Result全是FAIL，而且在iOS的代码测试中也出现了一个很奇怪的现象，就是相同的代码，在iOS8.4请求数据完全正常，但是在iOS9上，直接是连接失败。最终发现，其实就是因为自建证书不受信任，是通不过ATS的，除非将NSAllowsArbitraryLoads设置为YES。</p>

<h3>四、iOS客户端</h3>

<p>在上面的第二大步骤当中，HTTPS服务器满足ATS默认的条件，而且SSL证书是通过权威的CA机构认证过的，那么我们在使用Xcode7开发的时候，对网络的适配什么都不用做，我们也能正常与服务器通信。但是，当我们对安全性有更高的要求时或者我们自建证书时，我们需要本地导入证书来进行验证。   <br/>
那么，如何本地导入证书进行验证呢？   <br/>
在这里先提一下，由于iOS客户端支持的证书是DER格式的，我们需要创建客户端证书。创建客户端证书，直接将服务端的CA根证书导出成DER格式就行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl  x509  -inform PEM  -outform DER -in ca.crt -out ca.cer</span></code></pre></td></tr></table></div></figure>


<p>导入完证书之后，我们分别来说说使用NSURLSession和AFNetworking来进行本地验证。</p>

<h5>首先，来说说使用NSURLSession验证</h5>

<p>验证步骤如下：   <br/>
1、导入CA根证书到工程中，即我们创建的ca.cer   <br/>
2、获取trust object，通过SecCertificateCreateWithData方法读取导入的证书的数据生成一个证书对象，然后通过SecTrustSetAnchorCertificates
设置这个证书为trust object的信任根证书（trusted anchor)  <br/>
3、通过SecTrustEvaluate方法去验证trust object  <br/>
下面是主要OC实现代码，Demo工程我也放在github上了，有OC和Swift两种语言，下载Demo请点击<a href="https://github.com/liuchungui/HTTPSConnectDemo">HTTPSConnectDemo</a>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (void)viewDidLoad {
</span><span class='line'>    [super viewDidLoad];
</span><span class='line'>    //导入客户端证书
</span><span class='line'>    NSString *cerPath = [[NSBundle mainBundle] pathForResource:@"ca" ofType:@"cer"];
</span><span class='line'>    NSData *data = [NSData dataWithContentsOfFile:cerPath];
</span><span class='line'>    SecCertificateRef certificate = SecCertificateCreateWithData(NULL, (__bridge CFDataRef) data);
</span><span class='line'>    self.trustedCerArr = @[(__bridge_transfer id)certificate];
</span><span class='line'>    
</span><span class='line'>    //发送请求
</span><span class='line'>    NSURL *testURL = [NSURL URLWithString:@"https://casetree.cn/web/test/demo.php"];
</span><span class='line'>    NSURLSession *session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:self delegateQueue:[NSOperationQueue mainQueue]];
</span><span class='line'>    NSURLSessionDataTask *task = [session dataTaskWithRequest:[NSURLRequest requestWithURL:testURL]];
</span><span class='line'>    [task resume];
</span><span class='line'>    // Do any additional setup after loading the view, typically from a nib.
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>#pragma mark - NSURLSessionDelegate
</span><span class='line'>- (void)URLSession:(NSURLSession *)session didReceiveChallenge:(NSURLAuthenticationChallenge *)challenge
</span><span class='line'> completionHandler:(void (^)(NSURLSessionAuthChallengeDisposition disposition, NSURLCredential * __nullable credential))completionHandler{
</span><span class='line'>    
</span><span class='line'>    OSStatus err;
</span><span class='line'>    NSURLSessionAuthChallengeDisposition disposition = NSURLSessionAuthChallengePerformDefaultHandling;
</span><span class='line'>    SecTrustResultType  trustResult = kSecTrustResultInvalid;
</span><span class='line'>    NSURLCredential *credential = nil;
</span><span class='line'>    
</span><span class='line'>    //获取服务器的trust object
</span><span class='line'>    SecTrustRef serverTrust = challenge.protectionSpace.serverTrust;
</span><span class='line'>    
</span><span class='line'>    //将读取的证书设置为serverTrust的根证书
</span><span class='line'>    err = SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)self.trustedCerArr);
</span><span class='line'>    
</span><span class='line'>    if(err == noErr){
</span><span class='line'>        //通过本地导入的证书来验证服务器的证书是否可信，如果将SecTrustSetAnchorCertificatesOnly设置为NO，则只要通过本地或者系统证书链任何一方认证就行
</span><span class='line'>        err = SecTrustEvaluate(serverTrust, &trustResult);
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    if (err == errSecSuccess && (trustResult == kSecTrustResultProceed || trustResult == kSecTrustResultUnspecified)){
</span><span class='line'>        //认证成功，则创建一个凭证返回给服务器
</span><span class='line'>        disposition = NSURLSessionAuthChallengeUseCredential;
</span><span class='line'>        credential = [NSURLCredential credentialForTrust:serverTrust];
</span><span class='line'>    }
</span><span class='line'>    else{
</span><span class='line'>        disposition = NSURLSessionAuthChallengeCancelAuthenticationChallenge;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    //回调凭证，传递给服务器
</span><span class='line'>    if(completionHandler){
</span><span class='line'>        completionHandler(disposition, credential);
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>注意：   <br/>
1、SecTrustSetAnchorCertificates方法会设置一个标示去屏蔽trust object对其它根证书的信任；如果你也想信任系统默认的根证书，请调用SecTrustSetAnchorCertificatesOnly方法，清空这个标示（设置为NO）
2、验证的方法不仅仅只有这一种，更多的验证方法，请参考<a href="https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECCUSTOMIZEAPIS">HTTPS Server Trust Evaluation</a></p>

<h5>下面，来谈谈AFNetworking是如何验证的，我们如何使用AFNetworking</h5>

<p>AFNetworking的证书验证工作是由AFSecurityPolicy来完成的，所以这里我们主要来了解一下AFSecurityPolicy。<strong>注意：我这里使用的是AFNetworking2.6.0，它跟2.5.0是有区别的。</strong>  <br/>
说到AFSecurityPolicy，我们必须要提到它三个重要的属性，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@property (readonly, nonatomic, assign) AFSSLPinningMode SSLPinningMode;
</span><span class='line'>@property (nonatomic, assign) BOOL allowInvalidCertificates;
</span><span class='line'>@property (nonatomic, assign) BOOL validatesDomainName;</span></code></pre></td></tr></table></div></figure>


<p>SSLPingMode是最重要的属性，它标明了AFSecurityPolicy是以何种方式来验证。它是一个枚举类型，这个枚举类型有三个值，分别是AFSSLPinningModeNone、AFSSLPinningModePublicKey、AFSSLPinningModeCertificate。其中，AFSSLPinningModeNone代表了AFSecurityPolicy不做更严格的验证，只要是系统信任的证书就可以通过验证，不过，它受到allowInvalidCertificates和validatesDomainName的影响；AFSSLPinningModePublicKey是通过比较证书当中公钥(PublicKey)部分来进行验证，通过SecTrustCopyPublicKey方法获取本地证书和服务器证书，然后进行比较，如果有一个相同，则通过验证，此方式主要适用于自建证书搭建的HTTPS服务器和需要较高安全要求的验证；AFSSLPinningModeCertificate则是直接将本地的证书设置为信任的根证书，然后来进行判断，并且比较本地证书的内容和服务器证书内容是否相同，来进行二次判断，此方式适用于较高安全要求的验证。
allowInvalidCertificates属性代表是否允许不信任的证书通过验证，默认为NO
validatesDomainName属性代表是否验证主机名，默认为YES</p>

<p>接下来，我们说下验证流程。验证流程主要放在AFSecurityPolicy的- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust forDomain:(NSString *)domain方法当中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust
</span><span class='line'>                  forDomain:(NSString *)domain
</span><span class='line'>{
</span><span class='line'>    //当使用自建证书验证域名时，需要使用AFSSLPinningModePublicKey或者AFSSLPinningModeCertificate
</span><span class='line'>    if (domain && self.allowInvalidCertificates && self.validatesDomainName && (self.SSLPinningMode == AFSSLPinningModeNone || [self.pinnedCertificates count] == 0)) {
</span><span class='line'>        NSLog(@"In order to validate a domain name for self signed certificates, you MUST use pinning.");
</span><span class='line'>        return NO;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    NSMutableArray *policies = [NSMutableArray array];
</span><span class='line'>    //需要验证域名时，需要添加一个验证域名的策略
</span><span class='line'>    if (self.validatesDomainName) {
</span><span class='line'>        [policies addObject:(__bridge_transfer id)SecPolicyCreateSSL(true, (__bridge CFStringRef)domain)];
</span><span class='line'>    } else {
</span><span class='line'>        [policies addObject:(__bridge_transfer id)SecPolicyCreateBasicX509()];
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    //设置验证的策略，可以是多个
</span><span class='line'>    SecTrustSetPolicies(serverTrust, (__bridge CFArrayRef)policies);
</span><span class='line'>
</span><span class='line'>    //SSLPinningMode为AFSSLPinningModeNone时，allowInvalidCertificates为YES，则代表服务器任何证书都能验证通过；如果它为NO，则需要判断此服务器证书是否是系统信任的证书
</span><span class='line'>    if (self.SSLPinningMode == AFSSLPinningModeNone) {
</span><span class='line'>        if (self.allowInvalidCertificates || AFServerTrustIsValid(serverTrust)){
</span><span class='line'>            return YES;
</span><span class='line'>        } else {
</span><span class='line'>            return NO;
</span><span class='line'>        }
</span><span class='line'>    } else if (!AFServerTrustIsValid(serverTrust) && !self.allowInvalidCertificates) {
</span><span class='line'>        return NO;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    //获取服务器证书的内容
</span><span class='line'>    NSArray *serverCertificates = AFCertificateTrustChainForServerTrust(serverTrust);
</span><span class='line'>    switch (self.SSLPinningMode) {
</span><span class='line'>        case AFSSLPinningModeNone:
</span><span class='line'>        default:
</span><span class='line'>            return NO;
</span><span class='line'>        case AFSSLPinningModeCertificate: {
</span><span class='line'>            //AFSSLPinningModeCertificate是直接将本地的证书设置为信任的根证书，然后来进行判断，并且比较本地证书的内容和服务器证书内容是否相同，如果有一个相同则返回YES
</span><span class='line'>            
</span><span class='line'>            NSMutableArray *pinnedCertificates = [NSMutableArray array];
</span><span class='line'>            for (NSData *certificateData in self.pinnedCertificates) {
</span><span class='line'>                [pinnedCertificates addObject:(__bridge_transfer id)SecCertificateCreateWithData(NULL, (__bridge CFDataRef)certificateData)];
</span><span class='line'>            }
</span><span class='line'>            //设置本地的证书为根证书
</span><span class='line'>            SecTrustSetAnchorCertificates(serverTrust, (__bridge CFArrayRef)pinnedCertificates);
</span><span class='line'>            
</span><span class='line'>            //通过本地的证书来判断服务器证书是否可信，不可信，则验证不通过
</span><span class='line'>            if (!AFServerTrustIsValid(serverTrust)) {
</span><span class='line'>                return NO;
</span><span class='line'>            }
</span><span class='line'>            
</span><span class='line'>            //判断本地证书和服务器证书的内容是否相同
</span><span class='line'>            NSUInteger trustedCertificateCount = 0;
</span><span class='line'>            for (NSData *trustChainCertificate in serverCertificates) {
</span><span class='line'>                if ([self.pinnedCertificates containsObject:trustChainCertificate]) {
</span><span class='line'>                    trustedCertificateCount++;
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            return trustedCertificateCount &gt; 0;
</span><span class='line'>        }
</span><span class='line'>        case AFSSLPinningModePublicKey: {
</span><span class='line'>            //AFSSLPinningModePublicKey是通过比较证书当中公钥(PublicKey)部分来进行验证，通过SecTrustCopyPublicKey方法获取本地证书和服务器证书，然后进行比较，如果有一个相同，则通过验证
</span><span class='line'>            
</span><span class='line'>            NSUInteger trustedPublicKeyCount = 0;
</span><span class='line'>            NSArray *publicKeys = AFPublicKeyTrustChainForServerTrust(serverTrust);
</span><span class='line'>            
</span><span class='line'>            //判断服务器证书的公钥与本地的证书公钥是否相同，相同则客户端认证通过
</span><span class='line'>            for (id trustChainPublicKey in publicKeys) {
</span><span class='line'>                for (id pinnedPublicKey in self.pinnedPublicKeys) {
</span><span class='line'>                    if (AFSecKeyIsEqualToKey((__bridge SecKeyRef)trustChainPublicKey, (__bridge SecKeyRef)pinnedPublicKey)) {
</span><span class='line'>                        trustedPublicKeyCount += 1;
</span><span class='line'>                    }
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            return trustedPublicKeyCount &gt; 0;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    return NO;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>说了验证流程，我们最后来看看AFNetworking怎么使用，代码如下：</p>

<pre><code> _httpClient = [[BGAFHTTPClient alloc] initWithBaseURL:[NSURL URLWithString:baseURL]];
 AFSecurityPolicy *policy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];
 //是否允许CA不信任的证书通过
policy.allowInvalidCertificates = YES;
//是否验证主机名
policy.validatesDomainName = YES;
_httpClient.securityPolicy = policy;  
</code></pre>

<p> 这里我就没有建立Demo了，如果要看的话，可以看看我写的一个框架<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>，里面的Demo对ATS进行了适配，AFNetworking的使用放在BGNetworkConnector类里面的<code>- (instancetype)initWithBaseURL:(NSString *)baseURL delegate:(id&lt;BGNetworkConnectorDelegate&gt;)delegate</code>初始化方法中。</p>

<h3>五、适配ATS</h3>

<p>前面的内容讲述都是满足ATS特性的情况，但若是服务器是自建证书搭建的，或者TLS版本是1.0的话，服务器又不能轻易改动，那么我们客户端如何适配呢？
不急，我们可以在工程中的Info.plist文件当中进行设置，主要参照下图：
<img src="http://ww3.sinaimg.cn/large/91c6e389jw1ewvshzy5ilj21340m641y.jpg" alt="图片" />
适配过程中的一些总结： <br/>
1、如果是自建证书，没有经过权威机构认证的证书，那么需要将NSAllowsArbitraryLoads设置为YES才能通过。NSAllowsArbitraryLoads为YES，以前的HTTP请求也能通过。  <br/>
2、如果是认证过的证书，那么可以通过nscurl &ndash;ats-diagnostics &ndash;verbose <a href="https://casetree.cn%E8%BF%99%E6%A0%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E6%9D%A5%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84ATS">https://casetree.cn%E8%BF%99%E6%A0%B7%E7%9A%84%E5%91%BD%E4%BB%A4%E6%9D%A5%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84ATS</a> Dictionary，然后进行对应的设置。</p>

<p>适配的部分，也可以参照<a href="https://github.com/ChenYilong/iOS9AdaptationTips#1-demo1_ios9%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D_ats%E6%94%B9%E7%94%A8%E6%9B%B4%E5%AE%89%E5%85%A8%E7%9A%84https">Demo1_iOS9网络适配_ATS：改用更安全的HTTPS</a></p>

<h3>参考</h3>

<p><a href="https://developer.apple.com/library/mac/technotes/App-Transport-Security-Technote/">App Transport Security Technote</a>   <br/>
<a href="https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECCUSTOMIZEAPIS">HTTPS Server Trust Evaluation</a>   <br/>
<a href="http://www.cocoachina.com/ios/20150810/12947.html">打造安全的App！iOS安全系列之 HTTPS</a>   <br/>
<a href="http://www.cocoachina.com/ios/20140916/9632.html">AFNetworking源码解析&lt;三></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自建证书配置HTTPS服务器]]></title>
    <link href="http://liuchungui.github.io/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/"/>
    <updated>2015-09-25T11:24:02+08:00</updated>
    <id>http://liuchungui.github.io/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi</id>
    <content type="html"><![CDATA[<h3>说明</h3>

<p>1、写这篇博客的初衷是因为最近iOS9出来了，苹果官方默认要求使用HTTPS，所以自己想整一个HTTPS服务器，也想好好了解一下HTTPS通信，也知道了HTTPS其实就是在HTTP的基础上加上了SSL/TLS。具体想了解SSL/TLS原理的请浏览<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL/TLS协议运行机制的概述</a>和<a href="http://segmentfault.com/a/1190000002554673">SSL/TLS原理详解</a>。中途看了很多博客，也花了不少时间，所以想记录一些东西。</p>

<p>2、这篇博客的内容主要是讲升级openssl、如何自己创建证书、配置证书到服务器和自建CA。其中对证书不太了解的，可以看<a href="http://kb.cnblogs.com/page/194742/">数字证书及CA的扫盲介绍</a>这篇文章。本篇博客其中第2步和第3步已经重复，只需要选择其中一步操作就可以搭建HTTPS服务器，当然搭建都是不受信任的，如果是架设网站还是需要到权威的CA机构申请证书。本来还有生成iOS客户端的证书和使用证书连接服务器相关的内容，由于篇幅的原因就把它放在下一篇吧。</p>

<p>3、本人使用了Mac10.10.5和Ubuntu 14.04.1进行配置搭建，本篇博客主要以Unbuntu 14.04.1系统为主。而本人这个Ubuntu 14.04.1是阿里云一键安装的，而且没有更改里面的服务器设置，所以诸多的配置可能与一般Linux系统不太相同（与我电脑上的Linux mint就很大不同）。不过，我会在最后说明一下Mac和Linux配置一些不同的地方，其实都是一些相关路径的不同。当然，有可能你的Apache安装路径与我说的几种路径都不同，没关系，对照着修改也应该没什么问题。</p>

<!-- more -->


<h3>1、安装升级openssl</h3>

<h5>首先，查看下当前设备的openssl版本，如果版本在openssl1.0.1g以上，请略过</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl version -a
</span><span class='line'>#OpenSSL 1.0.1f 6 Jan 2014</span></code></pre></td></tr></table></div></figure>


<p>如果是处于<code>1.0.1-1.0.1f</code>的版本，那就赶快升级到<code>1.0.1g</code>版本以上吧！因为这些版本存在漏洞，详情请见<a href="http://drops.wooyun.org/papers/1381">关于OpenSSL“心脏出血”漏洞的分析</a></p>

<p>从上面信息可以看出我们的系统版本是1.0.1f，openssl需要升级，那我们先来下载源代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.openssl.org/source/openssl-1.0.1g.tar.gz     </span></code></pre></td></tr></table></div></figure>


<p>下载完之后，解压并进行安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -zxvf openssl-1.0.1g.tar.gz      
</span><span class='line'>cd  openssl-1.0.1g           
</span><span class='line'>./config shared zlib          
</span><span class='line'>make && make install        </span></code></pre></td></tr></table></div></figure>


<p>安装的过程中，碰到了一个问题
make: *** [install_docs] Error 255
解决这个问题请使用<code>make install_sw</code>安装，详情见<a href="https://github.com/openssl/openssl/issues/57">https://github.com/openssl/openssl/issues/57</a></p>

<h5>随后，进行相关的设置</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#修改历史的OpenSSL文件设置备份
</span><span class='line'>mv /usr/bin/openssl /usr/bin/openssl.old
</span><span class='line'>mv /usr/include/openssl /usr/include/openssl.old
</span><span class='line'>
</span><span class='line'>#设置软连接使其使用新的OpenSSL版本 刚刚安装的OpenSSL默认安装在/usr/local/ssl
</span><span class='line'>ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
</span><span class='line'>ln -s /usr/local/ssl/include/openssl /usr/include/openssl
</span><span class='line'>
</span><span class='line'>#更新动态链接库数据
</span><span class='line'>echo "/usr/local/ssl/lib" &gt;&gt; /etc/ld.so.conf
</span><span class='line'>ldconfig -v</span></code></pre></td></tr></table></div></figure>


<p>最后查看一下版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl version
</span><span class='line'>OpenSSL 1.0.1g 7 Apr 2014</span></code></pre></td></tr></table></div></figure>


<p>1.0.1g版本安装成功</p>

<h3>2、创建用私钥签名的证书，配置到Apache服务器</h3>

<h5>首先，生成私钥，创建请求证书，使用私钥对证书进行签名</h5>

<p>生成私钥  <br/>
<code>openssl genrsa -des3 -out private.key 2048</code> <br/>
-des3代表加上了加密，后面的2048是代表生成的密钥的位数，1024已经不是很安全，详情请见<a href="http://get.jobdeer.com/1607.get">互联网全站HTTPS的时代已经到来</a></p>

<p>生成证书请求   <br/>
<code>openssl req -new -key private.key -out server.csr</code>  <br/>
这一步需要填写一些信息，其中<code>Common Name (e.g. server FQDN or YOUR name) []</code>这个需要填写你的域名或服务器地址。</p>

<p>生成服务器的私钥，去除密钥口令   <br/>
<code>openssl rsa -in private.key -out server.key</code></p>

<p>使用私钥为证书请求签名，生成给服务器签署的证书，格式是x509的PEM格式  <br/>
<code>openssl x509 -req -in server.csr -out server.crt -outform pem -signkey server.key -days 3650</code> <br/>
-outform pem指定证书生成的格式，默认是pem，所以这个命令也可以写作成<code>sudo openssl x509 -req -in server.csr -out server.crt -signkey server.key -days 3650</code>。</p>

<p>将证书copy到Apache配置路径下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo  mkdir /alidata/server/httpd/conf/ssl
</span><span class='line'>cp server.key /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>cp server.crt  /alidata/server/httpd/conf/ssl/server.crt</span></code></pre></td></tr></table></div></figure>


<h5>其次，配置Apache服务器</h5>

<p>编辑/alidata/server/httpd/conf/httpd.conf文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#LoadModule ssl_module modules/mod_ssl.so
</span><span class='line'>#LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
</span><span class='line'>#Include conf/extra/httpd-ssl.conf</span></code></pre></td></tr></table></div></figure>


<p>将这三行前面的#去掉</p>

<p>编辑<code>/alidata/server/httpd/conf/extra/httpd-ssl.conf</code>文件，找到SSLCertificateFile、SSLCertificateKeyFile，修改它们两对应的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateFile "/alidata/server/httpd/conf/ssl/server.crt"
</span><span class='line'>SSLCertificateKeyFile "/alidata/server/httpd/conf/ssl/server.key"</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/alidata/server/httpd/conf/vhosts/phpwind.conf</code>文件，这里我没有更改阿里云的配置，如果你不是阿里云服务器，找到对应的<code>httpd/conf/extra/httpd-vhosts.conf</code>文件进行修改。这个文件我主要加了下面的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:443&gt;
</span><span class='line'>        SSLCertificateFile    /alidata/server/httpd/conf/ssl/server.crt
</span><span class='line'>        SSLCertificateKeyFile /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>        ServerName 182.92.5.161
</span><span class='line'>        DocumentRoot /alidata/www
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>最后，咱们重启Apache服务器，输入链接查看是否配置成功。</p>

<h3>3、自建CA，用CA证书进行签名，配置到Apache服务器</h3>

<h5>第一步、使用CA.sh创建CA根证书</h5>

<p>修改openssl的配置文件<code>sudo vim /usr/local/ssl/openssl.cnf</code>，修改<code>default_bits=1024</code>为<code>default_bits=2048</code>，使其openssl加密使用2048位，原因前面已经说过。</p>

<p>随后创建一个目录，并且将生成CA证书的脚本CA.sh复制到这个目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ca
</span><span class='line'>cd ca
</span><span class='line'>cp /usr/local/ssl/misc/CA.sh CA.sh</span></code></pre></td></tr></table></div></figure>


<p>CA.sh这个脚本如果找不到，可以使用 <code>openssl version -a</code>查看openssl对应的目录，而CA.sh一般就在这个目录的子目录misc目录下。</p>

<p>之后执行<code>./CA.sh -newca</code>命令  <br/>
CA.sh会使用<code>/usr/local/ssl/openssl.cnf</code>中的配置来创建私钥和证书，这正是我们第一步为啥需要修改这个文件的原因。</p>

<p>创建CA证书过程中，不输入信息，直接回车，填写加密私钥的密码和生成CA证书的相关信息。</p>

<p>创建完之后会生成demoCA目录。这个目录有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cacert.pem  certs  index.txt       index.txt.old  private
</span><span class='line'>careq.pem   crl    index.txt.attr  newcerts       serial</span></code></pre></td></tr></table></div></figure>


<p>其中cacert.pem是CA的证书，private存放CA的私钥，newcerts存放CA签名的备份。到这里，我们的CA已经建好了，下面我们可以通过CA来对我们的证书进行签名了。</p>

<h5>第二步、使用CA根证书为服务器证书签名</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#生成私钥
</span><span class='line'>sudo  openssl genrsa -des3 -out private.key 2048
</span><span class='line'>#生成证书请求
</span><span class='line'>sudo openssl req -new -key private.key -out server.csr
</span><span class='line'>#生成服务器的私钥，去除密钥口令
</span><span class='line'>sudo openssl rsa -in private.key -out server.key
</span><span class='line'>#使用CA进行签名，生成server.crt
</span><span class='line'>cp server.csr newreq.pem
</span><span class='line'>./CA.sh -sign
</span><span class='line'>mv newcert.pem server.crt
</span><span class='line'>或者上面三步都不需要，直接使用下面一步
</span><span class='line'>openssl ca -in server.csr -out server.crt</span></code></pre></td></tr></table></div></figure>


<p>更多openssl ca 命令请见<a href="http://blog.csdn.net/as3luyuan123/article/details/13346613">OpenSSL命令&ndash;ca</a></p>

<h5>第三步、配置服务器：</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ssl
</span><span class='line'>cp server.crt ssl/server.crt
</span><span class='line'>cp server.key ssl/server.key
</span><span class='line'>cp demoCA/cacert.pem ssl/ca.crt
</span><span class='line'>cp -r ssl /alidata/server/httpd/conf/</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/alidata/server/httpd/conf/extra/httpd-ssl.conf</code>文件，找到SSLCertificateFile、SSLCertificateKeyFile、SSLCACertificatePath、SSLCACertificateFile进行修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 指定服务器证书位置
</span><span class='line'>SSLCertificateFile "/alidata/server/httpd/conf/ssl/server.crt"
</span><span class='line'># 指定服务器证书key位置
</span><span class='line'>SSLCertificateKeyFile "/alidata/server/httpd/conf/ssl/server.key"
</span><span class='line'># 证书目录
</span><span class='line'>SSLCACertificatePath "/alidata/server/httpd/conf/ssl"
</span><span class='line'># 根证书位置
</span><span class='line'>SSLCACertificateFile "/alidata/server/httpd/conf/ssl/ca.crt"</span></code></pre></td></tr></table></div></figure>


<p>修改vhost配置<code>vim /alidata/server/httpd/conf/vhosts/phpwind.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:443&gt;
</span><span class='line'>        SSLCertificateFile    /alidata/server/httpd/conf/ssl/server.crt
</span><span class='line'>        SSLCertificateKeyFile /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>        SSLCACertificatePath /alidata/server/httpd/conf/ssl
</span><span class='line'>        SSLCACertificateFile /alidata/server/httpd/conf/ssl/ca.crt
</span><span class='line'>        ServerName 182.92.5.161
</span><span class='line'>        DocumentRoot /alidata/www
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>最后，咱们重启Apache服务器，在浏览器输入链接查看是否配置成功。可以在浏览器上查看证书信息，与第二步不同之处在于此时的证书有两个。</p>

<h3>最后，与Mac和寻常Linux系统一些区别</h3>

<h5>一、与MAC的几点不同</h5>

<p>1、首先安装openssl，因为本人还没有升级Mac系统上的openssl，所以暂时留着，以后升级了补上。  <br/>
2、Mac上对应的Openssl的路径是<code>/System/Library/OpenSSL/</code>  <br/>
3、Mac上对应的Apache的路径是<code>/etc/apache2/</code>  <br/>
4、Mac上重启服务器使用<code>/usr/sbin/apachectl restart</code>，阿里云服务器使用<code>/etc/init.d/httpd restart</code>或者<code>service httpd restart</code>
5、Mac上vhost配置的路径是<code>/etc/apache2/extra/httpd-vhosts.conf</code></p>

<h5>二、与寻常Linux系统的不同</h5>

<p>主要借鉴<a href="http://m.blog.csdn.net/blog/whyliu_/41749521">MacOS openssl下生成建立CA并生成服务器和客户端证书方法</a>这篇文章   <br/>
1、linux上Apache的路径是<code>/usr/local/apache</code>  <br/>
2、linux上vhost配置的路径是<code>/usr/local/apache/conf/extra/httpd_vhosts.conf</code></p>

<h3>总结</h3>

<p>1、对HTTPS的理解  <br/>
它的基本原理是服务器拥有一个私钥，客户端拥有公钥，当然它们是使用证书管理的。每次通信它们通过证书进行身份认证。身份认证之后客户端发送一个“对话密钥”给服务器。传输“对话密钥”时，客户端公钥通过不对称加密算法进行加密了的，只有服务器才能解密。然后双方使用这个"对话密钥"对内容进行对称加密，双方之间传输内容。</p>

<p>2、对openssl、SSL/TLS的相关理解  <br/>
openssl是一套工具，它是一个开源库，可以对相关内容进行加密和解密，也可以生成证书并且进行数字签名。它创建的x509证书有PEM和DER两种编码，而且它们还可以导出p12文件。它使用的加密算法有对称加密，也有不对称加密。</p>

<p>3、HTTPS相关理论知识博客，值得细读  <br/>
<a href="http://segmentfault.com/a/1190000002568019">OpenSSL 与 SSL 数字证书概念贴</a>  <br/>
<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL/TLS协议运行机制的概述</a>  <br/>
<a href="http://segmentfault.com/a/1190000002554673">SSL/TLS原理详解</a></p>

<h3>参考：</h3>

<p><a href="http://www.yezhongqi.com/archives/1377.html">https介绍与环境搭建</a>  <br/>
<a href="http://myswirl.blog.163.com/blog/static/5131864220071014102353799/">OpenSSL常用命令</a>  <br/>
<a href="http://blog.csdn.net/as3luyuan123/article/details/13344757">OpenSSL命令&mdash;CA.pl</a>  <br/>
<a href="http://m.blog.csdn.net/blog/whyliu_/41749521">MacOS openssl下生成建立CA并生成服务器和客户端证书方法</a>   <br/>
<a href="http://blog.csdn.net/zhu410289616/article/details/46566073">mac中apache开启https功能，本地发布安装app</a>  <br/>
<a href="http://www.cnblogs.com/kyrios/p/tls-and-certificates.html">TLS/HTTPS 证书生成与验证</a>   <br/>
<a href="http://www.cnblogs.com/phpinfo/archive/2013/08/09/3246376.html">OpenSSL小结</a>      <br/>
<a href="http://www.cnblogs.com/alittlebitcool/archive/2011/09/22/2185418.html">利用openssl进行RSA加密解密</a>  <br/>
<a href="http://blog.sina.com.cn/s/blog_a9303fd90101jmtx.html">DER 和 PEM 格式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoLayout使用代码写约束]]></title>
    <link href="http://liuchungui.github.io/blog/2015/09/20/autolayoutshi-yong-dai-ma-xie-yue-shu/"/>
    <updated>2015-09-20T23:20:56+08:00</updated>
    <id>http://liuchungui.github.io/blog/2015/09/20/autolayoutshi-yong-dai-ma-xie-yue-shu</id>
    <content type="html"><![CDATA[<h3>一、约束是什么？</h3>

<p>  约束是视图与视图之间一些属性关系。</p>

<!-- more -->


<p>  我们先来了解一下下面的内容：</p>

<p>  <strong>视图属性</strong>：视图属性(attribute)有<code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code>, <code>leading</code>, <code>trailing</code>, <code>width</code>, <code>height</code>, <code>centerX</code>, <code>centerY</code> 和 <code>baseline</code>。(注：iOS8加上了<code>Margin</code>，所以实际上从iOS8开始不止这些)</p>

<p>约束属性：每一个约束(Constraint)拥有的属性(Property)有：</p>

<ul>
<li> <strong>Constant value</strong>: 偏移量</li>
<li> <strong>Relation</strong>: 属性之间的关系，和关系表达式对应，例如>(大于),=(等于),>=(大于等于)</li>
<li> <strong>Priority level</strong>: 优先级，优先级越高，越会满足此约束。</li>
</ul>


<p>一个普通约束表达式: <code>view1.attribute = view2.attribute + ConstantValue</code></p>

<p>例子：当你定义一个button的位置时，你可能会有这么一个要求："按钮的左边距离父视图的左边20像素"。其实这句话用约束表达就是<code>button.left = (superView.left + 20)</code>。</p>

<h3>二、VFL(Visual Format Language)</h3>

<h5>1、语法</h5>

<p>下面这是一些常用的VFL语法示例，如果想要知道更详细的语法规则，请查看<a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html">Auto Layout Guide</a></p>

<table style="text-align:center;" bgcolor="#FFFFFF"> 
   <tbody>
    <tr> 
     <td>语法示例</td> 
     <td>效果图片</td> 
     <td>解释</td> 
    </tr> 
   </tbody>
   <tbody> 
    <tr> 
     <td>[button]-[textField]</td> 
     <td><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8up8p9omj205z00odfm.jpg" /></td> 
     <td>标准空间距离为8像素</td> 
    </tr> 
    <tr> 
     <td>[button(&gt;=50)]</td> 
     <td><img src="http://ww2.sinaimg.cn/large/91c6e389jw1ew8ur9pn6nj2020015q2q.jpg" /></td> 
     <td>宽度约束</td> 
    </tr> 
    <tr> 
     <td>|-50-[purpleBox]-50-|</td> 
     <td><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8uro1kggj204800wq2r.jpg" /></td> 
     <td>设置与父视图的关系，'|'代表父视图</td> 
    </tr> 
    <tr> 
     <td>V:[topField]-10-[bottomField]</td> 
     <td><img src="http://ww1.sinaimg.cn/large/91c6e389jw1ew8us3r78nj202o01ia9t.jpg" /></td> 
     <td>垂直方向的布局，'V'代表垂直方向，'H'代表水平方向</td> 
    </tr> 
    <tr> 
     <td>[maroonView][blueView]</td> 
     <td><img src="http://ww1.sinaimg.cn/large/91c6e389jw1ew8usnshqsj202r00k0b9.jpg" /></td> 
     <td>Flush Views</td> 
    </tr> 
    <tr> 
     <td>[button(100@20)]</td> 
     <td><img src="http://ww1.sinaimg.cn/large/91c6e389jw1ew8usxcz1lj202u014t8i.jpg" /></td> 
     <td>设置优先级，@后面就是此约束的优先级</td> 
    </tr> 
    <tr> 
     <td>[button1(==button2)]</td> 
     <td><img src="http://ww3.sinaimg.cn/large/91c6e389jw1ew8ut6n9abj205e015jr9.jpg" /></td> 
     <td>等宽设置</td> 
    </tr> 
    <tr> 
     <td>[flexibleButton(&gt;=70,&lt;=100)]</td> 
     <td><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8uteqiv8j202t01m744.jpg" /></td> 
     <td>多个谓语来确定尺寸</td> 
    </tr> 
   </tbody> 
</table>


<p></p>

<h5>2、VFL使用</h5>

<p>我们现在需要做这么一个UI需求：页面中有两个元素一张图片和一个文本。图片距左右两边和顶部10像素，而距底部100像素；文本距图片30像素。这个用代码如何实现？请看下面代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;dog.jpg&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentModeScaleAspectFit</span><span class="p">;</span>
</span><span class='line'><span class="c1">//注意：代码约束需要设置视图的translatesAutoresizingMaskIntoConstraints属性为NO</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">imageView</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">darkGrayColor</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;This is a lovely dog&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">viewsDictionary</span> <span class="o">=</span> <span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">imageView</span><span class="p">,</span> <span class="n">label</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的水平方向距父视图左右两边都为10</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr1</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-10-[imageView]-10-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片垂直方向距父视图顶部10，底部100</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr2</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-10-[imageView]-100-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置label的约束</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr3</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:[imageView]-30-[label]&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如下是运行的效果图：</p>

<p><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8yjnu80jj20yi1pcwj4.jpg" width=310 height=552 /></p>

<p>   到这里，我们已经使用VFL实现了需求。</p>

<p>   假如有一天，我们的产品经理觉得这个效果不好看，需要改一改，然后UI设计师重新出了一套效果图。上面的页面已经修改成：图片距左右两边和顶部10像素，而图片宽与高比例为5:7；描述文本处于水平居中位置，并且处于图片的下方与屏幕上方居中位置。</p>

<p>   此时，我们用代码如何实现？</p>

<p>   查看VFL语法，明显图片宽与高比例为5:7这个需求没有直接对应的语法，实现起来有点复杂。这时，我们可以使用苹果为我们封装的另外一个创建约束的方法<code>constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:</code>，就可以轻易实现我们的需求。如下，就是实现代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;dog.jpg&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentModeScaleAspectFit</span><span class="p">;</span>
</span><span class='line'><span class="c1">//注意：代码约束需要设置视图的translatesAutoresizingMaskIntoConstraints属性为NO</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">imageView</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">darkGrayColor</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;This is a lovely dog&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">viewsDictionary</span> <span class="o">=</span> <span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">imageView</span><span class="p">,</span> <span class="n">label</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的水平方向距父视图左右两边都为10像素</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr1</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-10-[imageView]-10-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">//设置图片垂直方向距父视图顶部10像素，底部100像素</span>
</span><span class='line'><span class="cm">NSArray *constraintArr2 = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:|-10-[imageView]-100-|&quot; options:0 metrics:nil views:viewsDictionary];</span>
</span><span class='line'><span class="cm">[self.view addConstraints:constraintArr2];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">//设置label的约束</span>
</span><span class='line'><span class="cm">NSArray *constraintArr3 = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:[imageView]-30-[label]&quot; options:0 metrics:nil views:viewsDictionary];</span>
</span><span class='line'><span class="cm">[self.view addConstraints:constraintArr3];</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的宽与高的比例为5:7</span>
</span><span class='line'><span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint1</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">imageView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeHeight</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">imageView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeWidth</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.4</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">constraint1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片距顶部10像素，描述文字处于图片与屏幕底部中间</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr3</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-10-[imageView]-[label]-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//描述文本水平居中</span>
</span><span class='line'><span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint2</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">label</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeCenterX</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeCenterX</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">constraint2</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行效果如下：</p>

<p><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew905ecso1j20yi1pc78y.jpg" width=310 height=552 /></p>

<p><code>constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:</code>方法主要是为了创建视图约束属性之间的关系，而这个方法的精髓主要是这么一个表达式：<strong>view1.attribute = view2.attribute * multiplier + constant</strong>。这里与我们前面讲过的表达式类似，只是多了一个multiplier的系数。</p>

<h3>三、Masnory写约束</h3>

<p><a href="https://github.com/SnapKit/Masonry">Masonry</a>是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了 并具有高可读性。</p>

<p>上面的需求，我使用Masnory实现起来，代码简洁了很多，而且基本上不怎么需要学就能通过Masnory实现上面的需求，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//注意：代码约束需要设置视图的translatesAutoresizingMaskIntoConstraints属性为NO</span>
</span><span class='line'><span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;dog.jpg&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentModeScaleAspectFit</span><span class="p">;</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">imageView</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">darkGrayColor</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;This is a lovely dog&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的水平方向距父视图左右两边都为10像素，图片的宽与高的比例为5:7</span>
</span><span class='line'><span class="p">[</span><span class="n">imageView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_left</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_top</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">imageView</span><span class="p">.</span><span class="n">mas_width</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">multipliedBy</span><span class="p">(</span><span class="mf">1.4</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//文字描述水平居中，并且处于图片与屏幕底部中间</span>
</span><span class='line'><span class="p">[</span><span class="n">label</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">centerX</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_centerX</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">imageView</span><span class="p">.</span><span class="n">mas_bottom</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">bottom</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_bottom</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>  效果如下：</p>

<p>  <img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew905ecso1j20yi1pc78y.jpg" width=310 height=552 /></p>

<p>  示例代码已经放到github上了，<a href="https://github.com/liuchungui/VFLDemo.git">github代码示例</a></p>

<h3>四、使用AutoLayout时，如何添加动画？</h3>

<p> 使用VFL时，动画改变尺寸或位置时，很简单只需要将对应的约束保存成全局变量，然后改变约束当中的属性就行了。</p>

<p> 使用Autolayout动画改变尺寸、位置的官方模板如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">containerView</span> <span class="n">layoutIfNeeded</span><span class="p">];</span> <span class="c1">// Ensures that all pending layout operations have been completed</span>
</span><span class='line'><span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Make all constraint changes here</span>
</span><span class='line'><span class="p">[</span><span class="n">containerView</span> <span class="n">layoutIfNeeded</span><span class="p">];</span> <span class="c1">// Forces the layout of the subtree animation block and then captures all of the frame changes</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>那如果使用的是Masnory框架，怎么添加动画？</p>

<p>我这里有个Demo，请看代码：</p>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];

    //创建displayView
    UIView *displayView = [[UIView alloc] init];
    displayView.backgroundColor = [UIColor purpleColor];
    [self.view addSubview:displayView];
    self.displayView = displayView;

    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    [button setTitle:@"点击" forState:UIControlStateNormal];
    [button setTitleColor:[UIColor darkGrayColor] forState:UIControlStateHighlighted];
    [button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];
    [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:button];

    //添加约束
    [displayView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.view.mas_top).offset(100);
        make.size.mas_equalTo(CGSizeMake(50, 50));
        make.centerX.equalTo(self.view.mas_centerX);
    }];

    [button mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(self.view.mas_centerX);
        make.size.mas_equalTo(CGSizeMake(200, 50));
        make.bottom.mas_equalTo(self.view.mas_bottom).offset(-50);
    }];
    // Do any additional setup after loading the view, typically from a nib.
} 


- (void)buttonAction:(UIButton *)butt    on{
    //动    画改变
    [self.view layoutIfNeeded];
    [UIView animateWithDuration:1.0 animations:^{
        [self.displayView mas_updateConstraints:^(MASConstraintMaker *make) {
            make.size.mas_equalTo(CGSizeMake(300, 300));
            }];
        [self.view layoutIfNeeded];
    }];
}
</code></pre>

<p>示例代码已经放到github上了，<a href="https://github.com/liuchungui/AnimationForAutoLayoutDemo.git">github代码示例</a></p>

<h3>五、什么时候使用代码写约束？</h3>

<p>  使用Xib写约束，可以很直观、快捷的搭建界面，让我们的开发速度提升很快。但，Xib开发有时候不是很灵活，这个时候我们就得考虑使用代码来实现约束。</p>

<p>  以下几种情况，我觉得使用代码写约束比较适合：</p>

<ul>
<li>运行时改变视图尺寸、位置的时候，应该使用代码写约束</li>
<li>封装一个控件时，使其能够有足够的灵活性，应该使用代码写约束</li>
<li>添加动画的时候，使用代码写约束。</li>
<li>一些复杂的UI，使用IB很难实现的场景，使用代码写约束</li>
</ul>


<h3>六、总结</h3>

<p>这篇文章主要讲了下面一些东西</p>

<ul>
<li>约束是什么</li>
<li>VFL相关语法</li>
<li>VFL的使用</li>
<li>Masnory框架的使用</li>
<li>使用Autolayout时，添加动画</li>
<li>哪些场景下使用代码来写约束</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac电脑上搭建octopress博客]]></title>
    <link href="http://liuchungui.github.io/blog/2015/09/11/macdian-nao-shang-da-jian-octopressbo-ke/"/>
    <updated>2015-09-11T22:51:44+08:00</updated>
    <id>http://liuchungui.github.io/blog/2015/09/11/macdian-nao-shang-da-jian-octopressbo-ke</id>
    <content type="html"><![CDATA[<p>搭建octopress博客的文章很详细已经有很多了，文章末尾就有相关的参考，我这里只简单记录下mac电脑上搭建octopress博客的步骤。</p>

<h4>1、搭建环境</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>遇到的问题：</p>

<ul>
<li><p><code>gem install bundler</code>失败了，需要更改一下<code>octopress/Gemfile</code>文件当中的源，将第一行<code>source "https://rubygems.org"</code> 更改成 <code>source "http://ruby.taobao.org/"</code>就行了。</p></li>
<li><p>如果安装的时候报<code>“You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory”</code>这样的错误，请加上sudo权限。</p></li>
</ul>


<p>之后，输入下面命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h4>2、将博客部署到github上</h4>

<p>在github上创建一个<code>username.github.io</code>的仓库，然后输入下面命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>回车，之后出现下面内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.io.git)
</span><span class='line'>           or 'https://github.com/your_username/your_username.github.io')
</span><span class='line'>Repository url:</span></code></pre></td></tr></table></div></figure>


<p>粘贴<code>username.github.io</code>仓库对应的url，例如我的就是<code>https://github.com/liuchungui/liuchungui.github.io.git</code></p>

<h4>3、生成并编辑博客</h4>

<p>首先，使用下面命令生成新文章，其中title就是博文名，你也可以输入<code>rake new_post</code>回车，然后在再输入博文名。文章在<code>source/_post/</code>目录下，<code>文件名构成为时间和标题的拼音</code>。可以进入到<code>octopress/source/_posts</code>目录，找到对应的博文进行修改。博文采用的markdown语法，我推荐一款不错的编辑工具<strong>Mou</strong>，它可以实时编辑实时查看。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post['title']</span></code></pre></td></tr></table></div></figure>


<p>然后，使用下面命令生成并在本地进行预览。<code>rake preview</code>开启一个web服务，此时就可以预览了，使用<code>localhost:4000</code>打开看查看效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>之后，查看效果没有问题，则使用下面命令上传到github。这条命令会将<code>octopress/public</code>下的文件上传到你的仓库master分支下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>最后，将源代码上传到github仓库的source分支下，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'add source file'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h4>4、删除twitter、google相关东西：</h4>

<ul>
<li>修改文件<code>octopress/_config.yml</code>文件，设置title、subtitle、author，注意最好把里面的 twitter 相关的信息全部删掉，否则由于 GFW 的原因，将会造成页面 load 很慢。</li>
<li>修改头部模块 <strong>source/_includes/head.html</strong> 将<code>//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js</code>替换成<code>http://cdn.staticfile.org/jquery/1.9.1/jquery.min.js</code>，否则会很慢。</li>
<li>修改定制文件 <strong>source/_includes/custom/head.html</strong> 把 google 的自定义字体去掉，原因同上。</li>
</ul>


<h4>5、自定义博客</h4>

<p>新标签打开网站中第三方链接，将以下代码加入 <code>source/_includes/custom/head.html</code>文件中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">addBlankTargetForLinks</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a[href^=&quot;http&quot;]&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;DOMNodeInserted&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">addBlankTargetForLinks</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其它，界面、侧边栏、底部栏、添加top回到顶部等，请参考<a href="http://foggry.com/blog/2014/04/28/custom-your-octopress-blog/">自定义你的Octopress博客</a></p>

<h4>参考</h4>

<p>添加评论和分享系统，请参考<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a></p>

<p><a href="http://matrixzk.github.io/blog/20141020/octopress-setup-and-analysis/#section">使用 Octopress 2.0 搭建基于 Github Pages 个人博客的详细过程及原理分析</a></p>

<p><a href="http://www.jianshu.com/p/0ac2ac1a8e45">octopress博客搭建和个性化配置</a></p>
]]></content>
  </entry>
  
</feed>
