<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘春桂的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liuchungui.com/"/>
  <updated>2017-09-11T02:08:39.000Z</updated>
  <id>http://www.liuchungui.com/</id>
  
  <author>
    <name>liuchungui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Numpy与Pandas使用</title>
    <link href="http://www.liuchungui.com/2017/09/11/Numpy%E4%B8%8EPandas%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.liuchungui.com/2017/09/11/Numpy与Pandas使用/</id>
    <published>2017-09-10T17:05:01.000Z</published>
    <updated>2017-09-11T02:08:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="它们是什么？"><a href="#它们是什么？" class="headerlink" title="它们是什么？"></a>它们是什么？</h2><blockquote>
<p>NumPy是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p>
<p>Pandas是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。Pandas提供了大量能使我们快速便捷地处理数据的函数和方法。</p>
</blockquote>
<a id="more"></a>
<h2 id="List、Numpy与Pandas"><a href="#List、Numpy与Pandas" class="headerlink" title="List、Numpy与Pandas"></a>List、Numpy与Pandas</h2><h4 id="Numpy与List"><a href="#Numpy与List" class="headerlink" title="Numpy与List"></a>Numpy与List</h4><p>相同之处：</p>
<ul>
<li>都可以用下标访问元素，例如a[0]</li>
<li>都可以切片访问，例如a[1:3]</li>
<li>都可以使用for循环进行遍历</li>
</ul>
<p>不同之处：</p>
<ul>
<li>Numpy之中每个元素类型必须相同；而List中可以混合多个类型元素</li>
<li>Numpy使用更方便，封装了许多函数，例如mean、std、sum、min、max等</li>
<li>Numpy可以是多维数组</li>
<li>Numpy用C实现，操作起来速度更快</li>
</ul>
<h4 id="Pandas与Numpy"><a href="#Pandas与Numpy" class="headerlink" title="Pandas与Numpy"></a>Pandas与Numpy</h4><p>相同之处：</p>
<ul>
<li>访问元素一样，可以使用下标，也可以使用切片访问</li>
<li>可以使用For循环遍历</li>
<li>有很多方便的函数，例如mean、std、sum、min、max等</li>
<li>可以进行向量运算</li>
<li>用C实现，速度更快</li>
</ul>
<p>不同之处：Pandas拥有Numpy一些没有的方法，例如describe函数。其主要区别是：Numpy就像增强版的List，而Pandas就像列表和字典的合集，Pandas有索引。</p>
<h2 id="Numpy使用"><a href="#Numpy使用" class="headerlink" title="Numpy使用"></a>Numpy使用</h2><h4 id="1、基本操作"><a href="#1、基本操作" class="headerlink" title="1、基本操作"></a>1、基本操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment">#创建Numpy</span></div><div class="line">p1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="keyword">print</span> p1</div><div class="line"><span class="keyword">print</span> p1.dtype</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[1 2 3]</div><div class="line">int64</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#求平均值</span></div><div class="line"><span class="keyword">print</span> p1.mean()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2.0</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#求标准差</span></div><div class="line"><span class="keyword">print</span> p1.std()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0.816496580928</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#求和、求最大值、求最小值</span></div><div class="line"><span class="keyword">print</span> p1.sum()</div><div class="line"><span class="keyword">print</span> p1.max()</div><div class="line"><span class="keyword">print</span> p1.min()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">6</div><div class="line">3</div><div class="line">1</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#求最大值所在位置</span></div><div class="line"><span class="keyword">print</span> p1.argmax()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2</div></pre></td></tr></table></figure>
<h4 id="2、向量运算"><a href="#2、向量运算" class="headerlink" title="2、向量运算"></a>2、向量运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">p1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line">p2 = np.array([<span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#向量相加，各个元素相加</span></div><div class="line"><span class="keyword">print</span> p1 + p2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ 3  7 10]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#向量乘以1个常数</span></div><div class="line"><span class="keyword">print</span> p1 * <span class="number">2</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[2 4 6]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#向量相减</span></div><div class="line"><span class="keyword">print</span> p1 - p2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[-1 -3 -4]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#向量相乘，各个元素之间做运算</span></div><div class="line"><span class="keyword">print</span> p1 * p2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ 2 10 21]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#向量与一个常数比较</span></div><div class="line"><span class="keyword">print</span> p1 &gt; <span class="number">2</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[False False  True]</div></pre></td></tr></table></figure>
<h4 id="3、索引数组"><a href="#3、索引数组" class="headerlink" title="3、索引数组"></a>3、索引数组</h4><p>首先，看下面一幅图，理解下<br><img src="http://ww1.sinaimg.cn/large/7746cd07ly1fjew15myc4j20ra0d9tcy.jpg" alt=""><br>然后，咱们用代码实现看下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line"><span class="keyword">print</span> a</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1 2 3 4 5]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">b = a &gt; <span class="number">2</span></div><div class="line"><span class="keyword">print</span> b</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[False False  True  True  True]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> a[b]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[3 4 5]</div></pre></td></tr></table></figure>
<p>a[b]中，只会保留a中所对应的b位置为True的元素</p>
<h4 id="4、原地与非原地"><a href="#4、原地与非原地" class="headerlink" title="4、原地与非原地"></a>4、原地与非原地</h4><p>咱们先来看一组运算：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">b = a</div><div class="line">a += np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">print</span> b</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[2 3 4 5]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">b = a</div><div class="line">a = a + np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</div><div class="line"><span class="keyword">print</span> b</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1 2 3 4]</div></pre></td></tr></table></figure>
<p>从上面结果可以看出来，+=改变了原来数组，而+没有。这是因为：</p>
<ul>
<li>+=：它是原地计算，不会创建一个新的数组，在原始数组中更改元素</li>
<li>+：它是非原地计算，会创建一个新的数组，不会修改原始数组中的元素</li>
</ul>
<h4 id="5、Numpy中的切片与List的切片"><a href="#5、Numpy中的切片与List的切片" class="headerlink" title="5、Numpy中的切片与List的切片"></a>5、Numpy中的切片与List的切片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">l1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line">l2 = l1[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">l2[<span class="number">0</span>] = <span class="number">5</span></div><div class="line"><span class="keyword">print</span> l2</div><div class="line"><span class="keyword">print</span> l1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[5, 2]</div><div class="line">[1, 2, 3, 5]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>])</div><div class="line">p2 = p1[<span class="number">0</span>:<span class="number">2</span>]</div><div class="line">p2[<span class="number">0</span>] = <span class="number">5</span></div><div class="line"><span class="keyword">print</span> p1</div><div class="line"><span class="keyword">print</span> p2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[5 2 3 5]</div><div class="line">[5 2]</div></pre></td></tr></table></figure>
<p>从上可知，List中改变切片中的元素，不会影响原来的数组；而Numpy改变切片中的元素，原来的数组也跟着变了。这是因为：Numpy的切片编程不会创建一个新数组出来，当修改对应的切片也会更改原始的数组数据。这样的机制，可以让Numpy比原生数组操作更快，但编程时需要注意。</p>
<h4 id="6、二维数组的操作"><a href="#6、二维数组的操作" class="headerlink" title="6、二维数组的操作"></a>6、二维数组的操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">p1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]])</div><div class="line"><span class="comment">#获取其中一维数组</span></div><div class="line"><span class="keyword">print</span> p1[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[1 2 3]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取其中一个元素，注意它可以是p1[0, 1]，也可以p1[0][1]</span></div><div class="line"><span class="keyword">print</span> p1[<span class="number">0</span>, <span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> p1[<span class="number">0</span>][<span class="number">1</span>]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2</div><div class="line">2</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#求和是求所有元素的和</span></div><div class="line"><span class="keyword">print</span> p1.sum()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">41</div><div class="line">[10 14 17]</div></pre></td></tr></table></figure>
<p>但，当设置axis参数时，当设置为0时，是计算每一列的结果，然后返回一个一维数组；若是设置为1时，则是计算每一行的结果，然后返回一维数组。对于二维数组，Numpy中很多函数都可以设置axis参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取每一列的结果</span></div><div class="line"><span class="keyword">print</span> p1.sum(axis=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[10 14 17]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取每一行的结果</span></div><div class="line"><span class="keyword">print</span> p1.sum(axis=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ 6 24 11]</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mean函数也可以设置axis</span></div><div class="line"><span class="keyword">print</span> p1.mean(axis=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ 3.33333333  4.66666667  5.66666667]</div></pre></td></tr></table></figure>
<h2 id="Pandas使用"><a href="#Pandas使用" class="headerlink" title="Pandas使用"></a>Pandas使用</h2><p>Pandas的Series拥有Numpy的所有功能，而且Pandas还拥有DataFrame，它拥有更强大的功能，咱们主要梳理下Numpy没有的功能：</p>
<h4 id="1、简单基本使用"><a href="#1、简单基本使用" class="headerlink" title="1、简单基本使用"></a>1、简单基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line">pd1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="keyword">print</span> pd1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0    1</div><div class="line">1    2</div><div class="line">2    3</div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#也可以求和和标准偏差</span></div><div class="line"><span class="keyword">print</span> pd1.sum()</div><div class="line"><span class="keyword">print</span> pd1.std()</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">6</div><div class="line">1.0</div></pre></td></tr></table></figure>
<h4 id="2、索引数组"><a href="#2、索引数组" class="headerlink" title="2、索引数组"></a>2、索引数组</h4><p>（1）简单的Seris索引数组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p1 = pd.Series(</div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">)</div><div class="line"><span class="keyword">print</span> p1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a    1</div><div class="line">b    2</div><div class="line">c    3</div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> p1[<span class="string">'a'</span>]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1</div></pre></td></tr></table></figure>
<p>（2）DataFrame数组</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">p1 = pd.DataFrame(&#123;</div><div class="line">    <span class="string">'name'</span>: [<span class="string">'Jack'</span>, <span class="string">'Lucy'</span>, <span class="string">'Coke'</span>],</div><div class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">print</span> p1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   age  name</div><div class="line">0   18  Jack</div><div class="line">1   19  Lucy</div><div class="line">2   21  Coke</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取name一列</span></div><div class="line"><span class="keyword">print</span> p1[<span class="string">'name'</span>]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0    Jack</div><div class="line">1    Lucy</div><div class="line">2    Coke</div><div class="line">Name: name, dtype: object</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取姓名的第一个</span></div><div class="line"><span class="keyword">print</span> p1[<span class="string">'name'</span>][<span class="number">0</span>]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Jack</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用p1[0]不能获取第一行，但是可以使用iloc</span></div><div class="line"><span class="keyword">print</span> p1.iloc[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">age       18</div><div class="line">name    Jack</div><div class="line">Name: 0, dtype: object</div></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>获取一列使用p1[‘name’]这种索引</li>
<li>获取一行使用p1.iloc[0]</li>
</ul>
<h4 id="3、apply使用"><a href="#3、apply使用" class="headerlink" title="3、apply使用"></a>3、apply使用</h4><p>apply可以操作Pandas里面的元素，当库里面没用对应的方法时，可以通过apply来进行封装</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(value)</span>:</span></div><div class="line">    <span class="keyword">return</span> value * <span class="number">3</span></div><div class="line">pd1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>])</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> pd1.apply(func)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0     3</div><div class="line">1     6</div><div class="line">2    15</div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<p>同样可以在DataFrame上使用：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pd2 = pd.DataFrame(&#123;</div><div class="line">    <span class="string">'name'</span>: [<span class="string">'Jack'</span>, <span class="string">'Lucy'</span>, <span class="string">'Coke'</span>],</div><div class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">print</span> pd2.apply(func)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   age          name</div><div class="line">0   54  JackJackJack</div><div class="line">1   57  LucyLucyLucy</div><div class="line">2   63  CokeCokeCoke</div></pre></td></tr></table></figure>
<h4 id="4、axis参数"><a href="#4、axis参数" class="headerlink" title="4、axis参数"></a>4、axis参数</h4><p>Pandas设置axis时，与Numpy有点区别：</p>
<ul>
<li>当设置axis为’columns’时，是计算每一行的值</li>
<li>当设置axis为’index’时，是计算每一列的值</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pd2 = pd.DataFrame(&#123;</div><div class="line">    <span class="string">'weight'</span>: [<span class="number">120</span>, <span class="number">130</span>, <span class="number">150</span>],</div><div class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0    138</div><div class="line">1    149</div><div class="line">2    171</div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#计算每一行的值</span></div><div class="line"><span class="keyword">print</span> pd2.sum(axis=<span class="string">'columns'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0    138</div><div class="line">1    149</div><div class="line">2    171</div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#计算每一列的值</span></div><div class="line"><span class="keyword">print</span> pd2.sum(axis=<span class="string">'index'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">age        58</div><div class="line">weight    400</div><div class="line">dtype: int64</div></pre></td></tr></table></figure>
<h4 id="5、分组"><a href="#5、分组" class="headerlink" title="5、分组"></a>5、分组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pd2 = pd.DataFrame(&#123;</div><div class="line">    <span class="string">'name'</span>: [<span class="string">'Jack'</span>, <span class="string">'Lucy'</span>, <span class="string">'Coke'</span>, <span class="string">'Pol'</span>, <span class="string">'Tude'</span>],</div><div class="line">    <span class="string">'age'</span>: [<span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">19</span>]</div><div class="line">&#125;)</div><div class="line"><span class="comment">#以年龄分组</span></div><div class="line"><span class="keyword">print</span> pd2.groupby(<span class="string">'age'</span>).groups</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;18: Int64Index([0], dtype=&apos;int64&apos;), 19: Int64Index([1, 4], dtype=&apos;int64&apos;), 21: Int64Index([2, 3], dtype=&apos;int64&apos;)&#125;</div></pre></td></tr></table></figure>
<h4 id="6、向量运算"><a href="#6、向量运算" class="headerlink" title="6、向量运算"></a>6、向量运算</h4><p>需要注意的是，索引数组相加时，对应的索引相加</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pd1 = pd.Series(</div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    index = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">)</div><div class="line"></div><div class="line">pd2 = pd.Series(</div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</div><div class="line">    index = [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]</div><div class="line">)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> pd1 + pd2</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a    2.0</div><div class="line">b    NaN</div><div class="line">c    5.0</div><div class="line">d    NaN</div><div class="line">dtype: float64</div></pre></td></tr></table></figure>
<p>出现了NAN值，如果我们期望NAN不出现，如何处理？使用add函数，并设置fill_value参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> pd1.add(pd2, fill_value=<span class="number">0</span>)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a    2.0</div><div class="line">b    2.0</div><div class="line">c    5.0</div><div class="line">d    3.0</div><div class="line">dtype: float64</div></pre></td></tr></table></figure>
<p>同样，它可以应用在Pandas的dataFrame中，只是需要注意列与行都要对应起来。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一周学习了优达学城上分析基础的课程，使用的是Numpy与Pandas。对于Numpy，以前在Tensorflow中用过，但是很不明白，这次学习之后，才知道那么简单，算是有一定的收获。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;它们是什么？&quot;&gt;&lt;a href=&quot;#它们是什么？&quot; class=&quot;headerlink&quot; title=&quot;它们是什么？&quot;&gt;&lt;/a&gt;它们是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;NumPy是Python语言的一个扩充程序库。支持高级大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。&lt;/p&gt;
&lt;p&gt;Pandas是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。Pandas提供了大量能使我们快速便捷地处理数据的函数和方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Pandas" scheme="http://www.liuchungui.com/tags/Pandas/"/>
    
      <category term="Numpy" scheme="http://www.liuchungui.com/tags/Numpy/"/>
    
      <category term="Pandas与Numpy使用" scheme="http://www.liuchungui.com/tags/Pandas%E4%B8%8ENumpy%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Pandas使用" scheme="http://www.liuchungui.com/tags/Pandas%E4%BD%BF%E7%94%A8/"/>
    
      <category term="Numpy使用" scheme="http://www.liuchungui.com/tags/Numpy%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装和部署Redis</title>
    <link href="http://www.liuchungui.com/2017/09/10/Linux%E5%AE%89%E8%A3%85%E5%92%8C%E9%83%A8%E7%BD%B2Redis/"/>
    <id>http://www.liuchungui.com/2017/09/10/Linux安装和部署Redis/</id>
    <published>2017-09-10T07:36:34.000Z</published>
    <updated>2017-09-10T07:45:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Redis是一个高性能的key-value数据库，和Memcached类似， 它的数据都是缓存在内存中，区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
</blockquote>
<p>我们最近需要使用多台机器，分布式爬取数据，采用的框架是scrapy-redis，所以需要在一台服务器上安装Redis。</p>
<p>而今天上午，在阿里云服务器上安装部署Redis时，遇到一些问题，没有在网上找到解决办法，记录一下。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装这个步骤很简单，主要参考<a href="http://www.cnblogs.com/wangchunniu1314/p/6339416.html" target="_blank" rel="external">Linux下Redis的安装和部署</a>，下面说下步骤。</p>
<h4 id="1、到官网下载压缩包，然后解压"><a href="#1、到官网下载压缩包，然后解压" class="headerlink" title="1、到官网下载压缩包，然后解压"></a>1、到<a href="http://redis.io/download" target="_blank" rel="external">官网下载</a>压缩包，然后解压</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#直接复制下载链接，通过wget下载</div><div class="line">$ wget http://download.redis.io/releases/redis-4.0.1.tar.gz</div><div class="line">#解压</div><div class="line">$ tar zxvf redis-4.0.1.tar.gz</div></pre></td></tr></table></figure>
<h4 id="2、进入Redis目录，对解压后的文件进行编译"><a href="#2、进入Redis目录，对解压后的文件进行编译" class="headerlink" title="2、进入Redis目录，对解压后的文件进行编译"></a>2、进入Redis目录，对解压后的文件进行编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 进入目录</div><div class="line">$ cd redis-4.0.1/</div><div class="line"># 编译</div><div class="line">$ make</div></pre></td></tr></table></figure>
<h4 id="3、进入src目录，执行make-install安装Redis"><a href="#3、进入src目录，执行make-install安装Redis" class="headerlink" title="3、进入src目录，执行make install安装Redis"></a>3、进入src目录，执行make install安装Redis</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd src</div><div class="line"># 安装</div><div class="line">$ make install</div></pre></td></tr></table></figure>
<p>然后，在终端输入<code>redis-server</code>看到如下界面，说明安装成功。<br><img src="http://ww1.sinaimg.cn/large/7746cd07ly1fjeg0176ymj21qk11ywly.jpg" alt=""></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="1、修改配置文件"><a href="#1、修改配置文件" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h4><p>回退到<code>redis-4.0.1/</code>目录，修改<code>redis.conf</code>文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cd ..</div><div class="line"># 查看当前目录</div><div class="line">$ pwd</div><div class="line">/root/redis-4.0.1</div><div class="line">$ vim redis.conf</div></pre></td></tr></table></figure>
<p>我这里的需求是希望外部机器能访问，所以注释掉<code>bind 127.0.0.1</code></p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07ly1fjeg7hxgv3j21qo10kdof.jpg" alt=""></p>
<p>但是不能随便一台电脑都能连接，所以通过<code>requirepass</code>设置一个密码，最好设置长一点</p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07ly1fjegb25urhj21qs0vewmm.jpg" alt=""></p>
<p>这样，基本的就设置好了</p>
<h4 id="2、debug模式，调试连接"><a href="#2、debug模式，调试连接" class="headerlink" title="2、debug模式，调试连接"></a>2、debug模式，调试连接</h4><p>（1）首先，我们用debug模式启动服务器，这样能更好的查看状态和分析问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">redis-server redis.conf  --loglevel debug</div></pre></td></tr></table></figure>
<p>（2）然后，我们另开一个终端，使用ssh登录到服务器，在服务器上使用客户端连接Redis</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-cli</div></pre></td></tr></table></figure>
<p>这里，我们也可以在Redis服务器的终端，看到有一个连接到我们服务器。</p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07ly1fjegodyb2nj21qs10un6c.jpg" alt=""></p>
<p>（3）之后，我们在redis客户端进行简单操作，使用<code>keys *</code>查看Redis数据库存了key值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">(error) NOAUTH Authentication required.</div></pre></td></tr></table></figure>
<p>出现了错误，这是因为我们Redis服务器设置了需要密码。这里，我们可以输入<code>auth 1234567</code>来进行获得权限，也可以在登录Redis服务器时，给定密码，例如：<code>redis-cli -a 1234567</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; auth 1234567</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">(empty list or set)</div><div class="line">127.0.0.1:6379&gt; set name liuchungui</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get name</div><div class="line">&quot;liuchungui&quot;</div></pre></td></tr></table></figure>
<p>从上可以看出来，我们将name的liuchungui字段成功的存入Redis，并且取出来展示。</p>
<p>（4）其后，我们试一下，在本地电脑上连接Redis有没有问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ redis-cli -h 192.168.0.299 -a 1234567</div></pre></td></tr></table></figure>
<p><strong>注意：</strong> 将所有的192.168.0.299换成你自己的服务器ip</p>
<p>然后发现，连接不上，出现<code>Operation timed out</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">192:~ liuchungui$ redis-cli -p 6379 -h 192.168.0.299 -a 1234567</div><div class="line">Could not connect to Redis at 192.168.0.299:6379: Operation timed out</div><div class="line">Could not connect to Redis at 192.168.0.299: Operation timed out</div><div class="line">not connected&gt; keys *</div></pre></td></tr></table></figure>
<p>这时，我通过<code>ping</code>服务器的6379端口，居然ping不通。经过各种google之后，最后找到了解决之法：<strong>原来这是因为阿里云没有开放6379端口，只需要到阿里云那里设置一下安全组就行了</strong>。</p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07ly1fjeh6rftn0j20x8110diq.jpg" alt=""></p>
<p>阿里云安全组具体添加方法，请参考<a href="https://help.aliyun.com/document_detail/25471.html?spm=0.0.0.0.lJ3nDn" target="_blank" rel="external">添加安全组规则</a></p>
<p>当这里设置好了之后，我在本地就能连接服务器的Redis了。</p>
<p>（5）最后，调试没有问题，我们将Redis设置为后台运行。</p>
<p>编辑redis.conf，然后将<code>daemonize</code>属性改为<code>yes</code></p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07ly1fjehgst7uhj21da0po7ch.jpg" alt=""></p>
<p>运行服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ redis-server redis.conf</div><div class="line">6997:C 10 Sep 15:10:17.034 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</div><div class="line">6997:C 10 Sep 15:10:17.034 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=6997, just started</div><div class="line">6997:C 10 Sep 15:10:17.034 # Configuration loaded</div></pre></td></tr></table></figure>
<p>到此，我们部署完成。</p>
<h2 id="三、问题与总结"><a href="#三、问题与总结" class="headerlink" title="三、问题与总结"></a>三、问题与总结</h2><p>在这里我碰到最主要的一个大问题是本地电脑无法连接服务器上的Redis，然后尝试了各种<code>失败的方法</code>。</p>
<ul>
<li>刚开始以为是<code>redis.conf</code>这个配置文件没配置好，所以尝试在<code>bind</code>后面添加本地的ip，后来发现不行。后来才知道，bind后面添加ip，指定是Redis所在服务器网卡的ip，不是指定某些IP可以访问本机Redis实例，这是一个误区。这可以参考<a href="https://my.oschina.net/ironwill/blog/902006" target="_blank" rel="external">Redis bind 限制和指定IP访问</a>和<a href="https://stackoverflow.com/questions/25416007/what-does-the-bind-parameter-do-in-redis" target="_blank" rel="external">What does the bind parameter do in Redis?</a></li>
<li>各种搜索通过防火墙来开启端口，即通过<code>iptables</code>来实现，后来发现还是不行。这在自己建立的服务器应该有作用，可以限制固定的ip来访问。而阿里云，是在阿里云网站进行配置。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.cnblogs.com/wangchunniu1314/p/6339416.html" target="_blank" rel="external">Linux下Redis的安装和部署</a></p>
<p><a href="http://www.jianshu.com/p/781e8ad3151b" target="_blank" rel="external">redis进阶：密码设置、访问权限控制等安全设置</a></p>
<p><a href="https://bbs.aliyun.com/simple/t289243.html" target="_blank" rel="external">阿里云开放端口权限</a></p>
<p><a href="https://my.oschina.net/ironwill/blog/902006" target="_blank" rel="external">Redis bind 限制和指定IP访问</a></p>
<p><a href="https://stackoverflow.com/questions/25416007/what-does-the-bind-parameter-do-in-redis" target="_blank" rel="external">What does the bind parameter do in Redis?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Redis是一个高性能的key-value数据库，和Memcached类似， 它的数据都是缓存在内存中，区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们最近需要使用多台机器，分布式爬取数据，采用的框架是scrapy-redis，所以需要在一台服务器上安装Redis。&lt;/p&gt;
&lt;p&gt;而今天上午，在阿里云服务器上安装部署Redis时，遇到一些问题，没有在网上找到解决办法，记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="http://www.liuchungui.com/tags/Redis/"/>
    
      <category term="Redis部署" scheme="http://www.liuchungui.com/tags/Redis%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Redis权限控制" scheme="http://www.liuchungui.com/tags/Redis%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Linux安装Redis" scheme="http://www.liuchungui.com/tags/Linux%E5%AE%89%E8%A3%85Redis/"/>
    
      <category term="Linux部署Redis" scheme="http://www.liuchungui.com/tags/Linux%E9%83%A8%E7%BD%B2Redis/"/>
    
  </entry>
  
  <entry>
    <title>word2vec实践：gensim实现</title>
    <link href="http://www.liuchungui.com/2017/09/04/word2vec%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://www.liuchungui.com/2017/09/04/word2vec初体验/</id>
    <published>2017-09-03T16:05:07.000Z</published>
    <updated>2017-09-11T02:35:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周，有缘接触到word2vec，了解了它的强大，这篇文章就写写它吧！</p>
<p>实现word2vec的方式有很多，我所知道的就有手搓、使用tensorflow和gensim。本篇文章是以<a href="https://github.com/RaRe-Technologies/gensim/blob/develop/docs/notebooks/word2vec.ipynb" target="_blank" rel="external">gensim实现</a>，代码很简单。如果想看tensorflow实现的参考<a href="https://www.tensorflow.org/tutorials/word2vec" target="_blank" rel="external">Vector Representations of Words</a>。</p>
<p>想直接跑代码查看效果，可点击<a href="https://github.com/liuchungui/Word2VecDemo" target="_blank" rel="external">Word2VecDemo</a>下载。</p>
<a id="more"></a>
<p>整篇文章分成四部分：</p>
<ul>
<li>第一步：获得数据，建立语料库</li>
<li>第二步：分词</li>
<li>第三步：训练</li>
<li>第四步：查看效果</li>
</ul>
<h2 id="第一步：获得数据，建立语料库"><a href="#第一步：获得数据，建立语料库" class="headerlink" title="第一步：获得数据，建立语料库"></a>第一步：获得数据，建立语料库</h2><p>本打算下载<a href="https://dumps.wikimedia.org/zhwiki/" target="_blank" rel="external">维基百科中文语料库</a>来跑一下，但由于时间原因，还没试。当前，使用的是我从一个法律网站爬下来30万条数据。爬数据的框架，是使用<a href="https://github.com/scrapy/scrapy" target="_blank" rel="external">scrapy</a>。</p>
<h2 id="第二步：分词"><a href="#第二步：分词" class="headerlink" title="第二步：分词"></a>第二步：分词</h2><p>在之前，我一个同学盼哥跟我说过，他跑过tensorflow中word2vec的例子，需要注意的是英文不需要分词，而中文需要分词。当时没明白过来，但真正看到示例代码的时候，才知道真这样。<br>然后，我就在github中搜到了<a href="https://github.com/fxsjy/jieba" target="_blank" rel="external">jieba</a>，看到<code>9k+ star</code>，分词就用它了。</p>
<p>之后，就从数据库中取出数据，使用<code>jieba</code>分词，存储到<code>./data</code>文件夹中。</p>
<h2 id="第三步：训练"><a href="#第三步：训练" class="headerlink" title="第三步：训练"></a>第三步：训练</h2><p><code>gensim</code>训练特别简单，就是读取<code>./data</code>文件下分好词的文本，然后将其使用空格分割，返回给<code>models.gensim</code>训练：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">#coding: utf-8</div><div class="line">#中文版处理的word2vec</div><div class="line"></div><div class="line">from gensim import models</div><div class="line"># 引入日志配置</div><div class="line">import logging</div><div class="line"></div><div class="line">logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO)</div><div class="line"></div><div class="line">file_path = &quot;./data/case.txt&quot;</div><div class="line"></div><div class="line">class MySentences(object):</div><div class="line">    def __init__(self, file_path):</div><div class="line">        self.file_path = file_path</div><div class="line"></div><div class="line">    def __iter__(self):</div><div class="line">        for line in open(file_path):</div><div class="line">            # split当只有一个的时候,返回单个字符串,多个则返回数组</div><div class="line">            words = line.split(&quot; &quot;)</div><div class="line">            result_word = []</div><div class="line">            for word in words:</div><div class="line">                if word and word != &apos;\n&apos;:</div><div class="line">                    result_word.append(word)</div><div class="line">            yield result_word</div><div class="line"></div><div class="line">sentences = MySentences(file_path)</div><div class="line">model = models.Word2Vec(sentences, workers=20, min_count=5, size=200)</div><div class="line"></div><div class="line"># 保存模型</div><div class="line">model.save(&quot;./cache/zh_word2vec&quot;)</div></pre></td></tr></table></figure>
<p>需要注意的是：</p>
<h4 id="1、models-Word2Vec中的参数："><a href="#1、models-Word2Vec中的参数：" class="headerlink" title="1、models.Word2Vec中的参数："></a>1、models.Word2Vec中的参数：</h4><ul>
<li>sentences: 可以是个二维数组，例如：[[‘今天’, ‘是’, ‘星期天’], [‘明天’, ‘是’, ‘星期一’]]，但一般语料库都比较大，所以都是使用yield方式。</li>
<li>workers: 训练数据的线程数</li>
<li>min_count: 当某个词出现的平率少于这个数，就会被忽视</li>
<li>size: 存储向量的维度，维度越大存储的信息越多，越准确</li>
</ul>
<h4 id="2、保存训练好的模型到-cache-zh-word2vec"><a href="#2、保存训练好的模型到-cache-zh-word2vec" class="headerlink" title="2、保存训练好的模型到./cache/zh_word2vec"></a>2、保存训练好的模型到<code>./cache/zh_word2vec</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">model.save(&quot;./cache/zh_word2vec&quot;)</div></pre></td></tr></table></figure>
<p>后面查看效果的时候，会用到。</p>
<h2 id="第四步，查看效果"><a href="#第四步，查看效果" class="headerlink" title="第四步，查看效果"></a>第四步，查看效果</h2><p>代码实现流程很简单，就是使用<code>models.Word2Vec.load</code>加载训练好的模型，然后使用<code>model</code>模块下的API进行操作。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#coding: utf-8</div><div class="line">#中文版处理的word2vec使用</div><div class="line"></div><div class="line">from gensim import models</div><div class="line"># 引入日志配置</div><div class="line">import logging</div><div class="line"></div><div class="line">logging.basicConfig(format=&apos;%(asctime)s : %(levelname)s : %(message)s&apos;, level=logging.INFO)</div><div class="line"></div><div class="line">model = models.Word2Vec.load(&quot;./cache/zh_word2vec&quot;)</div><div class="line"></div><div class="line">print &apos;\n女人 + 丈夫 - 男人:&apos;</div><div class="line">result = model.most_similar(positive=[&apos;女人&apos;, &apos;丈夫&apos;], negative=[&apos;男人&apos;], topn=1)</div><div class="line">print result[0][0], result[0][1]</div><div class="line"></div><div class="line">print &apos;\n抢夺和抢劫相近程度:&apos;</div><div class="line">print model.similarity(&apos;抢夺&apos;, &apos;抢劫&apos;)</div><div class="line"></div><div class="line">print &quot;\n抢劫的近义词&quot;</div><div class="line">result = model.most_similar([&apos;抢劫&apos;])</div><div class="line">for value in result:</div><div class="line">    print value[0], value[1]</div><div class="line"></div><div class="line">print &apos;\n公司法的近义词:&apos;</div><div class="line">result = model.most_similar([&apos;公司法&apos;])</div><div class="line">for value in result:</div><div class="line">    print value[0], value[1]</div><div class="line"></div><div class="line">print &apos;\n公司法和协议组成的近义词:&apos;</div><div class="line">result = model.most_similar([&apos;公司法&apos;, &apos;协议&apos;])</div><div class="line">for value in result:</div><div class="line">    print value[0], value[1]</div><div class="line"></div><div class="line">print &apos;\n委托书的近义词:&apos;</div><div class="line">result = model.most_similar([&apos;委托书&apos;])</div><div class="line">for value in result:</div><div class="line">    print value[0], value[1]</div><div class="line"></div><div class="line">print &apos;\n投资的近义词:&apos;</div><div class="line">result = model.most_similar([&apos;投资&apos;])</div><div class="line">for value in result:</div><div class="line">    print value[0], value[1]</div><div class="line"></div><div class="line"></div><div class="line">print &quot;\n找出投资、抢劫、强奸、盗窃中,哪个词不是一组的:&quot;</div><div class="line">result = model.doesnt_match([&apos;投资&apos;, &apos;抢劫&apos;, &apos;强奸&apos;, &apos;盗窃&apos;])</div><div class="line">print result</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">女人 + 丈夫 - 男人:</div><div class="line">妻子 0.638504564762</div><div class="line"></div><div class="line">抢夺和抢劫相近程度:</div><div class="line">0.80240327463</div><div class="line"></div><div class="line">抢劫的近义词</div><div class="line">抢夺 0.802403330803</div><div class="line">盗窃 0.800097942352</div><div class="line">作案 0.797169923782</div><div class="line">抢劫犯罪 0.74809718132</div><div class="line">敲诈勒索 0.745306968689</div><div class="line">诈骗 0.706851243973</div><div class="line">行窃 0.706330060959</div><div class="line">强奸 0.685930252075</div><div class="line">共谋 0.683236837387</div><div class="line">飞车 0.653475642204</div><div class="line"></div><div class="line">公司法的近义词:</div><div class="line">继承法 0.759847998619</div><div class="line">行政处罚法 0.738676190376</div><div class="line">土地管理法 0.73749756813</div><div class="line">票据法 0.735802054405</div><div class="line">物权法 0.734579086304</div><div class="line">产品质量法 0.702591955662</div><div class="line">保险法 0.695441961288</div><div class="line">著作权法 0.683708071709</div><div class="line">消防法 0.682392597198</div><div class="line">劳动法 0.670343637466</div><div class="line"></div><div class="line">公司法和协议组成的近义词:</div><div class="line">协议书 0.666539371014</div><div class="line">消防法 0.601478874683</div><div class="line">拍卖法 0.584682762623</div><div class="line">合同 0.582781195641</div><div class="line">继承法 0.573017239571</div><div class="line">公司章程 0.572464048862</div><div class="line">票据法 0.560360312462</div><div class="line">补充协议 0.551261663437</div><div class="line">物权法 0.549430251122</div><div class="line">土地管理法 0.548958778381</div><div class="line"></div><div class="line">委托书的近义词:</div><div class="line">授权书 0.733257114887</div><div class="line">书面材料 0.667756915092</div><div class="line">声明书 0.649828374386</div><div class="line">声明 0.635425388813</div><div class="line">承诺函 0.623859405518</div><div class="line">承诺书 0.614668488503</div><div class="line">担保书 0.598217010498</div><div class="line">确认函 0.597471117973</div><div class="line">便条 0.589580059052</div><div class="line">函件 0.586620807648</div><div class="line"></div><div class="line">投资的近义词:</div><div class="line">出资 0.632706165314</div><div class="line">入股 0.615086615086</div><div class="line">投入 0.525379896164</div><div class="line">利润分配 0.503669142723</div><div class="line">股票 0.50173163414</div><div class="line">资金 0.495302915573</div><div class="line">回报 0.493470430374</div><div class="line">开发 0.492733627558</div><div class="line">增资 0.49268245697</div><div class="line">顾问 0.490810781717</div><div class="line"></div><div class="line">找出投资、抢劫、强奸、盗窃中,哪个词不是一组的:</div><div class="line">投资</div></pre></td></tr></table></figure>
<p>可以看出来，整个模型已经有点效果出来了。若是，整个语料库再扩大十倍，应该会更准确很多。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>gensim实现的word2vec，使用特别简单，效果也很不错。不过，后期打算深入了解原理，然后使用tensorflow的方式进行训练，看效果能否更好。</p>
<p>本来，打算再写一篇doc2vec的，不过，因为至今未看到很大的效果，所以留待以后吧。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/RaRe-Technologies/gensim/blob/develop/docs/notebooks/word2vec.ipynb" target="_blank" rel="external">Simple word2vec tutorial</a></p>
<p><a href="https://radimrehurek.com/gensim/tutorial.html" target="_blank" rel="external">Quick Example</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周，有缘接触到word2vec，了解了它的强大，这篇文章就写写它吧！&lt;/p&gt;
&lt;p&gt;实现word2vec的方式有很多，我所知道的就有手搓、使用tensorflow和gensim。本篇文章是以&lt;a href=&quot;https://github.com/RaRe-Technologies/gensim/blob/develop/docs/notebooks/word2vec.ipynb&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gensim实现&lt;/a&gt;，代码很简单。如果想看tensorflow实现的参考&lt;a href=&quot;https://www.tensorflow.org/tutorials/word2vec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vector Representations of Words&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;想直接跑代码查看效果，可点击&lt;a href=&quot;https://github.com/liuchungui/Word2VecDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Word2VecDemo&lt;/a&gt;下载。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.liuchungui.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://www.liuchungui.com/tags/python/"/>
    
      <category term="word2vec" scheme="http://www.liuchungui.com/tags/word2vec/"/>
    
      <category term="word2vec实践" scheme="http://www.liuchungui.com/tags/word2vec%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="word2vec中文实践" scheme="http://www.liuchungui.com/tags/word2vec%E4%B8%AD%E6%96%87%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="gensim" scheme="http://www.liuchungui.com/tags/gensim/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter notebook安装使用</title>
    <link href="http://www.liuchungui.com/2017/09/03/Jupyter-notebook%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.liuchungui.com/2017/09/03/Jupyter-notebook安装使用/</id>
    <published>2017-09-03T14:17:56.000Z</published>
    <updated>2017-09-03T14:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jupyter notebook 是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。<br><a id="more"></a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里使用的是Anaconda的方式安装<code>jupyter notebook</code>，不熟悉Anaconda可以看下<a href="http://www.liuchungui.com/2017/09/03/Anaconda%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/">Anaconda安装使用笔记</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ conda install jupyter notebook</div><div class="line"></div><div class="line"># 开启web服务，会自动在浏览器中打开，也可以输入localhost:8888查看</div><div class="line">$ jupyter notebook</div></pre></td></tr></table></figure>
<h2 id="操作单元格"><a href="#操作单元格" class="headerlink" title="操作单元格"></a>操作单元格</h2><h4 id="1、执行单元格"><a href="#1、执行单元格" class="headerlink" title="1、执行单元格"></a>1、执行单元格</h4><ul>
<li><code>shift+Enter</code>: 执行单元格代码，并跳到下一步</li>
<li><code>control+Enter</code>: 执行单元格代码，但仍停留当前选中的单元格</li>
</ul>
<p><strong>注意：</strong> 这两个执行方法，只会显示最后的结果值。若是要打印，请使用<code>print</code>。</p>
<h4 id="2、代码补全"><a href="#2、代码补全" class="headerlink" title="2、代码补全"></a>2、代码补全</h4><p>和其它IDE一样，使用<code>Tab</code>键进行代码补全。</p>
<h4 id="3、查看系统中方法的说明"><a href="#3、查看系统中方法的说明" class="headerlink" title="3、查看系统中方法的说明"></a>3、查看系统中方法的说明</h4><ul>
<li><code>shift+Tab</code>: 查看库、方法等简要的说明信息</li>
<li><code>shift+Tab两次</code>：查看更详细的说明信息</li>
</ul>
<h2 id="键盘快捷键（操作不区分大小写）"><a href="#键盘快捷键（操作不区分大小写）" class="headerlink" title="键盘快捷键（操作不区分大小写）"></a>键盘快捷键（操作不区分大小写）</h2><p>1、通过<code>Esc</code>切换到命令行模式，<code>Enter</code>或<code>Return</code>切换到编辑模式命令行模式。当选中单元格时，命令行模式，右边是<code>蓝线</code>；编辑模式，右边是<code>绿色线</code>，并且有光标在选中单元格闪动。</p>
<p>2、创建单元格（命令行模式）</p>
<ul>
<li><code>A</code>: 在单元格上面创建单元格</li>
<li><code>B</code>: 在单元格下面创建单元格</li>
</ul>
<p>3、代码与markdown相互切换：</p>
<ul>
<li><code>M</code>: 切换到markdown</li>
<li><code>Y</code>: 切换到代码</li>
</ul>
<p>4、显示行号</p>
<ul>
<li><code>L</code>: 显示或隐藏行号</li>
</ul>
<p>5、删除单元格，连续两次按<code>D</code>，和vim一样</p>
<p>6、保存笔记本<br>按<code>S</code>保存</p>
<p>7、搜索没有快捷键命令</p>
<p><code>P</code>: 搜索，然后选中对应命令操作</p>
<h2 id="Magic关键字"><a href="#Magic关键字" class="headerlink" title="Magic关键字"></a>Magic关键字</h2><p>Magic关键字是可以在单元格中运行的特殊命令，能让你控制notebook本身或执行系统调用（例如更改目录）。</p>
<p><strong>注意：</strong></p>
<ul>
<li>一个百分号（%）：对应行的Magic命令</li>
<li>两个百分号（%%）：对应整个单元格的Magic命令（也就是对应多行）</li>
</ul>
<p>用途：</p>
<h4 id="1、代码计时，使用-timeit"><a href="#1、代码计时，使用-timeit" class="headerlink" title="1、代码计时，使用%timeit"></a>1、代码计时，使用<code>%timeit</code></h4><p>代码示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">%timeit fibo1(20)</div><div class="line">%%timeit </div><div class="line">fibo1(30)</div><div class="line">fibo2(30)</div></pre></td></tr></table></figure>
<h4 id="2、在notebook中嵌入可视化内容，使用-matlotlib"><a href="#2、在notebook中嵌入可视化内容，使用-matlotlib" class="headerlink" title="2、在notebook中嵌入可视化内容，使用%matlotlib"></a>2、在notebook中嵌入可视化内容，使用<code>%matlotlib</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div><div class="line">%config InlineBackend.figure_format = &apos;retina&apos;</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line">x = np.linspace(0, 1, 300)</div><div class="line">for w in range(2, 6, 2):</div><div class="line">    plt.plot(x, np.sin(np.pi*x)*np.sin(2*w*np.pi*x))</div></pre></td></tr></table></figure>
<h4 id="3、在notebook中进行调试，使用-pdf"><a href="#3、在notebook中进行调试，使用-pdf" class="headerlink" title="3、在notebook中进行调试，使用%pdf"></a>3、在notebook中进行调试，使用<code>%pdf</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%pdb</div><div class="line">numbers = &apos;hello&apos;</div><div class="line">sum(numbers)</div></pre></td></tr></table></figure>
<h2 id="导出文件"><a href="#导出文件" class="headerlink" title="导出文件"></a>导出文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 导出html</div><div class="line">jupyter nbconvert --to html notebook.ipynb</div><div class="line"># 导出markdown</div><div class="line">jupyter nbconvert --to markdown notebook.ipynb</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jupyter notebook 是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.liuchungui.com/categories/Python/"/>
    
    
      <category term="Anaconda" scheme="http://www.liuchungui.com/tags/Anaconda/"/>
    
      <category term="conda" scheme="http://www.liuchungui.com/tags/conda/"/>
    
      <category term="python" scheme="http://www.liuchungui.com/tags/python/"/>
    
      <category term="Jupyter notebook" scheme="http://www.liuchungui.com/tags/Jupyter-notebook/"/>
    
      <category term="Jupyter" scheme="http://www.liuchungui.com/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda安装使用笔记</title>
    <link href="http://www.liuchungui.com/2017/09/03/Anaconda%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.liuchungui.com/2017/09/03/Anaconda安装使用/</id>
    <published>2017-09-03T13:32:07.000Z</published>
    <updated>2017-09-03T13:44:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.anaconda.com" target="_blank" rel="external">Anaconda</a>实际上是一个软件发行版，它附带了conda、Python和150多个科学包及其依赖项。其中，conda是一个开源的软件包管理系统和环境管理系统，和<a href="https://github.com/pypa/virtualenv" target="_blank" rel="external">virtualenv</a>功能差不多，可以在电脑上同时安装Python2和Python3。</p>
<a id="more"></a>
<h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>试了下，不能使用pip安装，需要到<a href="https://www.anaconda.com/download/" target="_blank" rel="external">官网下载</a>，然后安装。</p>
<h2 id="conda使用"><a href="#conda使用" class="headerlink" title="conda使用"></a>conda使用</h2><h4 id="通过conda管理包"><a href="#通过conda管理包" class="headerlink" title="通过conda管理包"></a>通过conda管理包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 安装pandas</div><div class="line">$ conda install pandas</div><div class="line"># 更新pandas</div><div class="line">$ conda update pandas</div><div class="line"># 删除pandas</div><div class="line">$ conda remove pandas</div><div class="line"># 搜索</div><div class="line">$ conda search pandas</div></pre></td></tr></table></figure>
<h4 id="管理环境："><a href="#管理环境：" class="headerlink" title="管理环境："></a>管理环境：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 创建py2的python2环境，自带pandas和numpy</div><div class="line">$ conda create -n py2 python=2 pandas numpy</div><div class="line"># 激活py2环境，通过python -V可以看到是python2.7</div><div class="line">$ source activate py2</div><div class="line"># 退出py2环境</div><div class="line">$ source deactivate</div><div class="line"># 创建py3的Python3环境</div><div class="line">$ conda create -n py3 python=3 pandas numpy</div><div class="line"># 激活py3环境</div><div class="line">$ source activate py3</div><div class="line"># py3环境中安装相关包</div><div class="line">$ conda install pandas</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>在py3中安装的包，在py2中是看不到的，py2与py3的环境完全是隔离的。</p>
<h4 id="保存、加载、删除环境"><a href="#保存、加载、删除环境" class="headerlink" title="保存、加载、删除环境"></a>保存、加载、删除环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 将当前环境导出到environment.yaml</div><div class="line">$ conda env export &gt; environment.yaml</div><div class="line"># 通过environment创建环境，这样可以通过导出环境然后给别人备份你一样的环境</div><div class="line">$ conda env create -f environment.yaml</div><div class="line"># 删除环境</div><div class="line">$ conda env remove -n env_name</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.jianshu.com/p/d592527c5903" target="_blank" rel="external">Anaconda简易使用教程
</a></p>
<p><a href="https://baike.baidu.com/item/Conda/4500060?fr=aladdin" target="_blank" rel="external">Conda</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.anaconda.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Anaconda&lt;/a&gt;实际上是一个软件发行版，它附带了conda、Python和150多个科学包及其依赖项。其中，conda是一个开源的软件包管理系统和环境管理系统，和&lt;a href=&quot;https://github.com/pypa/virtualenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;virtualenv&lt;/a&gt;功能差不多，可以在电脑上同时安装Python2和Python3。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.liuchungui.com/categories/Python/"/>
    
    
      <category term="Anaconda" scheme="http://www.liuchungui.com/tags/Anaconda/"/>
    
      <category term="conda" scheme="http://www.liuchungui.com/tags/conda/"/>
    
      <category term="python" scheme="http://www.liuchungui.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2016年的个人总结</title>
    <link href="http://www.liuchungui.com/2017/01/02/2016%E5%B9%B4%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <id>http://www.liuchungui.com/2017/01/02/2016年的个人总结/</id>
    <published>2017-01-01T16:51:22.000Z</published>
    <updated>2017-01-01T17:53:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2016年晚上9点，拖了大半天，终于打开电脑开始写一下今年的总结。总结主要分成两个部分，对2016年计划完成部分的总结和自己成长变化的记录，还有就是2017年的计划。</p>
<p>2016年3月份，我所在的公司因为运营不佳，然后我们这一帮小伙伴被迫从公司集体离职了，很是突然，也反映了创业的艰辛。<br>离职之后，我并没有什么沮丧，而是在家里面积极准备学习，打算这一次去BAT试试。在这两周里面，我的状态很好，热情很高，将iOS高级编程那本书从头看一遍，对GCD、ARC、Block、NSOperation又有了更深刻的认识，同时也对Runtime重新学习了一遍。</p>
<p>不过，在面试之前，我的同学让我去他公司，然后把我说服了，我就去了他的公司。</p>
<p>不过，在入职之后，我接到了阿里的面试，然后去了面试，当然结果怎么样，我都没打算去的。面试的是阿里文学，在五道口。面试的过程，是一个年龄比我大的哥们，他问了我一些以前做过的东西，然后又问了一些技术我会不会，基本模式就是：你会xxx么？我答：会（或者不会）。感觉整个过程，两个人找不到一个点，深入讨论，达到共鸣。最后，当然是没戏了。（汗！一轮都没过？）整个面试过程中，我印象很深刻的是，第一是Runtime、Runloop、GCD、NSOperation这些主流的内容咋都没问？或者是不是我应该引导面试官去问？第二是其中面试官问了Pop用过没？Core Graphics用过没？我当时一下没反应过来，说没用过。面试回来之后，后来才知道Core Graphics是个什么，这我不是经常用的么？怎么当时对这个名词一点印象都没有。然后又一想，我如果是面试官，这个东西都不知道，鬼才让他过呢。</p>
<p>好吧，面试咱们就说到这里，下面继续。</p>
<p>进入了新的公司之后，我第一个事情就是一个月开发安卓版的两个app（iOS的时候，已经外包给我们做了）。当然，我不是用原生开发，而是用ReactNative来进行开发，这个我前面陆陆续续学了两个月左右。汗，当时我对ReactNative是没有真正用在项目里面过的，只是在学习过程中，感觉自己基本的东西都会了，做个项目也是不成问题。</p>
<p>真正做的时候，才发现，原来的想法是多么美好的。首先就是我对安卓不是很了解，对其中的一些配置都不太会。例如对当前开发项目添加依赖的Module，琢磨了半天都没搞出来，后来还是通过问朱冬和网上查资料才搞定的，一个小小的问题，将我挡在门外一两天。后来，又陆续碰到一些问题，好在有以前的前同事的帮助，都磕磕碰碰迈过去了，这里很感谢朱冬和豹，多谢他们的帮助才迈过去的。</p>
<p>这里就说下ReactNative开发的感受吧，它开发调试起来特别快，比原生iOS开发快很多。但是，它也有一个致命的问题，那就是很多原生组件都没有。其中，我就专门开发了一个友盟的推送<a href="https://github.com/liuchungui/react-native-umeng-push" target="_blank" rel="external">react-native-umeng-push</a>，用来实现我们的推送。但，若是一个纯前端人员，他们怎么办？自己学？等着别人开发出来？当然，这个致命问题，随着时间推移，原生组件越来越多，就会好很多。</p>
<p>开发完app之后，测试之后，然后上线。</p>
<p>上线之后，我就没事干了？当然不是，我开始了另一项任务。</p>
<p>我来公司的第二个事情就是将公司接口框架整一下。当时和小伙伴讨论一两周，最后确定了接口的框架，然后由我来实现。这里说一下，我们公司的接口框架是php语言的<a href="https://github.com/bcit-ci/CodeIgniter" target="_blank" rel="external">CI</a>+<a href="https://github.com/chriskacerguis/codeigniter-restserver" target="_blank" rel="external">codeigniter-restserver</a>。我主要做了下面一些事情，一是将接口建立了开发环境和生产环境，将它们的配置完全分开，用一个配置来进行控制；二是实现了一个数据转换类，让以前一大堆switch解放出来，使开发接口变的简单；三是封装数据库类，使操作数据库更方便；四是封装一些公共方法、整合第三方库，例如统一的数据返回方法、参数检查方法、数组操作、短信发送等。</p>
<p>当然，在后期开发过程中，我陆续完善了一些东西，可以说这个框架也是经过了几个版本，现在算是稳定了。当然，使用过程，现在还存在一些问题，后期要是有时间，还需要改善。</p>
<p>我来公司的第三个事情就是微信公众号开发，当时公司申请了一个服务号，需要做一个深水炸弹的项目。然后我研究了大概一周的时间，将微信公众号中我们需要的功能实现了一遍，做了一个demo出来。后来，在这个demo的基础上，我们实现了整个项目。当然，整个实现逻辑是我来做的，接口也是我做得，前端是前端的小伙伴实现的。当然，其实我也算是参与了前端开发，因为我在前端的代码中添加了微信分享的代码，共同调试了微信登录的流程。后来，前端小伙伴离职了，我重新开发了第二版本，这个版本主要是前端界面的开发。</p>
<p>我来公司做的第四件事情就是前端开发，当时缺乏开发人员，我和同学一个去开发接口，另外一个开发前端，然后让我选择，然后我选择了前端，刚好需要学习，2016年的计划就有这里面一个。然后，开始从Angular官网的教程开始学习，看代码，还有就是看看《用AngularJS开发下一代Web应用》，大概一周的样子吧，然后开始参与项目，开始做了起来。前期做的时候，对Angular了解稍微多点，写一些JS逻辑代码是没有问题的，但是对html、css却是了解甚少，还不太会写页面。好在有些页面都很类似，然后将前面同事的代码搞过来，边改边学边写，这样进行起来。后来，陆陆续续真正的知道前端怎么开发，知道了标签的使用，知道如何使用bootstrap，知道了CSS的使用，现在写一些基本的页面已经没什么问题了，没有以前看到一个页面完全不会下手的窘迫。当然，这个过程中，Angular的官方文档没少看，ui-router中的官方文档也没少看。很值得一提的是，最近，鉴于我们开发中一些存在的一些问题，我研究了webpack，然后引入了webpack。还需要提的是，现在开发处于快速迭代的过程中，短短三个月时间，我们已经迭代了6个版本了，每1到2周一个版本。</p>
<p>所以，2016年在新的公司共做了四个事情：</p>
<ul>
<li>app开发</li>
<li>前端接口框架搭建和开发</li>
<li>微信公众号开发</li>
<li>前端网站开发</li>
</ul>
<p>聊了在公司做了的事情，再聊聊我们团队吧。我们团队都很年轻，很有激情很有干劲，整个氛围都很好。每周，我们都有分享会，当然不仅仅局限于技术。每周，我们都有写周报，对上周工作做的好、不好的地方、需要改进的地方以及需要帮助地方总结，起初我是非常拒绝的，感受特别不好的，但是做着做着，我发现我喜欢上了，每周回顾下上周所做的工作啊，反思一下上周哪些地方做的不好，然后需要怎么改进，当然最喜欢的就是强行找一个优点来称赞自己，让自己信心十足，哈哈。除了我们团队，有个人必须的提一下，就是我们的“鼓励师”，她的加班精神真是没得说（一周休息个半天吧），让我很佩服，借用一句话，沉迷挣钱无法自拔。</p>
<p>除了工作中的事情，稍微说下生活中的事情吧。</p>
<p>六七月份的时候，大家各自奔波，大彭离开了北京，回了湖南；刘应去了东北出差等。然后，我们本来租了个五居室就这样解散了，我们搬入了北土城一个老的房子中。老房子问题多，厕所漏水、下水道堵住、电路有问题，以前住的新房子从来没有这种问题。不过，搬家了，离公司比较近，女朋友也离公司比较近，所以总体上还不错，女朋友再也不用起那么早了，那么累了。</p>
<p>除了这些，2016年经同学介绍，我下载了“得到”app，订阅了李笑来老师的《通往财富自由之路》和刘润老师的《5分钟商学院》，里面学习到了很多知识，知道了一些很有用的概念，不过因为自己践行的很少，所以学习到的知识不及里面百分之一。</p>
<p>在去年写年度总结时，我的年计划如下：</p>
<ol>
<li>2016年要学习一门新的技术，暂时选定的是H5。</li>
<li>github上好好维护自己的项目，做出一个有点名气的项目来。</li>
<li>做一个自己的网站和App，越炫酷越好。</li>
<li>好好维护自己的博客，每个月至少一篇博客。</li>
<li>带着女朋友好好去旅游一次</li>
</ol>
<p>其中，学习一门新的技术，算是完成了；github我维护了<code>react-native-umeng-push</code>算是勉强完成；做一个给别人用的网站和App，但是不够酷炫，也完全不是自己心目中的，所以算是没完成；至于博客方面，勉勉强强完成；带女朋友去旅游，这个在2016年端午节，我们去了内蒙古。所以，总体上，5个完成了4个，还需要加油。</p>
<p>学着百度一样，我也评选了一下我的年度缺点和优点：</p>
<ul>
<li>2016年，我的年度缺点： 拖沓。</li>
<li>2016年，我的年度优点：不断学习新技术。</li>
</ul>
<p>而我的2017年的指挥官命令：<strong>夯实基础</strong></p>
<p>内容具体包括以下：</p>
<ol>
<li>重学数据结构和算法，将算法达到刷bat面试题毫无压力的水平</li>
<li>重学操作系统，对整个系统原理有清晰的了解，能达到做一些大学试卷无压力水准</li>
<li>学习设计模式，对iOS中的常用设计模式，都能灵活运用，知道分析它们之间适应的场景以及某个场景下的优劣</li>
<li>选一个著名的（10000star以上)的框架学习，并且成为其中的主要开发者之一。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2016年晚上9点，拖了大半天，终于打开电脑开始写一下今年的总结。总结主要分成两个部分，对2016年计划完成部分的总结和自己成长变化的记录，还有就是2017年的计划。&lt;/p&gt;
&lt;p&gt;2016年3月份，我所在的公司因为运营不佳，然后我们这一帮小伙伴被迫从公司集体离职了，
    
    </summary>
    
      <category term="年度总结" scheme="http://www.liuchungui.com/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年度总结" scheme="http://www.liuchungui.com/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>webpack开发和生产环境的建立</title>
    <link href="http://www.liuchungui.com/2016/12/18/webpack%E5%BC%80%E5%8F%91%E5%92%8C%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E7%9A%84%E5%BB%BA%E7%AB%8B/"/>
    <id>http://www.liuchungui.com/2016/12/18/webpack开发和生产环境的建立/</id>
    <published>2016-12-18T08:38:48.000Z</published>
    <updated>2016-12-18T09:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：刚接手我们前端这个项目时，项目内部定义两个变量服务器地址和七牛的地址，每次上线，都需要手动去切换这两个地址到生产环境，很不方便。后来，又引入了第三个全局变量，这个时候我就改进了下，专门定义一个环境变量来控制这三个变量的值，这样稍微好了些，但是每次上线还是需要手动去切换，需要非常小心。使用webpack建立开发和生产环境，我们就可以一句命令上线，不用再过多担心。</p>
<p>今天，我们来谈谈在webpack中建立开发和生产环境，下面是我在实践过程中的一些总结，希望给大家能带来一些帮助。</p>
<h2 id="1、定义npm-scripts的开发和生产命令，自动打包上线"><a href="#1、定义npm-scripts的开发和生产命令，自动打包上线" class="headerlink" title="1、定义npm scripts的开发和生产命令，自动打包上线"></a>1、定义npm scripts的开发和生产命令，自动打包上线</h2><p>因为webpack的开发和生产命令不同、参数复杂原因，又因为npm scripts定义命令的简便和钩子功能，所以使用npm定义简单统一的命令成为我们的需要（不了解npm scripts的同学可以先看阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="external">npm scripts 使用指南</a>）。</p>
<p>如下是我在项目用到的一部分命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	// ...</div><div class="line">   &quot;scripts&quot;: &#123;</div><div class="line"></div><div class="line">    &quot;dev&quot;: &quot;env ENV_MODE=dev webpack-dev-server --hot --inline --progress --colors&quot;,</div><div class="line">    </div><div class="line">    &quot;predeploy&quot;: &quot;echo &apos;******开始构建生产环境的代码*********&apos;&quot;,</div><div class="line">    &quot;deploy&quot;: &quot;rm -rf dist &amp;&amp; ENV_MODE=production webpack --progress --colors --bail --profile&quot;,</div><div class="line">    &quot;postdeploy&quot;: &quot;echo &apos;******构建成功,开始发布内容*****&apos; &amp;&amp; chmod +x publish.sh &amp;&amp; ./publish.sh build-master&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义好上面内容后：</p>
<h4 id="我们在开发时，只需要运行："><a href="#我们在开发时，只需要运行：" class="headerlink" title="我们在开发时，只需要运行："></a>我们在开发时，只需要运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure>
<p>就相当于运行了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">env ENV_MODE=dev webpack-dev-server --hot --inline --progress --colors</div></pre></td></tr></table></figure>
<p>注：上面这句命令，设置了一个指定的环境变量去执行webpack-dev-server命令，后面我们可以在<code>webpack.config.js</code>中通过<code>process.env.ENV_MODE</code>获取它的值。</p>
<h4 id="我们需要打包发布上线时，只需要运行："><a href="#我们需要打包发布上线时，只需要运行：" class="headerlink" title="我们需要打包发布上线时，只需要运行："></a>我们需要打包发布上线时，只需要运行：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run deploy</div></pre></td></tr></table></figure>
<p>它就会首先执行<code>pre-deploy</code>中的命令，输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">******开始构建生产环境的代码*********</div></pre></td></tr></table></figure>
<p>然后，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf dist &amp;&amp; ENV_MODE=production webpack --progress --colors --bail --profile</div></pre></td></tr></table></figure>
<p>开始打包代码到<code>dist</code>目录下。</p>
<p>最后，打包完成之后，它会执行<code>post-deploy</code>中的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &apos;******构建成功,开始发布内容*****&apos; &amp;&amp; chmod +x publish.sh &amp;&amp; ./publish.sh build-master</div></pre></td></tr></table></figure>
<p>首先输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">******构建成功,开始发布内容*****</div></pre></td></tr></table></figure>
<p>之后，给当前目录下的<code>publish.sh</code>脚本添加执行权限，并传递<code>build-master</code>给<code>publish.sh</code>执行。</p>
<p><code>publish.sh</code>的作用是发布上线，它做的事情主要是将<code>dist</code>中打包好的代码强制发布到对应的分支下，然后服务器利用git的<code>post-receive</code>钩子自动同步代码到对应目录下，这样就达到了发布上线。</p>
<p>脚本代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env bash</div><div class="line"></div><div class="line">cd dist</div><div class="line">echo $1</div><div class="line"></div><div class="line">#构建代码不能放入打包的代码中</div><div class="line">if [ x&quot;$1&quot; == x&quot;&quot; -o &quot;$1&quot; == &quot;dev&quot; -o &quot;$1&quot; == &quot;master&quot; -o &quot;$1&quot; == &quot;test&quot; -o &quot;$1&quot; == &quot;simulate&quot; ]; then</div><div class="line">    echo &quot;代码分支,不要构建&quot;</div><div class="line">    exit -1</div><div class="line">fi</div><div class="line"></div><div class="line">echo &quot;##### clean git&quot;</div><div class="line">rm -rf .git</div><div class="line"></div><div class="line">echo &quot;##### 初始化git&quot;</div><div class="line">git init</div><div class="line">git add .</div><div class="line">git commit -m &quot;update at `date` &quot;</div><div class="line">git remote add origin git@github.com:liuchungui/AngularWebpack.git &gt;&gt; /dev/null 2&gt;&amp;1</div><div class="line"></div><div class="line">echo &quot;##### push到$1分支&quot;</div><div class="line">git branch $1</div><div class="line">git checkout $1</div><div class="line">git push origin $1 -f</div><div class="line"></div><div class="line">echo &quot;##### $1 发布完成&quot;</div></pre></td></tr></table></figure>
<p>建了一个demo，大家可以下载下来看看<a href="https://github.com/liuchungui/AngularWebpack/tree/master" target="_blank" rel="external">AngularWebpack</a>，内部的<code>git@github.com:liuchungui/AngularWebpack.git</code>可以替换为你的git仓库地址。</p>
<h2 id="2、定义ENV-MODE变量，配置环境"><a href="#2、定义ENV-MODE变量，配置环境" class="headerlink" title="2、定义ENV_MODE变量，配置环境"></a>2、定义ENV_MODE变量，配置环境</h2><p>上面的脚本执行，会定义一个环境变量<code>ENV_MODE</code>，而我们可以在<code>webpack.config.js</code>文件中获取它的值，然后通过<code>DefinePlugin</code>插件配置到我们项目中使用，从而达到自动配置开发或生产环境，不需要我们手动设置。</p>
<p>如何配置呢？代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">module.exports = function makeWebpackConfig() &#123;</div><div class="line">    /**</div><div class="line">     * 创建配置对象</div><div class="line">     */</div><div class="line">    var config = &#123;&#125;;</div><div class="line">    // ... 省略其它代码</div><div class="line">    config.plugins = [];</div><div class="line">    config.plugins.push(</div><div class="line">        //配置环境变量</div><div class="line">        new webpack.DefinePlugin(&#123;</div><div class="line">            ENV_MODE: JSON.stringify(process.env.ENV_MODE),</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">    return config;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p><strong>注意:</strong>  JSON.stringfy一定不能省略，<code>DefinePlugin</code>插件的作用是将打包的变量<code>ENV_MODE</code>替换成我们传递给它的值。</p>
<p>这样，我们就可以在代码中像下面这样获取服务器地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// common.js文件</div><div class="line">function serverBaseURL() &#123;</div><div class="line">    switch (ENV_MODE) &#123;</div><div class="line">        case &quot;dev&quot;: return &quot;http://localhost/api/&quot;;</div><div class="line">        case &quot;production&quot;: return &quot;http://api.xxx.com/&quot;;</div><div class="line">        default: return &quot;http://localhost/api/&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports = serverBaseURL();</div></pre></td></tr></table></figure>
<p>当然，你也可以直接使用<code>DefinePlugin</code>定义<code>ServerBaseURL</code>的值。</p>
<h2 id="3、只有开发或生产环境应该使用的插件"><a href="#3、只有开发或生产环境应该使用的插件" class="headerlink" title="3、只有开发或生产环境应该使用的插件"></a>3、只有开发或生产环境应该使用的插件</h2><p>这里并不是说只有某个环境才能使用，只是强烈建议在某个环境下使用。如代码压缩我们应该只在生产环境下使用，开发环境下使用会影响开发效率，下面是我的一些配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//生产环境下独有的插件</div><div class="line">if (isProd) &#123;</div><div class="line">    config.plugins.push(</div><div class="line">      new webpack.NoErrorsPlugin(),</div><div class="line">      new webpack.optimize.DedupePlugin(),</div><div class="line">      new webpack.optimize.UglifyJsPlugin(),</div><div class="line">      new CopyWebpackPlugin([</div><div class="line">                &#123;</div><div class="line">                    from: __dirname + &apos;/gw/images&apos;,</div><div class="line">                    to: __dirname + &apos;/dist/gw/images&apos;</div><div class="line">                &#125;</div><div class="line">     ])</div><div class="line"> &#125;</div><div class="line"> //开发环境下使用的插件</div><div class="line"> else &#123;</div><div class="line">        // config.plugins.push(</div><div class="line">        //     new WebpackBrowserPlugin()</div><div class="line">        // );</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要说了我们应该定义开发和生产环境的命令，方便我们使用；之后，说了通过<code>DefinePlugin</code>插件定义开发和生产环境的变量；最后，列出了一些应该在生产环境中使用的插件。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/preboot/angular-webpack" target="_blank" rel="external">angular-webpack</a></p>
<p><a href="https://segmentfault.com/a/1190000006952432" target="_blank" rel="external">webpack多页应用架构系列（七）：开发环境、生产环境傻傻分不清楚？</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="external">npm scripts 使用指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：刚接手我们前端这个项目时，项目内部定义两个变量服务器地址和七牛的地址，每次上线，都需要手动去切换这两个地址到生产环境，很不方便。后来，又引入了第三个全局变量，这个时候我就改进了下，专门定义一个环境变量来控制这三个变量的值，这样稍微好了些，但是每次上线还是需要手动去切换
    
    </summary>
    
      <category term="Angular" scheme="http://www.liuchungui.com/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://www.liuchungui.com/tags/Angular/"/>
    
      <category term="webpack" scheme="http://www.liuchungui.com/tags/webpack/"/>
    
      <category term="webpack开发和生产环境" scheme="http://www.liuchungui.com/tags/webpack%E5%BC%80%E5%8F%91%E5%92%8C%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
  <entry>
    <title>Angular中使用webpack基础篇</title>
    <link href="http://www.liuchungui.com/2016/12/05/Angular%E4%B8%AD%E4%BD%BF%E7%94%A8webpack%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://www.liuchungui.com/2016/12/05/Angular中使用webpack基础篇/</id>
    <published>2016-12-04T17:45:09.000Z</published>
    <updated>2016-12-18T08:41:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，在开发公司项目的时候，由于组件太多，发出请求太多，导致网站速度太慢，所以我们就有一种强烈的需求，那就是对开发的js进行打包。在对比了各种打包工具之后，最后我们选定了webpack。所以，在这一周除了研究了下如何跨域请求，最主要的时间都去研究webpack去了，虽然没有达到理想中的状态，但是基本的需求应该算是满足了，现在分享出来。</p>
<p>我们今天分享的是webpack在Angular中的应用，至于webpack的入门教程，我推荐官方的<a href="http://webpack.github.io/docs/tutorials/getting-started/" target="_blank" rel="external">getting-started</a>，英文都比较简单，阅读不会有很大障碍。</p>
<p>在正文之前，我先说下，我要分享的内容有：</p>
<ul>
<li>webpack在Angular中使用</li>
<li>建立开发环境与生产环境</li>
<li>优化打包性能，将第三方库与开发的代码分离</li>
<li>对代码进行压缩</li>
<li>一些第三方框架的集成</li>
<li>webpack解决缓存问题，上线后自动使用最新的js文件</li>
</ul>
<p>不过，由于时间关系，暂时先分享<code>webpack在Angular中使用</code>的内容，后续补上两篇应该差不多了。</p>
<p>在分享使用<code>webpack</code>时，我们以<a href="https://github.com/liuchungui/angularWebpackDemo" target="_blank" rel="external">angularWebpackDemo</a>来作为例子演示。</p>
<h3 id="首先，克隆demo项目，并安装依赖"><a href="#首先，克隆demo项目，并安装依赖" class="headerlink" title="首先，克隆demo项目，并安装依赖"></a>首先，克隆demo项目，并安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/liuchungui/angularWebpackDemo.git</div><div class="line">cd angularWebpackDemo</div><div class="line">git checkout -f step0</div><div class="line">npm install</div></pre></td></tr></table></figure>
<h3 id="然后，编写webpack配置文件"><a href="#然后，编写webpack配置文件" class="headerlink" title="然后，编写webpack配置文件"></a>然后，编写webpack配置文件</h3><p>创建webpack.config.js文件，并且编写如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">const webpack = require(&quot;webpack&quot;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    //入口文件</div><div class="line">    entry: &quot;./demoApp.js&quot;,</div><div class="line">    //生成的文件配置</div><div class="line">    output: &#123;</div><div class="line">        //生成文件的路径,__dirname是当前项目路径,与webpack.config.js同级</div><div class="line">        path: __dirname,</div><div class="line">        //文件名</div><div class="line">        filename: &quot;bundle.js&quot;</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        //将css文件打包进去</div><div class="line">        loaders: [</div><div class="line">            &#123; test: /\.css$/, loader: &quot;style!css&quot; &#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        /**</div><div class="line">         * 此插件会自动加载jquery,解决jquery无法引用的问题</div><div class="line">         */</div><div class="line">        new webpack.ProvidePlugin(&#123;</div><div class="line">            $: &quot;jquery&quot;,</div><div class="line">            jQuery: &quot;jquery&quot;</div><div class="line">        &#125;)</div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面用到的配置选项大概说一下：</p>
<ul>
<li>entry：入口文件，可以传字符串，那说明入口文件只有一个；也可以传数组或对象，指定多个入口文件</li>
<li>output: 生成打包文件的配置，可以指定path（路径），当有多个入口文件时，还可以使用[name]、[hash]、[chunkhash]等值，来对应替换为入口的文件的配置，详情请参考<a href="http://webpack.github.io/docs/configuration.html#output" target="_blank" rel="external">webpack ouput</a>。</li>
<li>loaders: 它可以转换项目中的资源文件，例如，上面就是css样式文件转换为style标签插入到html当中，更多内容参考<a href="http://webpack.github.io/docs/using-loaders.html" target="_blank" rel="external">WHAT ARE LOADERS?</a></li>
<li>plugins: 插件，它可以干很多很多的事情，非常强大，官方提供了很多插件，第三方也可以写插件。上面的<code>ProvidePlugin</code>插件的作用是自动加载jquery模块，也就是说将jquery变成了全局的模块，当然我们需要在index.html中使用script标签导入。</li>
</ul>
<h3 id="随后，导入使用"><a href="#随后，导入使用" class="headerlink" title="随后，导入使用"></a>随后，导入使用</h3><p>首先，我们在<code>index.html</code>中导入<code>bundle.js</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>然后，我们不需要在index.html中导入js文件了，只需要使用<code>require</code>导入模块就行，webpack会自己解决它们之间的依赖。例如，我们在demo项目中的demoApp.js中导入<code>angular</code>和<code>bootstrap</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">require(&quot;angular&quot;);</div><div class="line">require(&quot;bootstrap&quot;);</div><div class="line"></div><div class="line">var demoApp = angular.module(&apos;demoApp&apos;, []);</div></pre></td></tr></table></figure>
<p>当然，上面的require(“angular”)导入的是<code>node_modules</code>中的angular模块，如果我们要导入本地的js文件，怎么办？如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(&quot;./test&quot;);</div></pre></td></tr></table></figure>
<p>这种方式还有一个用法，那就是我们可以将共用的第三方库、组件写入一个文件中，然后其它文件只需要导入这个文件一次就行了。</p>
<p>例如，上面我们可以建立一个<code>common.js</code>文件，然后导入<code>angular</code>和<code>bootstrap</code>，common.js内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">require(&quot;angular&quot;);</div><div class="line">require(&quot;bootstrap&quot;);</div></pre></td></tr></table></figure>
<p>然后在<code>demoApp.js</code>中使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">require(&apos;./common&apos;);</div><div class="line"></div><div class="line">var demoApp = angular.module(&apos;demoApp&apos;, []);</div></pre></td></tr></table></figure>
<p>效果是一样的，但这种方式解决了非常的棒，解决了我曾经的一个痛点，那就是我们项目分角色有很多个端，每个端有共同的内容，当写一个组件时，我们需要每个端都在index.html中导入一遍，非常的不方便。</p>
<p><strong>注：</strong> 由于jquery没有模块化的概念，也没有适配webpack，所以我们使用jquery时，需要在index.html中导入，然后使用<code>ProvidePlugin</code>插件使其自动加载。</p>
<h4 id="最后，打包运行"><a href="#最后，打包运行" class="headerlink" title="最后，打包运行"></a>最后，打包运行</h4><p>打包只需要在项目根目录下运行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --progress --color</div></pre></td></tr></table></figure>
<p>它默认会使用当前目录下的<code>webpack.config.js</code>配置文件，运行成功之后，它会生成一个<code>bundle.js</code>打包文件。</p>
<p>我们可以在浏览器访问，就可以看到效果，这就说明OK了。</p>
<p>当然，我们开发时，需要实时看到改变代码的效果，这个时候每次都打包生成就太麻烦了。那么就可以用到webpack专门为我们准备的调试命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack-dev-server</div></pre></td></tr></table></figure>
<p>然后在浏览器中输入<code>http://localhost:8080/</code>就可以看到效果了。</p>
<p>其实，除了这种，还有另外一种也可以进行调试，那就是监听模式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --progress --color --watch</div></pre></td></tr></table></figure>
<p>监听模式下，我们的js文件发生改变时，它会监听到，然后重新打包。</p>
<h4 id="另外，多个客户端，配置多个入口文件"><a href="#另外，多个客户端，配置多个入口文件" class="headerlink" title="另外，多个客户端，配置多个入口文件"></a>另外，多个客户端，配置多个入口文件</h4><p>在我们公司项目中，有很多个客户端，我把它们配置成了多个入口文件，那么如何配置多个入口文件？如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const webpack = require(&quot;webpack&quot;);</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">    //入口文件</div><div class="line">    entry: &#123;</div><div class="line">        demoApp: &quot;./demoApp.js&quot;,</div><div class="line">        vendor: &quot;./vendor.js&quot;</div><div class="line">    &#125;,</div><div class="line">    //生成的文件配置</div><div class="line">    output: &#123;</div><div class="line">        //生成文件的路径,__dirname是当前项目路径,与webpack.config.js同级</div><div class="line">        path: __dirname,</div><div class="line">        //文件名</div><div class="line">        filename: &quot;[name].bundle.js&quot;</div><div class="line">    &#125;</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<p>它们将生成<code>demoApp.bundle.js</code>和<code>vendor.bundle.js</code>两个打包文件。</p>
<h4 id="查看最终效果"><a href="#查看最终效果" class="headerlink" title="查看最终效果"></a>查看最终效果</h4><p>如果想查看demo的最终效果，如下运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout -f step1</div><div class="line">npm install</div><div class="line">webpack --progress --color</div></pre></td></tr></table></figure>
<h4 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h4><p>如果想自己实践更多的配置，可以去看阮一峰老师的一个项目<a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">webpack-demos</a>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>刚开始看了官方文档入门之后，感觉自己会用了，但是却不知道如何用在Angular上面。后来查看了别人的代码之后，发现与<code>react-native</code>类似，都是使用<code>require</code>语法使用（CommonJS语法），豁然开朗。之后，发现很多第三方框架都适配了<code>webpack</code>，唯独jquery不行，找了<code>stackoverflow</code>上面的解决方案顺利解决。就这么折腾下来，然后产生了这么一篇文章，希望对大家能有所帮助。当然，东西不止这么点，后续再更新出来。而且，我也会继续，直到整个webpack配置达到我理想中的状态。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://webpack.github.io/docs/" target="_blank" rel="external">webpack 官方文档</a></p>
<p><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">https://github.com/ruanyf/webpack-demos</a></p>
<p><a href="https://segmentfault.com/a/1190000002551952" target="_blank" rel="external">Webpack 入门指迷</a></p>
<p><a href="https://segmentfault.com/a/1190000006863968" target="_blank" rel="external">webpack多页应用架构系列（二）：webpack配置常用部分有哪些？</a></p>
<p><a href="http://stackoverflow.com/questions/37651015/webpack-using-bootstrap-jquery-is-not-defined" target="_blank" rel="external">http://stackoverflow.com/questions/37651015/webpack-using-bootstrap-jquery-is-not-defined</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，在开发公司项目的时候，由于组件太多，发出请求太多，导致网站速度太慢，所以我们就有一种强烈的需求，那就是对开发的js进行打包。在对比了各种打包工具之后，最后我们选定了webpack。所以，在这一周除了研究了下如何跨域请求，最主要的时间都去研究webpack去了，虽然没有
    
    </summary>
    
      <category term="Angular" scheme="http://www.liuchungui.com/categories/Angular/"/>
    
    
      <category term="Angular" scheme="http://www.liuchungui.com/tags/Angular/"/>
    
      <category term="webpack" scheme="http://www.liuchungui.com/tags/webpack/"/>
    
      <category term="Angular webpack" scheme="http://www.liuchungui.com/tags/Angular-webpack/"/>
    
  </entry>
  
  <entry>
    <title>CI+Angular之CORS跨域请求实践篇</title>
    <link href="http://www.liuchungui.com/2016/11/28/Angular-CI%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://www.liuchungui.com/2016/11/28/Angular-CI跨域请求/</id>
    <published>2016-11-28T14:03:20.000Z</published>
    <updated>2016-11-28T16:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近，我们对跨域请求有需求，于是我今天下午和晚上花了大概四个小时左右调通了前端和后端。在整个过程中，大部分时间都花在找资料上，深感网上的资料太零散，比较难找，所以整理一番，分享给大家。</p>
<p>在正文之前，如果你对CORS不甚了解，请先阅读阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a>，文章非常的透彻全面。（汗！我google出来看的第一篇文章是另外一篇，整篇文章看了之后，知道的大概，但是完全不知道如何下手。后来是多番查找代码，各种试错，基本上搞定的时候，才看到阮一峰老师的这篇文章）。</p>
<p>好，咱们正文开始！</p>
<h2 id="一、服务器配置"><a href="#一、服务器配置" class="headerlink" title="一、服务器配置"></a>一、服务器配置</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>语言：php<br>框架：CI + codeigniter-restserver    </p>
<p>CROS请求分成简单请求和非简单请求。而我们在整个前后台通信中，数据交互格式是JSON的，而且存在许多除HEAD、GET、POST之外的请求，所以我们的请求都是<code>非简单请求</code>。而且，我们在<a href="https://github.com/bcit-ci/CodeIgniter" target="_blank" rel="external">CI</a>中是通过session验证权限的，所以需要传递<code>cookie</code>。</p>
<p>针对上面这两点要求，我们有以下配置：</p>
<p>1、对普通的GET/POST/PUT请求，请求头设置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> //设置json格式请求头</div><div class="line">header(&quot;Content-type:application/json; charset=utf-8&quot;);</div><div class="line">//跨域请求允许的域名设置，因为需要传递cookie，不能使用*</div><div class="line">header(&quot;Access-Control-Allow-Origin: http://www.beyondwinlaw.com&quot;);</div><div class="line">//跨域请求允许的请求头</div><div class="line">header(&quot;Access-Control-Allow-Headers: Content-type&quot;);</div><div class="line">//跨域请求同意发送Cookie</div><div class="line">header(&quot;Access-Control-Allow-Credentials: true&quot;);</div></pre></td></tr></table></figure>
<p>2、 非简单请求每次请求前，都会发送一个一次”预检“请求，它是<code>options</code>的请求方式。它主要是询问服务器是否允许这个非简单请求访问，如果我们允许，则返回所需要的回应头信息（response header），这个预检请求的请求头设置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//设置json格式请求头</div><div class="line">header(&quot;Content-type:application/json; charset=utf-8&quot;);</div><div class="line">//跨域请求允许的域名设置</div><div class="line">header(&quot;Access-Control-Allow-Origin: http://www.beyondwinlaw.com&quot;);</div><div class="line">//跨域请求允许的请求头</div><div class="line">header(&quot;Access-Control-Allow-Headers: Content-type&quot;);</div><div class="line">header(&quot;Vary: Accept-Encoding, Origin&quot;);</div><div class="line">//跨域请求同意发送Cookie</div><div class="line">header(&quot;Access-Control-Allow-Credentials: true&quot;);</div><div class="line">//options请求中所允许的方法</div><div class="line">header(&quot;Access-Control-Allow-Methods: GET, POST, PUT, OPTIONS&quot;);</div><div class="line">//OPTIONS这个预请求的有效时间,20天</div><div class="line">header(&quot;Access-Control-Max-Age: 1728000&quot;);</div></pre></td></tr></table></figure>
<p>在配置上面之前，我们还需要对预检请求做出回应。而在[codeigniter-restserver(<a href="https://github.com/chriskacerguis/codeigniter-restserver)框架中，使用的是RESTful" target="_blank" rel="external">https://github.com/chriskacerguis/codeigniter-restserver)框架中，使用的是RESTful</a> API的风格，<code>get_name</code>的<code>options</code>请求方法是下面这么写的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public funtion get_name_options() &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，我们不可能对所有的方法都写一个对应的<code>options</code>请求方法，那如何做呢？我们是在<code>early_checks()</code>做这件事情：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 请求之前检查,每个接口都会处理</div><div class="line">     */</div><div class="line">    public function early_checks()</div><div class="line">    &#123;</div><div class="line">        parent::early_checks(); // TODO: Change the autogenerated stub</div><div class="line"></div><div class="line">        /**</div><div class="line">         * 将get或post请求中的参数为空/两边有空格的数据处理一下</div><div class="line">         */</div><div class="line">        switch ($this-&gt;request-&gt;method) &#123;</div><div class="line">            case &quot;get&quot;: &#123;</div><div class="line">                $this-&gt;_get_args = $this-&gt;handle_param($this-&gt;_get_args);</div><div class="line">            &#125;</div><div class="line">                break;</div><div class="line">            case &quot;post&quot;: &#123;</div><div class="line">                $this-&gt;_post_args = $this-&gt;handle_param($this-&gt;_post_args);</div><div class="line">            &#125;</div><div class="line">                break;</div><div class="line">            case &quot;options&quot;: &#123;</div><div class="line">                //options请求,直接成功, 它设置了允许的方法</div><div class="line">                header(&quot;Access-Control-Allow-Methods: GET, POST, PUT, OPTIONS&quot;);</div><div class="line">                //OPTIONS这个预请求的有效时间,20天</div><div class="line">                header(&quot;Access-Control-Max-Age: 1728000&quot;);</div><div class="line">                //做出回应</div><div class="line">                answer(true, &apos;成功&apos;);</div><div class="line">            &#125;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>注：answer方法中是统一的回应方法，内部已经设置了统一的请求头。</p>
<h2 id="二、Angular中的配置"><a href="#二、Angular中的配置" class="headerlink" title="二、Angular中的配置"></a>二、Angular中的配置</h2><p>Angular中的配置更简单了，只需要对$http的<code>GET/POST/PUT</code>请求中的配置项中，将<code>withCredentials</code>设置为true就行了。</p>
<p>请求格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$http.get(url, [config]).success(function()&#123; ... &#125;);</div><div class="line">$http.post(url, param, [config]).success(function()&#123; ... &#125;);</div><div class="line">$http.put(url, param, [config]).success(function()&#123; ... &#125;);</div></pre></td></tr></table></figure>
<p>具体代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">//GET请求</div><div class="line">$http.get(&apos;/test?name=Jack&apos;, &#123;</div><div class="line">        withCredentials: true</div><div class="line">    &#125;).success(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">    &#125;).error(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">//POST请求</div><div class="line">$http.post(&apos;/test&apos;, &#123;name: &apos;Jack&apos;&#125;, &#123;</div><div class="line">        withCredentials: true</div><div class="line">    &#125;).success(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">    &#125;).error(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">//PUT请求</div><div class="line">$http.put(&apos;/test&apos;, &#123;name: &apos;Luck&apos;&#125;, &#123;</div><div class="line">        withCredentials: true</div><div class="line">    &#125;).success(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">    &#125;).error(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>还需要提一下的是，我们在使用<code>ng-file-upload</code>进行上传时，设置withCredentials为true可以如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Upload.upload(&#123;</div><div class="line">                url: ServerURL + &apos;file/file_upload&apos;,</div><div class="line">                data: &#123; file: file &#125;,</div><div class="line">                withCredentials : true</div><div class="line">            &#125;).progress(function (evt) &#123;    // 进度</div><div class="line">                console.log(&apos;进度: &apos; + parseInt(100.0 * evt.loaded / evt.total) + &apos;%&apos;);</div><div class="line">            &#125;).success(function(data, status, headers, config) &#123;</div><div class="line">            	console.log(data);</div><div class="line">            &#125;).error(function(data) &#123;</div><div class="line">        		console.log(data);</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然折腾了很久，其实真正知道了，配置起来特别的简单。所以能找到一篇好的文章，是真的很幸福的一件事情。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
<p><a href="https://cnbin.github.io/blog/2016/06/24/angularjsshi-xian-kua-yu-qing-qiu/" target="_blank" rel="external">陈斌彬的技术博客</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP访问控制(CORS)</a></p>
<p><a href="https://my.oschina.net/blogshi/blog/303758" target="_blank" rel="external">Angular通过CORS实现跨域方案</a></p>
<p><a href="https://github.com/danialfarid/ng-file-upload/issues/662" target="_blank" rel="external">withCredentials is not working</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，我们对跨域请求有需求，于是我今天下午和晚上花了大概四个小时左右调通了前端和后端。在整个过程中，大部分时间都花在找资料上，深感网上的资料太零散，比较难找，所以整理一番，分享给大家。&lt;/p&gt;
&lt;p&gt;在正文之前，如果你对CORS不甚了解，请先阅读阮一峰老师的&lt;a href=
    
    </summary>
    
      <category term="angular" scheme="http://www.liuchungui.com/categories/angular/"/>
    
    
      <category term="angular, CI跨域, angular跨域, 跨域实践" scheme="http://www.liuchungui.com/tags/angular-CI%E8%B7%A8%E5%9F%9F-angular%E8%B7%A8%E5%9F%9F-%E8%B7%A8%E5%9F%9F%E5%AE%9E%E8%B7%B5/"/>
    
  </entry>
  
  <entry>
    <title>angular中使用时间控件bootstrap-datetimepicker</title>
    <link href="http://www.liuchungui.com/2016/10/22/bootstrap-datetimepicker%E9%9B%86%E6%88%90%E5%88%B0angular%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.liuchungui.com/2016/10/22/bootstrap-datetimepicker集成到angular使用/</id>
    <published>2016-10-22T13:32:31.000Z</published>
    <updated>2016-10-22T14:05:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司网站以前用的是原生的时间控件，用起来用户体验并不好，然后把这个就给我当专属bug了。</p>
<p>于是，前几天我专门在github上找相关的控件，找了几个，终于找到了一个满意的控件<a href="https://github.com/Eonasdan/bootstrap-datetimepicker" target="_blank" rel="external">bootstrap-datetimepicker</a>，推荐给大家。</p>
<p>不过它不是angular控件，所以还需要另外的封装，找到了<a href="https://github.com/atais/angular-eonasdan-datetimepicker" target="_blank" rel="external">angular-enoasdan-datetimepicker</a>这个，这里我就简单总结下继承和使用。</p>
<a id="more"></a>
<h2 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？</h2><p>使用npm进行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install --save eonasdan-bootstrap-datetimepicker</div><div class="line">$ npm install angular-eonasdan-datetimepicker --save</div></pre></td></tr></table></figure>
<p>引入js文件和css文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;../node_modules/moment/min/moment.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;../node_modules/moment/min/locales.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;../node_modules/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;../node_modules/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css&quot;&gt;</div><div class="line">&lt;script src=&quot;../node_modules/angular-eonasdan-datetimepicker/dist/angular-eonasdan-datetimepicker.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><h4 id="让app依赖这个模块"><a href="#让app依赖这个模块" class="headerlink" title="让app依赖这个模块"></a>让app依赖这个模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var salesApp = angular.module(&quot;salesApp&quot;, [&apos;ae-datetimepicker&apos;]);</div></pre></td></tr></table></figure>
<h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; datetimepicker ng-model=&quot;editingFile.effect_time&quot; options=&quot;dateOptions&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="angular中配置日期控件"><a href="#angular中配置日期控件" class="headerlink" title="angular中配置日期控件"></a>angular中配置日期控件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$scope.dateOptions = &#123;</div><div class="line">          locale: &apos;zh-cn&apos;,</div><div class="line">          format: &apos;L&apos;,</div><div class="line">          showClose: true,</div><div class="line">          keepOpen: false</div><div class="line">      &#125;;</div></pre></td></tr></table></figure>
<p><strong>需要注意的是</strong><code>zh-cn</code>是配置中文；<code>format</code>是配置日期格式，当日期格式是<code>L</code>时，会点击一下，自动隐藏日期弹框，用法来源于：<br> <a href="https://github.com/Eonasdan/bootstrap-datetimepicker/issues/1464" target="_blank" rel="external">How to close DateTimePicker after date is picker</a>这个链接，整个控件配置的选项在<a href="http://eonasdan.github.io/bootstrap-datetimepicker/Options/#format" target="_blank" rel="external">http://eonasdan.github.io/bootstrap-datetimepicker/Options/#format</a>这个文档中可查看。</p>
<p>效果如下（来自官网）：<br><img src="http://i.imgur.com/nfnvh5g.png" alt="DateTimePicker"></p>
<p>项目github地址：</p>
<p><a href="https://github.com/Eonasdan/bootstrap-datetimepicker" target="_blank" rel="external">bootstrap-datetimepicker</a></p>
<p><a href="https://github.com/atais/angular-eonasdan-datetimepicker" target="_blank" rel="external">angular-eonasdan-datetimepicker</a></p>
<p>官网文档：</p>
<p><a href="http://eonasdan.github.io/bootstrap-datetimepicker/Installing/" target="_blank" rel="external">http://eonasdan.github.io/bootstrap-datetimepicker/Installing/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司网站以前用的是原生的时间控件，用起来用户体验并不好，然后把这个就给我当专属bug了。&lt;/p&gt;
&lt;p&gt;于是，前几天我专门在github上找相关的控件，找了几个，终于找到了一个满意的控件&lt;a href=&quot;https://github.com/Eonasdan/bootstrap-datetimepicker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;bootstrap-datetimepicker&lt;/a&gt;，推荐给大家。&lt;/p&gt;
&lt;p&gt;不过它不是angular控件，所以还需要另外的封装，找到了&lt;a href=&quot;https://github.com/atais/angular-eonasdan-datetimepicker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angular-enoasdan-datetimepicker&lt;/a&gt;这个，这里我就简单总结下继承和使用。&lt;/p&gt;
    
    </summary>
    
      <category term="angular" scheme="http://www.liuchungui.com/categories/angular/"/>
    
    
      <category term="angular, angular 时间控件, 时间控件" scheme="http://www.liuchungui.com/tags/angular-angular-%E6%97%B6%E9%97%B4%E6%8E%A7%E4%BB%B6-%E6%97%B6%E9%97%B4%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Angular1.5 入门之常用指令使用</title>
    <link href="http://www.liuchungui.com/2016/10/03/angular-%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.liuchungui.com/2016/10/03/angular-入门之常用指令使用/</id>
    <published>2016-10-03T06:40:09.000Z</published>
    <updated>2016-10-03T09:36:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Angular使用了应该有一个月了，一直想总结来着，但是比较懒，所以一直拖着。这次正好趁着分享，写一篇相关内容的文章，来总结下Angular的基本使用和常用指令。本来打算写的是入门教程，发现入门教程怎么写都感觉不如官网，所以放弃了，可以把这一篇当做入门教程的补充版。如果大家要看入门教程可以看官方的<a href="https://docs.angularjs.org/tutorial" target="_blank" rel="external">angular tutorial</a>，中文版的话1.5版本的没找到，大家可以看<code>angular 1.4</code>的<a href="http://www.apjs.net/#dir31" target="_blank" rel="external">angular 教程</a>。</p>
<p>这里以一个简单的图片列表应用为demo，查看效果可以点击：<a href="http://www.liuchungui.com/example/angularExample/01/">http://www.liuchungui.com/example/angularExample/01/</a>查看，github地址是<a href="https://github.com/liuchungui/angularExample" target="_blank" rel="external">angularExample 01</a>。</p>
<a id="more"></a>
<p>现在跟着我一步一步来吧！</p>
<h2 id="一、使用npm管理器搭建环境"><a href="#一、使用npm管理器搭建环境" class="headerlink" title="一、使用npm管理器搭建环境"></a>一、使用npm管理器搭建环境</h2><p>我们使用npm包管理器来搭建环境，因为它易于安装和管理。我们先创建一个文件夹，初始化工程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir angularExample</div><div class="line">$ cd angularExample</div><div class="line">$ npm init</div></pre></td></tr></table></figure>
<p>初始化的时候，会让你填入项目的一些信息，之后我们输入<code>yes</code>之后，会在当前目录下生成一个<code>package.json</code>，里面是我们填入的信息。</p>
<p>之后，我们安装<code>angularJS</code>、<code>jquery</code>和<code>bootstrap</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#安装angular</div><div class="line">$ npm install --save angular</div><div class="line">#安装jquery</div><div class="line">$ npm install --save jquery</div><div class="line">#安装bootstrap</div><div class="line">$ npm install --save bootstrap</div></pre></td></tr></table></figure>
<p>这时，我们的项目工程文件下多了个<code>node_modules</code>文件夹，<code>node_modules</code>下有<code>angular</code>和<code>jquery</code>，这就说明我们安装成功了。</p>
<p>查看<code>package.json</code>，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;learning&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;angular&quot;: &quot;^1.5.8&quot;,</div><div class="line">    &quot;bootstrap&quot;: &quot;^3.3.7&quot;,</div><div class="line">    &quot;jquery&quot;: &quot;^3.1.1&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到<code>dependencies</code>那一块，这里说明我们项目依赖的是<code>angular 1.5.8</code>、<code>jquery 3.1.1</code>和<code>bootstrap 3.3.7</code>。</p>
<p>在安装完依赖之后，我们需要将我们的工程放入一个web环境下，例如apache等等。如果你没有对应的web环境，我们可以使用npm快速搭建一个，这里可参考<a href="http://www.alloyteam.com/2015/06/kuai-su-da-jian-jing-tai-fu-wu-qi-di-ji-zhong-fang-fa/" target="_blank" rel="external">快速搭建静态服务器的几种方法</a>。</p>
<p>到此，我们的环境算是搭建好了，现在开启我们的旅程吧！</p>
<h2 id="二、图片列表应用"><a href="#二、图片列表应用" class="headerlink" title="二、图片列表应用"></a>二、图片列表应用</h2><h3 id="1、导入文件"><a href="#1、导入文件" class="headerlink" title="1、导入文件"></a>1、导入文件</h3><p>克隆或下载<a href="https://github.com/liuchungui/angularExample.git" target="_blank" rel="external">angularExample</a>，将工程下面的<code>demoApp.css</code>样式文件、<code>image</code>文件夹和<code>resource</code>文件夹copy到你的工程目录下，这是我们所需要样式、图片和资源。</p>
<p>创建<code>index.html</code>和<code>demoApp.js</code>，在<code>index.html</code>文件中，导入<code>angular</code>、<code>jquery</code>和<code>bootstrap</code>这三个框架，然后导入<code>demoApp.css</code>和<code>demoApp.js</code>。</p>
<p>下面是index.html文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Hello World&lt;/title&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;demoApp.css&quot;&gt;</div><div class="line">    &lt;script src=&quot;node_modules/angular/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;node_modules/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;demoApp.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="2、添加列表展示页面"><a href="#2、添加列表展示页面" class="headerlink" title="2、添加列表展示页面"></a>2、添加列表展示页面</h4><p>下面是添加列表展示页之后index.html的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot; ng-app=&quot;demoApp&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Hello World&lt;/title&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;demoApp.css&quot;&gt;</div><div class="line">    &lt;script src=&quot;node_modules/angular/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;node_modules/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;demoApp.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body ng-controller=&quot;demoController&quot;&gt;</div><div class="line">&lt;div class=&quot;photos&quot;&gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>demoApp.js中的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var demoApp = angular.module(&apos;demoApp&apos;, []);</div><div class="line"></div><div class="line">demoApp.controller(&apos;demoController&apos;, function ($scope, $http) &#123;</div><div class="line">    /**</div><div class="line">     * 获取imageList.json文件中的json数据</div><div class="line">     */</div><div class="line">    $http.get(&apos;resource/imageList.json&apos;).success(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">        //绑定到scope当中的图片列表中</div><div class="line">        $scope.imageList = data;</div><div class="line">    &#125;).error(function (error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置图片的宽和高</div><div class="line">     */</div><div class="line">    $scope.imageStyle = function(width) &#123;</div><div class="line">        var windowWidth = window.document.body.clientWidth;</div><div class="line">        var scale = windowWidth/1932;</div><div class="line">        return &#123;</div><div class="line">            &apos;height&apos;: parseInt(352*scale) + &apos;px&apos;,</div><div class="line">            &apos;width&apos;: parseInt((windowWidth-36)/4) + &apos;px&apos;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * jquery事件</div><div class="line">     * resize是当窗口变化时,会触发resize事件</div><div class="line">     */</div><div class="line">    $(window).resize(function()&#123;</div><div class="line">        /**</div><div class="line">         * angular 事件, 重新更新界面, 做手动刷新</div><div class="line">         */</div><div class="line">        $scope.$apply(function()&#123;</div><div class="line">            //do something to update current scope based on the new innerWidth and let angular update the view.</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码，我们实现了一个简单展示图片的列表，而且做到了响应式布局，你可以在浏览器里面看到效果。这是怎么做到的？</p>
<h4 id="首先，创建demoApp应用"><a href="#首先，创建demoApp应用" class="headerlink" title="首先，创建demoApp应用"></a>首先，创建<code>demoApp</code>应用</h4><p>我们在<code>index.html</code>文件中<code>&lt;html lang=&quot;en&quot; ng-app=&quot;demoApp&quot;&gt;</code>中使用了<code>ng-app</code>指令，这个指令指定了<code>angular</code>中<code>demoApp</code>模块作为它的根模块，也指定了<code>html</code>标签作为我们angular应用的作用域。</p>
<p>随后，我们在<code>demoApp.js</code>文件中注册了<code>demoApp</code>模块，名称与上一步<code>ng-app</code>指定的名称对应，注册模块的模式是固定的，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 注册模块, []是依赖的模块</div><div class="line"> * @type &#123;angular.Module&#125;</div><div class="line"> */</div><div class="line">var demoApp = angular.module(&quot;demoApp&quot;, []);</div></pre></td></tr></table></figure>
<p>所使用的<code>angular.module</code>中有两个参数，第一个参数是注册的模块名称，第二个参数是这个注册模块依赖的模块。</p>
<h4 id="然后、创建控制器"><a href="#然后、创建控制器" class="headerlink" title="然后、创建控制器"></a>然后、创建控制器</h4><p>创建控制器，在html中只需要使用<code>ng-controller</code>指定一下就行了，如<code>&lt;body ng-controller=&quot;demoController&quot;&gt;</code>，那这个body标签就成为控制器的作用域了。而在js中，需要创建一个对应的控制器，样式如下面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(&quot;demoController&quot;, function ($scope, $http) &#123;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h4 id="最后，创建图片列表"><a href="#最后，创建图片列表" class="headerlink" title="最后，创建图片列表"></a>最后，创建图片列表</h4><p>图片列表中模块<code>index.html</code>中的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photos&quot;&gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot; /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>它首先使用<code>ng-repeat</code>指令，遍历了<code>imageList</code>的内容，然后实例化了多个<code>&lt;img&gt;</code>。<br>在说<code>ng-repeat</code>命令之前，我们先来看看这个<code>imageList</code>是怎么来的。我们在<code>demoApp.js</code>中看到下面一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取imageList.json文件中的json数据</div><div class="line"> */</div><div class="line">$http.get(&apos;resource/imageList.json&apos;).success(function (data) &#123;</div><div class="line">    console.log(data);</div><div class="line">    //绑定到scope当中的图片列表中</div><div class="line">    $scope.imageList = data;</div><div class="line">&#125;).error(function (error) &#123;</div><div class="line">    console.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这段代码注释很清楚，就是我们通过<code>$http</code>进行http请求，获取本地的资源文件<code>imageList.json</code>中的内容，然后将这个json数据赋值给$scope.imageList，这样模板<code>index.html</code>中的<code>imageList</code>就有内容了。</p>
<p>这整个过程用到了angular两个核心概念：</p>
<ul>
<li>依赖注入：通过依赖注入，我们可以很方便的获取所需要的东西。这个<code>$scope</code>和<code>$http</code>就是通过依赖注入的机制获得的，我们并不需要创建它们，只需要在<code>demoController</code>获取就行了。</li>
<li>数据绑定：当我们获取数据赋值给当前作用域下的某个值后，例如$scope.imageList，模板<code>index.html</code>中的imageList也发生了变化。</li>
</ul>
<p>当<code>imageList</code>有值后，<code>ng-repeat</code>遍历这个<code>imageList</code>，然后多次实例化<code>img</code>元素，用法就和PHP中的for-in类似，只是少了for。</p>
<p>在实例化<code>img</code>时，使用了<code>ng-src</code>和<code>ng-style</code>指令。<br>其中，<code>ng-src</code>和<code>src</code>一样，指定图片的地址。<br>而<code>ng-style</code>则对应的是<code>style</code>，指定的是样式，但是它与style不同的是，它传递的是对象，而且可以通过函数获取一个对象。例如上面实现响应式布局，就是通过<code>imageStyle</code>返回了对应的高和宽。</p>
<p>不过，这种通过js设置样式的代码是不推荐的，因为在angular使用的是MVC的开发模式，M就是绑定的数据；V就是DOM，也就是我们的index.html模板；C则是控制器。上面，我们相当于在控制器做模板的事情，我们应该保持js纯洁性，详情可参考：<a href="http://www.cnblogs.com/whitewolf/archive/2013/05/22/3092184.html" target="_blank" rel="external">细说Angular ng-class</a>。</p>
<h3 id="3、添加分类、搜索和删除功能"><a href="#3、添加分类、搜索和删除功能" class="headerlink" title="3、添加分类、搜索和删除功能"></a>3、添加分类、搜索和删除功能</h3><p>当我们在显示列表的时候，也许想拥有菜单分类、搜索和删除的功能，这个时候在前面的代码基础上，如何实现呢？</p>
<p>这里是实现之后的<code>index.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;body ng-controller=&quot;demoController&quot;&gt;</div><div class="line">&lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot;&gt;</div><div class="line">        &lt;div class=&quot;btn-group pull-left&quot;&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: !search.type&#125;&quot; ng-click=&quot;selectType()&quot;&gt;全部&lt;/button&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 1&#125;&quot; ng-click=&quot;selectType(1)&quot;&gt;人物&lt;/button&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 2&#125;&quot; ng-click=&quot;selectType(2)&quot;&gt;动物&lt;/button&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 3&#125;&quot; ng-click=&quot;selectType(3)&quot;&gt;风景&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;margin: 10px 0; height: 40px&quot;&gt;</div><div class="line">        &lt;input class=&quot;form-control&quot; ng-model=&quot;search.keyword&quot; placeholder=&quot;搜索内容&quot;/&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;line-height: 50px&quot;&gt;</div><div class="line">        搜索:&#123;&#123;search.keyword&#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;photos&quot;&gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList | filter:search&quot; ng-if=&quot;!info.is_hide&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">        &lt;div class=&quot;block&quot;&gt;</div><div class="line">            &lt;button class=&quot;btn btn-default gap&quot; ng-click=&quot;removePhoto(info)&quot;&gt;&lt;span&gt;删除&lt;/span&gt;&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>在demoApp.js文件中的demoController添加了下面一些内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$scope.search = &#123;&#125;;</div><div class="line">/**</div><div class="line"> * 删除图片</div><div class="line"> * @param index</div><div class="line"> */</div><div class="line">$scope.removePhoto = function (info) &#123;</div><div class="line">    info.is_hide = true;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 按钮点击选择类型的事件</div><div class="line"> * @param type</div><div class="line"> */</div><div class="line">$scope.selectType = function (type) &#123;</div><div class="line">    $scope.search.type = type;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个实现之后就是我们的最终效果，当点击类型时，可以获取对应类型的图片，当输入关键字，可以搜索到相关的图片，还可以进行删除，这是怎么做到的呢？</p>
<p>首先，我们在左上角添加一排按钮，添加类型选择的功能，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-sm-4 col-xs-12&quot;&gt;</div><div class="line">    &lt;div class=&quot;btn-group pull-left&quot;&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: !search.type&#125;&quot; ng-click=&quot;selectType()&quot;&gt;全部&lt;/button&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 1&#125;&quot; ng-click=&quot;selectType(1)&quot;&gt;人物&lt;/button&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 2&#125;&quot; ng-click=&quot;selectType(2)&quot;&gt;动物&lt;/button&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 3&#125;&quot; ng-click=&quot;selectType(3)&quot;&gt;风景&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>对应的demoApp.js文件的内容有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line"> * 按钮点击选择类型的事件</div><div class="line"> * @param type</div><div class="line"> */</div><div class="line">$scope.selectType = function (type) &#123;</div><div class="line">    $scope.search.type = type;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们在按钮上通过<code>ng-click</code>指令添加了事件监听，当点击按钮的时候，触发了<code>selectType</code>事件，随后就将<code>search.type</code>的值改变成了事件传递过来的值。</p>
<p>当<code>search.type</code>值改变之后，由于按钮中我们添加了<code>ng-class</code>指令，从而enable了当前点击按钮的<code>btn-primary</code>类，这样就实现了选中效果。</p>
<p><code>ng-class</code>是用来实现样式的，它有两种用法（通过函数传递就不说了）:</p>
<ul>
<li>传递类名， 例如 <code>&lt;a ng-class=&quot;active selected&quot; /&gt;</code>，这样a标签就相当于给了两个样式类的效果，和<code>&lt;a class=&quot;active selected&quot;&gt;</code>一样</li>
<li>通过true和false来控制，例如 <code>&lt;button ng-class=&quot;{&#39;btn-primary&#39;: search.type == 1}&quot;&gt;</code>，当search.type为1时，button就拥有了btn-primary这个类的样式；否则就不拥有。</li>
</ul>
<p>相比与<code>ng-style</code>，<code>ng-class</code>它更能实现js与html代码的分离，保持js的纯洁，详情可参考：<a href="http://www.cnblogs.com/whitewolf/archive/2013/05/22/3092184.html" target="_blank" rel="external">细说Angular ng-class</a>。</p>
<p>当我们点击类型按钮的时候，如何显示出对应类型的图片？这用到了<code>ng-repeat的过滤器</code>，具体代码在这里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList | filter:search&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>当使用ng-repeat遍历时，如果<code>info</code>中的数据与<code>search</code>中的数据不匹配，则<code>ng-repeat</code>会忽略，不会实例化元素。</p>
<p>这个匹配规则默认是这样的，当<code>search</code>是一个数字或字符串时，它会匹配<code>info</code>对象所有的值，例如，search=6，那么info={id: 6, type:2}和info={id:7, type:6}都会匹配到；而当search是个对象时，它就会将对应的键值进行匹配，例如search={type:2}，它只会匹配info={id: 6, type:2}的对象，而不会匹配info={id: 2, type:7}。</p>
<p> 当然，上面是<code>ng-repeat</code>的过滤器的默认匹配规则，我们可以后面添加第三个参数，详情可以参考<a href="https://code.angularjs.org/1.4.12/docs/api/ng/filter/filter" target="_blank" rel="external">filter</a>。</p>
<p> 同样原理，我们实现搜索是通过<code>ng-model</code>和<code>filter</code>实现的，这里就说说<code>ng-model</code>，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;margin: 10px 0; height: 40px&quot;&gt;</div><div class="line">    &lt;input class=&quot;form-control&quot; ng-model=&quot;search.keyword&quot; placeholder=&quot;搜索内容&quot;/&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;line-height: 50px&quot;&gt;</div><div class="line">    搜索:&#123;&#123;search.keyword&#125;&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>这段代码通过<code>ng-model</code>，我们实现了<code>双向绑定</code>，当我们输入值之后，我们可以看到界面中<code>搜索：</code>后面的内容随着我们输入变化而变化，我们不需要在js中做任何事情就可以做到这些，这是一个特别棒的特性。</p>
<p> 最后，我们来看看是如何实现删除的？<br> 对应的index.html中的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList | filter:search&quot; ng-if=&quot;!info.is_hide&quot;&gt;</div><div class="line">    &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">    &lt;div class=&quot;block&quot;&gt;</div><div class="line">        &lt;button class=&quot;btn btn-default gap&quot; ng-click=&quot;removePhoto(info)&quot;&gt;&lt;span&gt;删除&lt;/span&gt;&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>对应的demoApp.js中的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  /**</div><div class="line"> * 删除图片</div><div class="line"> * @param index</div><div class="line"> */</div><div class="line">$scope.removePhoto = function (info) &#123;</div><div class="line">    info.is_hide = true;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>操作主要是在按钮上添加一个removePhoto事件，当点击按钮的时候，将数据中的<code>is_hide</code>设置true，而在模板有<code>ng-if=&quot;!info.is_hide&quot;</code>，当is_hide为true时，表达式为false, 从而通过<code>ng-if</code>指令实现了删除功能。</p>
<p>除了，<code>ng-if</code>可以隐藏元素之外，还有<code>ng-show</code>和<code>ng-hide</code>，它们用法差不多，都是传递一个bool值进行控制。但是，它们之间是有些区别的：</p>
<ul>
<li>ng-if 它实现隐藏的功能，是将元素从dom中删除，使用ng-if会创建子作用域。</li>
<li>ng-show 它实现隐藏的功能，是将元素中的display设置为none，它不会创建子作用域。</li>
<li>ng-hide 它实现隐藏的功能和ng-show一样，是设置元素样式中的display为none来实现的，它不会创建子作用域。<br>到此，我们就实现了简单的图片列表应用。</li>
</ul>
<h2 id="三、指令补充"><a href="#三、指令补充" class="headerlink" title="三、指令补充"></a>三、指令补充</h2><h3 id="1、ng-app"><a href="#1、ng-app" class="headerlink" title="1、ng-app"></a>1、<code>ng-app</code></h3><p>这个指令指定了angular中<code>demoApp</code>模块作为它的根模块。使用ng-app指令时，需要注意的是，它一般都放在页面的根元素当中，例如<body>或<html>标签。还需要注意三点是，一个页面只能有一个angular应用；angular应用不能嵌套使用；不能和一些开启了<code>transclusion</code>的指令一起使用，例如ng-if、ng-include、ng-view（<code>transclusion</code>是什么参考<a href="http://www.html-js.com/article/Using-Angular-to-develop-web-application-completely-understand-AngularJS-transclusion" target="_blank" rel="external">彻底弄懂AngularJS中的transclusion</a>）。</html></body></p>
<h3 id="2、ng-repeat"><a href="#2、ng-repeat" class="headerlink" title="2、ng-repeat"></a>2、<code>ng-repeat</code></h3><p>ng-repeat会遍历所指定的对象，然后多次实例化所在的元素，用法就和PHP中的for-in一样，只是少了for，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">            &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>而且，它还可以进行键值对访问，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photos&quot; &gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;(key, info) in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">        &lt;span&gt;&#123;&#123;key&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>在使用<code>ng-repeat</code>时，需要注意的是，它会多次实例化模板，每个模板都会创建一个属于它自己的<code>scope</code>。</p>
<p>在使用ng-repeat时，我们需要获取当前repeate的元素是第几个，这个时候我们就会用到里面的一个特殊变量<code>$index</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photos&quot; &gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">        &lt;span&gt;&#123;&#123;$Index&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>当使用<code>ng-repeat</code>时，有时候会涉及到嵌套，这个时候，我们就需要借助<code>ng-init</code>指令一起使用了，如下我曾经使用过的一种情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;row&quot; style=&quot;height:400px&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot; ng-repeat=&quot;data in dataList&quot; ng-init=&quot;pIndex=$index&quot;&gt;</div><div class="line">        &lt;div class=&quot;well&quot;&gt;</div><div class="line">            &lt;h5 class=&quot;text-center text-theme&quot;&gt;&#123;&#123;data.title&#125;&#125;&lt;/h5&gt;</div><div class="line">            &lt;div style=&quot;overflow: auto; border-bottom: 1px dashed red; margin-bottom: 10px;&quot;&gt;</div><div class="line">                &lt;div ng-repeat=&quot;item in data.itemList&quot; style=&quot;border-top: 1px dashed #aaa; padding-bottom: 10px&quot;&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot;</div><div class="line">                           ng-click=&quot;selectItem(item, pIndex)&quot;</div><div class="line">                           ng-checked=&quot;item.item_status == 2&quot;</div><div class="line">                           ng-model=&quot;checked[item.project_module_item_id]&quot;</div><div class="line">                    &gt;</div><div class="line">                    &lt;div ng-repeat=&quot;msg in item.item_detail | splitArr&quot;&gt;</div><div class="line">                        &lt;p&gt;&#123;&#123;$index+1&#125;&#125;. &#123;&#123;msg&#125;&#125;&lt;/p&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;p class=&quot;text-right&quot;&gt;</div><div class="line">                        &lt;span class=&quot;text-theme&quot;&gt;&#123;&#123;item.time&#125;&#125;&lt;/span&gt;</div><div class="line">                    &lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>还有一些更详细的知识，请参考官方文档<a href="https://docs.angularjs.org/api/ng/directive/ngRepeat" target="_blank" rel="external">ngRepeat</a></p>
<h3 id="3、-watch监听数据变化"><a href="#3、-watch监听数据变化" class="headerlink" title="3、$watch监听数据变化"></a>3、$watch监听数据变化</h3><p>这个功能，我们在实时搜索时会用到，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$scope.$watch(&apos;name&apos;, function () &#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当监听的是一个对象的时，你想监听到这个对象每个属性的变化时，上面就会有问题，这个时候，需要传递第三个参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$scope.$watch(&apos;person&apos;, function () &#123;</div><div class="line">&#125;, true);</div></pre></td></tr></table></figure>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>1、我们搭建开发环境时，尽量使用npm或bower进行集成式搭建，这样易于安装和管理。</p>
<p>2、简单罗列一些我们讲到的指令，也是经常用到的指令：</p>
<ul>
<li>ng-app（指定应用的模块名，与angular.module一起使用）</li>
<li>ng-controller（指定了一个控制器，一个作用域范围，MVC）</li>
<li>$http（http请求，$http.get、$http.post来请求数据）</li>
<li>$scope （作用域）</li>
<li>ng-model （双向绑定）</li>
<li>ng-repeat （ng-init来操作嵌套循环)</li>
<li>ng-if &amp; ng-show &amp; ng-hide (ng-if会删除或创建dom，ng-show和ng-hide将元素的display设置为none来实现）</li>
<li>ng-style &amp; ng-class（ng中设置样式用的，ng-style传一个对象，ng-class传多个样式类，还可以通过true和false来开启关闭）</li>
<li>ng-click（点击事件）</li>
<li>$watch（监听属性变量的变化）</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.angularjs.org/tutorial/" target="_blank" rel="external">angular tutorial</a></p>
<p><a href="http://www.apjs.net/#dir31" target="_blank" rel="external">angular 中文入门教程</a></p>
<p><a href="http://www.alloyteam.com/2015/06/kuai-su-da-jian-jing-tai-fu-wu-qi-di-ji-zhong-fang-fa/" target="_blank" rel="external">快速搭建静态服务器的几种方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular使用了应该有一个月了，一直想总结来着，但是比较懒，所以一直拖着。这次正好趁着分享，写一篇相关内容的文章，来总结下Angular的基本使用和常用指令。本来打算写的是入门教程，发现入门教程怎么写都感觉不如官网，所以放弃了，可以把这一篇当做入门教程的补充版。如果大家要看入门教程可以看官方的&lt;a href=&quot;https://docs.angularjs.org/tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angular tutorial&lt;/a&gt;，中文版的话1.5版本的没找到，大家可以看&lt;code&gt;angular 1.4&lt;/code&gt;的&lt;a href=&quot;http://www.apjs.net/#dir31&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angular 教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里以一个简单的图片列表应用为demo，查看效果可以点击：&lt;a href=&quot;http://www.liuchungui.com/example/angularExample/01/&quot;&gt;http://www.liuchungui.com/example/angularExample/01/&lt;/a&gt;查看，github地址是&lt;a href=&quot;https://github.com/liuchungui/angularExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angularExample 01&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="angular" scheme="http://www.liuchungui.com/categories/angular/"/>
    
    
      <category term="angular, angular 常用指令, angular 使用" scheme="http://www.liuchungui.com/tags/angular-angular-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-angular-%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="http://www.liuchungui.com/2016/08/09/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.liuchungui.com/2016/08/09/搭建Hexo博客/</id>
    <published>2016-08-08T17:04:57.000Z</published>
    <updated>2016-10-03T09:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>修改记录：</p>
<ul>
<li>2016-08-09 发布</li>
<li>2016-10-3 添加常用命令</li>
</ul>
<p>前段时间看到唐巧大大将博客从Octopress迁移到了Hexo，当时顿觉新奇，在本地搭建了下hexo。发现搭建起来确实简单方便，而且npm的安装方式也特别顺手，当然这是因为开发<code>react-native</code>久了就有这么个感觉。不过，当时只是在本地搭建了，并没有什么其他想法。但是，不久之后，硬盘被锁，无力回天，只能施展重装系统大法才解决。但是，此法有一后遗症，那就是电脑上的软件都没有了，博客系统也没有了。<br><a id="more"></a></p>
<p>至此之后，耽搁了一段时间没有写博客，最近想捡回来，重装了Octopress之后发现评论、百度SEO不见了，不想折腾Octopress，随之换了个Hexo试试，下面是一篇简单总结。</p>
<h2 id="一、安装Hexo"><a href="#一、安装Hexo" class="headerlink" title="一、安装Hexo"></a>一、安装Hexo</h2><p>Hexo的安装主要参考Hexo的官方文档<a href="https://hexo.io/zh-cn" target="_blank" rel="external">https://hexo.io/zh-cn</a>，这里只列出简单的安装方式。</p>
<p>在安装<code>Hexo</code>之前，你需要首先安装<code>Node.js</code>，这我们可以不翻墙到<a href="http://nodejs.cn/" target="_blank" rel="external">http://nodejs.cn/</a>下载。</p>
<p>安装完<code>node.js</code>之后，使用下面命令全局安装<code>Hexo</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>到此，我们安装好了<code>Hexo</code>，之后我们开始搭建博客。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#初始化博客</div><div class="line">hexo init myblog</div><div class="line">cd myblog</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>安装完这一切之后，我们就可以查看<code>Hexo</code>效果了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>在浏览器里面输入<code>localhost:4000</code>，我们就看到了效果。这样，Hexo就安装好了，是不是很简单？</p>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Hexo安装之后，我们当然要做一些配置，这一步特别简单，只需要在<code>myblog</code>目录下编辑<code>_config.yml</code>文件，修改下相关配置就行了。这里，我只列出修改的选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: 刘春桂的博客 #博客的标题</div><div class="line">author: liuchungui #博客的作者</div><div class="line">language: zh-CN #博客的语言，zh-CN代表中文</div><div class="line"></div><div class="line"># URL</div><div class="line">url: http://www.liuchungui.com #博客域名</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :year-:month-:day-:title.md #新建博客时的命名方式</div><div class="line">highlight:</div><div class="line">  auto_detect: false #是否自动检测代码高亮</div><div class="line"></div><div class="line"># Pagination</div><div class="line">per_page: 20 #每一页20条博客</div><div class="line"></div><div class="line"># Extensions</div><div class="line">theme: landscape #主题</div></pre></td></tr></table></figure>
<h2 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h2><h3 id="1、安装主题"><a href="#1、安装主题" class="headerlink" title="1、安装主题"></a>1、安装主题</h3><p>如果你觉得默认的主题不符合胃口，可以到<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>找一个你喜欢的。主题找来找去，我最后选择了<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">maupassant</a>这个主题，感觉它非常的简洁美观。</p>
<p>按照<code>maupassant</code>作者的一篇博客<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">大道至简——Hexo简洁主题推荐</a>进行了安装，步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#将主题安装到themes/maupassant目录下</div><div class="line">$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line">$ npm install hexo-renderer-jade --save</div><div class="line">$ npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure>
<p>需要注意的是，安装上面的内容是在<code>myblog</code>目录下进行的。</p>
<p>在<code>npm install hexo-renderer-sass --save</code>安装时，我失败了，然后使用<code>cnpm</code>进行了安装就没有了问题。</p>
<p>安装好之后，在<code>themes</code>目录下多了个<code>maupassant</code>，然后我们编辑<code>Hexo的配置文件_config.yml</code>，将<code>theme</code>的值改为<code>maupassant</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: maupassant</div><div class="line"># theme: landscape</div></pre></td></tr></table></figure>
<p>注：Hexo的配置文件和主题的配置文件名字都是_config.yml，我们需要区别开来。下面我称主题的配置文件为<code>maupassant的_config.yml</code>。</p>
<p>安装好这一切之后，我们使用<code>hexo server</code>开启服务器，刷新本地的页面，我们就看到了简洁的博客页面出现我们眼前。</p>
<h3 id="2、修改主题配置"><a href="#2、修改主题配置" class="headerlink" title="2、修改主题配置"></a>2、修改主题配置</h3><p>整个主题，有些东西我觉得它还不够简洁，于是我在maupassant的_config.yml文件中注释了一些东西，去掉了菜单的<code>about</code>和<code>rss</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  - page: home</div><div class="line">    directory: .</div><div class="line">    icon: fa-home</div><div class="line">  - page: archive</div><div class="line">    directory: archives/</div><div class="line">    icon: fa-archive</div><div class="line">  # - page: about #去掉about页面</div><div class="line">  #   directory: about/</div><div class="line">  #   icon: fa-user</div><div class="line">  # - page: rss #去掉rss页面</div><div class="line">  #   directory: atom.xml</div><div class="line">  #   icon: fa-rss</div></pre></td></tr></table></figure>
<p>关闭<code>友情链接</code>和<code>tag</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">widgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, rencent_comments and links.</div><div class="line">  - search</div><div class="line">  - category</div><div class="line">  # - tag #去掉tag</div><div class="line">  - recent_posts</div><div class="line">  - recent_comments</div><div class="line">  # - links #关闭友情链接</div></pre></td></tr></table></figure>
<p>加上多说评论和百度统计</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">duoshuo: liuchungui</div><div class="line">baidu_analytics: ## Your Baidu Analytics tracking id, e.g. 8006843039519956000</div></pre></td></tr></table></figure>
<p>之后，主题就看起来简洁多了。</p>
<h2 id="三、将Octopress迁移到Hexo"><a href="#三、将Octopress迁移到Hexo" class="headerlink" title="三、将Octopress迁移到Hexo"></a>三、将Octopress迁移到Hexo</h2><p>迁移这个非常简单，将以前Octopress博客中<code>source/_posts</code>目录下的所有markdown文件复制到Hexo目录下的<code>source/_posts</code>就行了。</p>
<p>不过，在迁移中就说说碰到的一些问题：</p>
<ol>
<li>在有一篇博客中英文太长导致不换行，然后出现了排列不是特别好看，这里我的解决的办法是修改maupassant主题下的css/style.scss文件中<code>.post-content</code>样式的<code>text-align</code>样式，将<code>justify</code>改成<code>left</code>就行了</li>
<li>对html写的table适配的不是特别好，会出现一大片空白，问题见<a href="https://github.com/hexojs/hexo/issues/1388" target="_blank" rel="external">https://github.com/hexojs/hexo/issues/1388</a>。暂时没有什么解决的办法，最后是将表格截了一张图放在上面显示。</li>
<li><code>#</code>后面没有空格，导致标示标题的<code>#</code>出现文中，最后将整个博客调了一遍，改成<code>## + 空格 + 标题</code>的方式。</li>
<li>三个反引号里面放一段代码时，由于结尾的反引号后面有空格，导致代码和正文排版混乱。最后删除了空格，就没什么问题了。</li>
</ol>
<h2 id="四、发布博客"><a href="#四、发布博客" class="headerlink" title="四、发布博客"></a>四、发布博客</h2><p>安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后修改Hexo中的配置，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git #git的方式部署博客</div><div class="line">  repo: git@github.com:liuchungui/liuchungui.github.io.git #博客仓库地址</div><div class="line">  branch: master #存储在master分支下</div></pre></td></tr></table></figure>
<p>最后，我们将博客上传到github上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#生成博客网页文件</div><div class="line">$ hexo generate</div><div class="line">#部署</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>注：如果我们是使用<code>github page</code>服务，注意在public文件中加上对应的<code>CNAME</code>文件。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#新建一个博客</div><div class="line">$ hexo init [folder]</div><div class="line">#新建一篇文章</div><div class="line">$ hexo new [layout] &lt;title&gt;</div><div class="line">#生成静态文件</div><div class="line">$ hexo generate</div><div class="line">#启动服务器</div><div class="line">$ hexo server</div><div class="line">#部署到博客</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/commands.html</a></p>
<p><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">大道至简——Hexo简洁主题推荐</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修改记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016-08-09 发布&lt;/li&gt;
&lt;li&gt;2016-10-3 添加常用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前段时间看到唐巧大大将博客从Octopress迁移到了Hexo，当时顿觉新奇，在本地搭建了下hexo。发现搭建起来确实简单方便，而且npm的安装方式也特别顺手，当然这是因为开发&lt;code&gt;react-native&lt;/code&gt;久了就有这么个感觉。不过，当时只是在本地搭建了，并没有什么其他想法。但是，不久之后，硬盘被锁，无力回天，只能施展重装系统大法才解决。但是，此法有一后遗症，那就是电脑上的软件都没有了，博客系统也没有了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo, Octopress, 博客, Hexo安装, Hexo搭建" scheme="http://www.liuchungui.com/tags/Hexo-Octopress-%E5%8D%9A%E5%AE%A2-Hexo%E5%AE%89%E8%A3%85-Hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发总结</title>
    <link href="http://www.liuchungui.com/2016/08/01/wei-xin-gong-zhong-hao-kai-fa-zong-jie/"/>
    <id>http://www.liuchungui.com/2016/08/01/wei-xin-gong-zhong-hao-kai-fa-zong-jie/</id>
    <published>2016-08-01T03:51:36.000Z</published>
    <updated>2016-08-04T16:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司准备在微信公众号上做个东西，所以研究了一周的微信公众号开发，今天在这里做一个总结。<br>在总结之前，先说一下本人使用的环境，语言是PHP，框架是<a href="https://github.com/bcit-ci/CodeIgniter" target="_blank" rel="external">CI</a>和CI框架下的一个RESTFul框架<a href="https://github.com/chriskacerguis/codeigniter-restserver" target="_blank" rel="external">codeigniter-restserver</a>。</p>
<a id="more"></a>
<h2 id="一、配置服务器"><a href="#一、配置服务器" class="headerlink" title="一、配置服务器"></a>一、配置服务器</h2><p>在开发之前，我们首先需要在微信公众号下设置服务器配置，这里完全可以参考官方的<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">接入指南</a>。<br>需要说明两点的是：</p>
<ol>
<li>我们只能填写一个URL（服务器地址），当微信服务器想要发送消息给我们服务器，只能通过这个URL来进行交互。</li>
<li>我们在接入的时候，有个验证消息是否来自微信服务器的过程，这个验证过程是GET请求，我们需要输出echostr，验证代码如下：</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 检查消息是否来自微信</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check_from_wx</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//检查$_GET中的参数</span></div><div class="line">    param_check($_GET, [<span class="string">'signature'</span>, <span class="string">'timestamp'</span>, <span class="string">'nonce'</span>]);</div><div class="line"></div><div class="line">    <span class="comment">//获取参数</span></div><div class="line">    $signature = $_GET[<span class="string">"signature"</span>];</div><div class="line">    $timestamp = $_GET[<span class="string">"timestamp"</span>];</div><div class="line">    $nonce = $_GET[<span class="string">"nonce"</span>];</div><div class="line"></div><div class="line">    $token = WX_APP_TOKEN;</div><div class="line">    $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</div><div class="line">    <span class="comment">// use SORT_STRING rule</span></div><div class="line">    sort($tmpArr, SORT_STRING);</div><div class="line">    $tmpStr = implode($tmpArr);</div><div class="line">    $tmpStr = sha1($tmpStr);</div><div class="line">    </div><div class="line">    <span class="comment">//验证</span></div><div class="line">    <span class="keyword">if</span>($tmpStr == $signature) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 配合微信服务器验证是否有效</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_get</span><span class="params">()</span> </span>&#123;</div><div class="line">    $echoStr = <span class="keyword">$this</span>-&gt;get(<span class="string">"echostr"</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check_from_wx()) &#123;</div><div class="line">       <span class="keyword">echo</span> $echoStr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"验证不通过"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到上面的代码，你也许会有疑问，为什么在<code>check_get</code>方法中使用<code>$this-&gt;get</code>获取get参数，而在<code>check_from_wx</code>方法中使用的是<code>$_GET</code>。这是因为我们后面接收的消息是微信服务器向我们发送POST请求，但是验证的参数却是放在URL后面，所以为了兼容，专门封装了一个<code>check_from_wx</code>的私有方法。</p>
<p>到这里，我们算是配置好了，下面我们来看看如何接收和回复用户发来的消息。</p>
<h2 id="二、接收消息和回复消息"><a href="#二、接收消息和回复消息" class="headerlink" title="二、接收消息和回复消息"></a>二、接收消息和回复消息</h2><p>接收和回复消息的流程图大概就是这样的：<br><img src="http://ww4.sinaimg.cn/large/7746cd07jw1f66f138zo1j218q0imacd.jpg" alt=""><br>看上面的流程图，我们可以把整个接收和回复消息分成四个步骤：</p>
<ul>
<li>第一步：用户在微信公众号内发送一条消息，微信客户端将这条消息发送给微信服务器。</li>
<li>第二步：微信服务器将消息以POST方式将消息提交给我们服务器，而这个服务器的地址只有一个，就是我们前面配置服务器填写的URL地址。消息的数据格式是XML格式的。    </li>
<li>第三步：我们收到这个消息之后，做出对应的回复，返回对应的XML数据，就算是进行回复了。</li>
<li>第四步：微信服务器将我们服务器的消息返回给微信客户端，这样用户就看到了我们回复的消息了。</li>
</ul>
<p>看了上面的消息接收和回复流程图，我们下面使用代码进行实现。在配置服务器的时候，我先前填写的URL地址对应的接口是<code>check</code>，所以接收消息的PHP代码这么写：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * 检查消息是否来自微信</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> bool</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check_from_wx</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">//检查$_GET中的参数</span></div><div class="line">     param_check($_GET, [<span class="string">'signature'</span>, <span class="string">'timestamp'</span>, <span class="string">'nonce'</span>]);</div><div class="line"></div><div class="line">     <span class="comment">//获取参数</span></div><div class="line">     $signature = $_GET[<span class="string">"signature"</span>];</div><div class="line">     $timestamp = $_GET[<span class="string">"timestamp"</span>];</div><div class="line">     $nonce = $_GET[<span class="string">"nonce"</span>];</div><div class="line"></div><div class="line">     $token = WX_APP_TOKEN;</div><div class="line">     $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</div><div class="line">     <span class="comment">// use SORT_STRING rule</span></div><div class="line">     sort($tmpArr, SORT_STRING);</div><div class="line">     $tmpStr = implode($tmpArr);</div><div class="line">     $tmpStr = sha1($tmpStr);</div><div class="line">     </div><div class="line">     <span class="comment">//验证</span></div><div class="line">     <span class="keyword">if</span>($tmpStr == $signature) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_post</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">//检查消息是否来自微信</span></div><div class="line">     <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;check_from_wx()) &#123;</div><div class="line">         <span class="comment">//非法</span></div><div class="line">         <span class="keyword">echo</span> <span class="string">"非法操作"</span>;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="comment">//获取POST参数</span></div><div class="line">     $param = file_get_contents(<span class="string">"php://input"</span>);</div><div class="line">     <span class="comment">//将xml格式中的数据读取成数组</span></div><div class="line">     $param = <span class="keyword">$this</span>-&gt;format-&gt;factory($param, <span class="string">'xml'</span>)-&gt;to_array();</div><div class="line"></div><div class="line">     <span class="comment">//将消息插入by_message表中</span></div><div class="line">     $result = <span class="keyword">$this</span>-&gt;share_model-&gt;insert($msg_info, <span class="string">'by_message'</span>);</div><div class="line">     </div><div class="line">     <span class="comment">//回复空字符串</span></div><div class="line">     <span class="keyword">echo</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  上面代码值得注意有三个地方，第一个地方是我们检查消息是否来自微信，是获取<code>$_GET</code>中的参数；第二个地方是我们不能使用<code>$_POST</code>和<code>$this-&gt;post</code>来获取post参数，只能使用<code>file_get_contents(&quot;php://input&quot;)</code>来获取；第三个地方是当我们没有消息回复的时候，回复<code>success和空字符串</code>就代表交互成功，否则用户就会看到<code>该公众号暂时无法提供服务</code>。</p>
<p>  当写好代码之后，我们在微信公众号中发送消息，它就会将消息存入到<code>by_message</code>表中，我们就可以进行查看。如果出现<code>该公众号暂时无法提供服务</code>，那就可能我们服务器出错误了，可以开启日志功能，使用<code>log_message</code>输出日志进行调试。</p>
<p> 当接收消息没问题之后，我们就可以进行回复消息了，代码如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_post</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//检查消息是否来自微信</span></div><div class="line">    <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;check_from_wx()) &#123;</div><div class="line">        <span class="comment">//非法</span></div><div class="line">        <span class="keyword">echo</span> <span class="string">"非法操作"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取POST参数</span></div><div class="line">    $param = file_get_contents(<span class="string">"php://input"</span>);</div><div class="line">    <span class="comment">//获取xml中的数据</span></div><div class="line">    $param = <span class="keyword">$this</span>-&gt;format-&gt;factory($param, <span class="string">'xml'</span>)-&gt;to_array();</div><div class="line"></div><div class="line">    <span class="comment">//选出参数</span></div><div class="line">    $msg_info = array_choose($param, [<span class="string">'Content'</span>, <span class="string">'ToUserName'</span>, <span class="string">'FromUserName'</span>, <span class="string">'MsgId'</span>, <span class="string">'MsgType'</span>]);</div><div class="line">    <span class="comment">//将消息插入数据库</span></div><div class="line">    $result = <span class="keyword">$this</span>-&gt;share_model-&gt;insert($msg_info, <span class="string">'by_message'</span>);</div><div class="line"></div><div class="line">    <span class="comment">//获取信息</span></div><div class="line">    $to_user = $param[<span class="string">'ToUserName'</span>];</div><div class="line">    $from_user = $param[<span class="string">'FromUserName'</span>];</div><div class="line">    $content = $param[<span class="string">'Content'</span>];</div><div class="line"></div><div class="line">    <span class="comment">//去掉消息id</span></div><div class="line">    <span class="keyword">unset</span>($param[<span class="string">'MsgId'</span>]);</div><div class="line"></div><div class="line">    <span class="comment">//回复的内容</span></div><div class="line">    $content = <span class="string">'http://xxxxxx.com/'</span>;</div><div class="line">    $response_text = <span class="string">"&lt;xml&gt;</span></div><div class="line"><span class="string">                        &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;</span></div><div class="line"><span class="string">                        &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;</span></div><div class="line"><span class="string">                        &lt;CreateTime&gt;%s&lt;/CreateTime&gt;</span></div><div class="line"><span class="string">                        &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;</span></div><div class="line"><span class="string">                        &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;</span></div><div class="line"><span class="string">                      &lt;/xml&gt;"</span>;</div><div class="line">    $response_text = sprintf($response_text, $from_user, $to_user, time(), $param[<span class="string">'MsgType'</span>], $content);</div><div class="line">    <span class="keyword">echo</span> $response_text;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置好之后，我们在微信公众输入字符，它就会回复<code>http://xxxxxx.com/</code>。</p>
<p>上面代码需要注意的是，我们回复消息的时候，返回的数据格式是<code>xml格式</code>的，而且对格式有严格要求。我前面使用框架中的<code>format类</code>生成xml的数据是无法被微信读取的，所以建议和我上面一样的写法。</p>
<p>还有，上面回复的消息是文本消息，我们还可以回复图片、图文、语音、视频、音乐等消息，其实它们都大体相同，查看官方的文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140543&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">被动回复用户消息</a>这一节，按照对应的格式进行回复就行了。</p>
<p>到这一步的时候，是不是很有成就感？其实，这还是很小的一步，微信开发还有很多的内容，就消息管理这部分来说，它就分接收和发送消息两大类。    </p>
<p>其中，接收消息有两种：        </p>
<ul>
<li>第一种：接收普通消息，它是微信用户向公众号发送的消息，我们上面说的就是接收普通消息。</li>
<li>第二种：接收事件消息，它是微信用户在微信公众号里面交互过程中产生的事件消息，例如关注/取消事件、扫描带参数二维码等等。具体可以接收哪些事件消息，就去查询微信的开发文档吧。接收事件消息说起来很高端的样子，其实它和普通消息差不多，整个接收和回复流程和上面一样，只是有的事件消息是不允许我们回复用户的。</li>
</ul>
<p>而发送消息就有被动<code>回复消息</code>、<code>客服消息</code>、<code>群发消息</code>、<code>模板消息</code>四种，其中这四种我又把它分成两小类，被动回复消息算是一类，我们前面实现对用户消息的回复就算是这一类；另外三种我将它们归类为主动发送消息，与被动回复消息不同的是，它会被微信主动推送给用户，流程大概如下图：</p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07jw1f66jvxhdfij20nx07uaaf.jpg" alt=""></p>
<p>了解了流程之后，我们下面来实现模板消息的发送。</p>
<h2 id="三、发送模板消息"><a href="#三、发送模板消息" class="headerlink" title="三、发送模板消息"></a>三、发送模板消息</h2><p>模板消息可以定制，而且发送模板消息后，微信会主动推送给用户，这是我们开发很需要的一个功能。（注：模板消息只有认证后的服务号才可以使用）。</p>
<p>首先，我们在微信公众平台的<code>功能-&gt;添加功能插件</code>处添加这个功能，进入模板消息页面，从模板库中添加一个模板消息，获取到模板ID。当然，我们也可以创建一个符号自己业务的模板消息，进行定制（这个需要申请）。</p>
<p>然后，我们对应着模板详情的数据格式，写一个接口专门用来发送模板消息。</p>
<p>下面是模板详情：</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f658hkxak6j20iu0kb75u.jpg" alt=""></p>
<p>对应上面的模板消息，我们的接口这么写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 发送模板消息</div><div class="line">     */</div><div class="line">    public function send_template_message_get() &#123;</div><div class="line">        //检查参数</div><div class="line">        param_check($this-&gt;get(), [&apos;uid&apos;]);</div><div class="line">        $uid = $this-&gt;get(&apos;uid&apos;);</div><div class="line"></div><div class="line">        //wx appid</div><div class="line">        $wx_app_id = WX_APP_ID;</div><div class="line">        $wx_app_secret = WX_APP_SECRET;</div><div class="line"></div><div class="line">        //get access token</div><div class="line">        $token_info = file_get_contents(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$wx_app_id&amp;secret=$wx_app_secret&quot;);</div><div class="line">        $token_info = json_decode($token_info, true);</div><div class="line">        $access_token = $token_info[&apos;access_token&apos;];</div><div class="line"></div><div class="line">        //获取用户信息</div><div class="line">        $openid = $this-&gt;user_model-&gt;get_value(&apos;openid&apos;, $uid);</div><div class="line"></div><div class="line">        //组织参数</div><div class="line">        $param = array(</div><div class="line">            &quot;touser&quot; =&gt; $openid,</div><div class="line">            &quot;template_id&quot; =&gt; &quot;jt_Rl5X9QWXMiRihrQz67n4riGt3kaPA81Zku0wLm9M&quot;,</div><div class="line">            &quot;url&quot; =&gt; &quot;http://www.beyondwinlaw.com/test/wx/test/home.html&quot;,</div><div class="line">            &quot;data&quot; =&gt; [</div><div class="line">                &quot;first&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;案件有新进展&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword1&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword2&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword3&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword4&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;2016-07-12 11:11:11&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword5&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;remark&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;点击查看案件进度详情&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ]</div><div class="line">            ]</div><div class="line">        );</div><div class="line"></div><div class="line">        //发送请求</div><div class="line">        $url = &quot;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=$access_token&quot;;</div><div class="line">        $result = send_post($url, $param);</div><div class="line">        answer([</div><div class="line">            &quot;result&quot; =&gt; $result</div><div class="line">        ]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>效果是这样的：</p>
<p align="center"><br>  <img src="http://ww3.sinaimg.cn/mw690/7746cd07jw1f65905jwfbj20mq10iq75.jpg" height="554" width="345"><br></p>

<p>这样，我们就实现了模板消息的发送，至于客服消息、群发接口，原理差不多，因为我没实现过，这里就不多说了。</p>
<h2 id="四、网页授权，获取用户信息"><a href="#四、网页授权，获取用户信息" class="headerlink" title="四、网页授权，获取用户信息"></a>四、网页授权，获取用户信息</h2><p>微信采用的是OAuth对开发者进行授权的，具体OAuth授权原理请google查询。在开发之前，我们需要先到公众平台官网中的<code>开发-接口权限-网页服务-网页授权获取用户基本信息</code>的配置选项中，修改授权回调域名。</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f65ggry50ij20y20dimyr.jpg" alt=""></p>
<p>整个授权过程，其实微信官方已经说的很清楚了。我这里简略说一下，算是总结下吧！</p>
<p>首先，我们需要获取access_token，它的时序图和微信开放平台类似，如下：<br><img src="http://ww1.sinaimg.cn/mw690/7746cd07jw1f68rcxtd2lj21020fu40c.jpg" alt=""></p>
<p>这整个过程是当用户要登录我们的网站时，我们带上回调地址、AppId、scope等参数跳转到微信授权页面；然后获得用户的同意之后，它会跳转到我们的回调地址，并带上code参数；最后我们通过code、AppId、AppSecret请求接口，获取access_token。</p>
<p>之后，我们通过access_token请求对应的接口，就可以获取用户的基本信息了。</p>
<p>需要注意地方有两个：</p>
<ol>
<li>我们的回调地址需要进行encodeURL，否则可能回调地址中url后面的参数会丢失。</li>
<li>我们的回调地址的域名必须是前面配置的域名。</li>
</ol>
<p>具体的实现细节，根据官方文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">微信网页授权</a>和<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">网站应用微信登录开发指南</a>的步骤来就行了。</p>
<h2 id="五、JS-SDK的使用"><a href="#五、JS-SDK的使用" class="headerlink" title="五、JS-SDK的使用"></a>五、JS-SDK的使用</h2><p>在我们要做的产品中，我们希望能够控制每个页面分享的链接，而JS-SDK就可以做到这一切。<br>它的使用步骤可以查阅<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">微信JS-SDK说明文档</a>这个文档，而且在网页最后还有对应的<a href="http://demo.open.weixin.qq.com/jssdk" target="_blank" rel="external">DEMO页面</a>和<a href="http://demo.open.weixin.qq.com/jssdk/sample.zip" target="_blank" rel="external">示例代码</a>。</p>
<p>我们的实现是这样的，在前端专门写了一个JS文件<code>wx_share.js</code>，这个JS文件中将当前的url传给后台，请求后台的数据对JS-SDK进行配置。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server_url = <span class="string">"http://192.168.30.249/by/wx_api/index.php/share/wx_config"</span>;</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">window</span>.location.href;</div><div class="line"></div><div class="line"><span class="comment">//配置微信</span></div><div class="line">$.ajax(&#123;</div><div class="line">    type: <span class="string">"GET"</span>,</div><div class="line">    url: server_url,</div><div class="line">    data: &#123;</div><div class="line">        url: <span class="built_in">encodeURI</span>(url)</div><div class="line">    &#125;,</div><div class="line">    dataType: <span class="string">"json"</span>,</div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="comment">// alert('请求分享配置数据成功');</span></div><div class="line">        wx.config(&#123;</div><div class="line">            debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class="line">            appId: data.data.appId, <span class="comment">// 必填，公众号的唯一标识</span></div><div class="line">            timestamp: data.data.timestamp, <span class="comment">// 必填，生成签名的时间戳</span></div><div class="line">            nonceStr: data.data.nonceStr, <span class="comment">// 必填，生成签名的随机串</span></div><div class="line">            signature: data.data.signature,<span class="comment">// 必填，签名，见附录1</span></div><div class="line">            jsApiList: [<span class="string">'onMenuShareAppMessage'</span>, <span class="string">'onMenuShareTimeline'</span>] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class="line">        &#125;);</div><div class="line">        wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// alert("分享验证完毕");</span></div><div class="line">        &#125;);</div><div class="line">        wx.error(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// alert("分享验证失败");</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//获取uid和link_id</span></div><div class="line">        <span class="keyword">var</span> uid = localStorage.getItem(<span class="string">"uid"</span>);</div><div class="line">        <span class="keyword">var</span> linkId = localStorage.getItem(<span class="string">"link_id"</span>);</div><div class="line">        <span class="keyword">var</span> shareUrl = <span class="string">"http://www.baidu.com"</span>;</div><div class="line">        <span class="comment">//存在linkId, 则分享带上link_id等参数</span></div><div class="line">        <span class="keyword">if</span>(linkId != <span class="literal">undefined</span> &amp;&amp; linkId != <span class="string">""</span> &amp;&amp; linkId != <span class="literal">null</span>) &#123;</div><div class="line">          shareUrl = shareUrl + <span class="string">"?super_id="</span> + uid + <span class="string">"&amp;link_id="</span> + linkId;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// alert("分享链接: "+shareUrl);</span></div><div class="line"></div><div class="line">        wx.onMenuShareAppMessage(&#123;</div><div class="line">            title: <span class="string">'分享测试'</span>, <span class="comment">// 分享标题</span></div><div class="line">            desc: <span class="string">'测试一下'</span>, <span class="comment">// 分享描述</span></div><div class="line">            link: shareUrl, <span class="comment">// 分享链接</span></div><div class="line">            imgUrl: <span class="string">'http://www.beyondwinlaw.com/gw4/images/zhongjie.jpg'</span>, <span class="comment">// 分享图标</span></div><div class="line">            type: <span class="string">'link'</span>, <span class="comment">// 分享类型,music、video或link，不填默认为link</span></div><div class="line">            dataUrl: <span class="string">''</span>, <span class="comment">// 如果type是music或video，则要提供数据链接，默认为空</span></div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">// 用户确认分享后执行的回调函数</span></div><div class="line">                <span class="comment">// alert("分享成功");</span></div><div class="line">            &#125;,</div><div class="line">            cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">// 用户取消分享后执行的回调函数</span></div><div class="line">                <span class="comment">// alert("取消分享");</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'请求分享配置数据失败'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>而具体JS-SDK权限签名算法的实现是放在后台的，这个实现我是直接使用官方的<code>jssdk</code>的类，只是将它稍微修改了下。<br><code>share.php</code>中<code>wx_config</code>接口实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取微信配置</div><div class="line"> */</div><div class="line">public function wx_config_get() &#123;</div><div class="line">    //获取参数</div><div class="line">    param_check($this-&gt;get(), [&apos;url&apos;]);</div><div class="line">    $url = $this-&gt;get(&apos;url&apos;);</div><div class="line">    $url = urldecode($url);</div><div class="line"></div><div class="line">    $jssdk = new JSSDK(WX_APP_ID, WX_APP_SECRET, $url);</div><div class="line">    $signPackage = $jssdk-&gt;GetSignPackage();</div><div class="line">    answer($signPackage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而修改后的JS-SDK代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">class JSSDK &#123;</div><div class="line">  private $appId;</div><div class="line">  private $appSecret;</div><div class="line">  private $url;</div><div class="line"></div><div class="line">  public function __construct($appId, $appSecret, $url) &#123;</div><div class="line">    $this-&gt;appId = $appId;</div><div class="line">    $this-&gt;appSecret = $appSecret;</div><div class="line">    $this-&gt;url = $url;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public function getSignPackage() &#123;</div><div class="line">    // 注意 URL 一定要动态获取，不能 hardcode.</div><div class="line">//    $protocol = (!empty($_SERVER[&apos;HTTPS&apos;]) &amp;&amp; $_SERVER[&apos;HTTPS&apos;] !== &apos;off&apos; || $_SERVER[&apos;SERVER_PORT&apos;] == 443) ? &quot;https://&quot; : &quot;http://&quot;;</div><div class="line">//    $url = &quot;$protocol$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]&quot;;</div><div class="line">    $url = $this-&gt;url;</div><div class="line"></div><div class="line">    //wx appid</div><div class="line">    $wx_app_id = $this-&gt;appId;</div><div class="line">    $wx_app_secret = $this-&gt;appSecret;</div><div class="line"></div><div class="line">    //get token</div><div class="line">    $token_info = file_get_contents(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$wx_app_id&amp;secret=$wx_app_secret&quot;);</div><div class="line">    $token_info = json_decode($token_info, true);</div><div class="line">    $access_token = $token_info[&apos;access_token&apos;];</div><div class="line"></div><div class="line">    //get ticket</div><div class="line">    $ticket_info = file_get_contents(&quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=$access_token&amp;type=jsapi&quot;);</div><div class="line">    $ticket_info = json_decode($ticket_info, true);</div><div class="line">    $ticket = $ticket_info[&apos;ticket&apos;];</div><div class="line">    </div><div class="line">    //拼接字符串</div><div class="line">    $timestamp = time();</div><div class="line">    $nonceStr = $this-&gt;createNonceStr();</div><div class="line">    // 这里参数的顺序要按照 key 值 ASCII 码升序排序</div><div class="line">    $string = &quot;jsapi_ticket=$ticket&amp;noncestr=$nonceStr&amp;timestamp=$timestamp&amp;url=$url&quot;;</div><div class="line"></div><div class="line">    //使用sha1进行签名</div><div class="line">    $signature = sha1($string);</div><div class="line"></div><div class="line">    $signPackage = array(</div><div class="line">      &quot;appId&quot;     =&gt; $this-&gt;appId,</div><div class="line">      &quot;nonceStr&quot;  =&gt; $nonceStr,</div><div class="line">      &quot;timestamp&quot; =&gt; $timestamp,</div><div class="line">      &quot;url&quot;       =&gt; $url,</div><div class="line">      &quot;signature&quot; =&gt; $signature,</div><div class="line">      &quot;rawString&quot; =&gt; $string</div><div class="line">    );</div><div class="line">    return $signPackage; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private function createNonceStr($length = 16) &#123;</div><div class="line">    $chars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;</div><div class="line">    $str = &quot;&quot;;</div><div class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</div><div class="line">      $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);</div><div class="line">    &#125;</div><div class="line">    return $str;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private function httpGet($url) &#123;</div><div class="line">    $curl = curl_init();</div><div class="line">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);</div><div class="line">    curl_setopt($curl, CURLOPT_TIMEOUT, 500);</div><div class="line">    // 为保证第三方服务器与微信服务器之间数据传输的安全性，所有微信接口采用https方式调用，必须使用下面2行代码打开ssl安全校验。</div><div class="line">    // 如果在部署过程中代码在此处验证失败，请到 http://curl.haxx.se/ca/cacert.pem 下载新的证书判别文件。</div><div class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);</div><div class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, true);</div><div class="line">    curl_setopt($curl, CURLOPT_URL, $url);</div><div class="line"></div><div class="line">    $res = curl_exec($curl);</div><div class="line">    curl_close($curl);</div><div class="line"></div><div class="line">    return $res;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private function get_php_file($filename) &#123;</div><div class="line">    return trim(substr(file_get_contents($filename), 15));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要说明一下的是，这里我只是测试功能的实现，<code>获取access_token</code>是直接通过接口实时进行获取的。如果是在生产环境，还请参考官方的<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">获取access_token</a>。</p>
<p>在这里我碰到一个问题，耽搁了挺久的时间。那就是前面我按照官方文档自己写的签名算法，然后各种配置不成功。后来下载了官方的demo，发现官方文档jssdk没有问题，然后将自己的签名算法放入官方的jssdk中，也没有问题。因为官方文档是前后端放在一块的，所以总感觉url不对，但是对<code>url进行encodeURL</code>之后，发现还是不行。最后和小伙伴一起google了之后，<code>将生成数字随机替换成生成字母随机数</code>，然后配置就没问题了。</p>
<p>到这一步，逻辑已经全部实现，只需要在我们对应的页面中引入JS-SDK和wx_share.js文件就行了，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/wx_share.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>成功之后的效果如下：</p>
<p align="center"><br>  <img src="http://ww4.sinaimg.cn/large/7746cd07jw1f6e24s7grrj20ku112q4f.jpg" height="667" width="375"><br></p>

<h2 id="六、自定义菜单"><a href="#六、自定义菜单" class="headerlink" title="六、自定义菜单"></a>六、自定义菜单</h2><p>自定义菜单这个是比较简单的，我们只需要将我们配置数据POST到微信服务器，微信用户进入我们公众号之后，看到界面就变成了我们自定义菜单样式。<br>在这里，我也写了一个接口，用来修改菜单：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 更改微信公众号菜单</span></div><div class="line"><span class="comment">  * <span class="doctag">@note</span> 这个接口在线上是禁止调用的,它只需要更改的时候,调用一次就行了</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">change_menu_get</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">//获取access_token, 需要中控服务器,否则会造成服务不稳定,咱们这里暂时不这么做</span></div><div class="line">     $app_id = WX_APP_ID;</div><div class="line">     $app_secret = WX_APP_SECRET;</div><div class="line">     $content = file_get_contents(<span class="string">"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$app_id&amp;secret=$app_secret"</span>);</div><div class="line">     $info = json_decode($content, <span class="keyword">true</span>);</div><div class="line">     $access_token = $info[<span class="string">'access_token'</span>];</div><div class="line"></div><div class="line">     <span class="comment">//自定义菜单</span></div><div class="line">     $auth_url = <span class="string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid=&#123;$app_id&#125;&amp;redirect_uri=http://www.liuchungui.com/api/wx_api/index.php/share/test&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect"</span>;</div><div class="line"></div><div class="line">     $menu = <span class="keyword">array</span>(</div><div class="line">         <span class="string">"button"</span> =&gt; [</div><div class="line">             [</div><div class="line">                 <span class="string">"type"</span> =&gt; <span class="string">"view"</span>,</div><div class="line">                 <span class="string">"name"</span> =&gt; <span class="string">"合作"</span>,</div><div class="line">                 <span class="string">"url"</span> =&gt; $auth_url</div><div class="line">             ],</div><div class="line">             [</div><div class="line">                 <span class="string">"name"</span> =&gt; <span class="string">"菜单"</span>,</div><div class="line">                 <span class="string">"sub_button"</span> =&gt; [</div><div class="line">                     [</div><div class="line">                         <span class="string">"type"</span> =&gt; <span class="string">"view"</span>,</div><div class="line">                         <span class="string">"name"</span> =&gt; <span class="string">"官网"</span>,</div><div class="line">                         <span class="string">"url"</span> =&gt; <span class="string">"http://www.liuchungui.com/"</span></div><div class="line">                     ],</div><div class="line">                     [</div><div class="line">                         <span class="string">"type"</span> =&gt; <span class="string">"view"</span>,</div><div class="line">                         <span class="string">"name"</span> =&gt; <span class="string">"关于我们"</span>,</div><div class="line">                         <span class="string">"url"</span> =&gt; <span class="string">"http://www.liuchungui.com/about.html"</span></div><div class="line">                     ]</div><div class="line">                 ]</div><div class="line">             ]</div><div class="line">         ]</div><div class="line">     );</div><div class="line"></div><div class="line">     $menu_url = <span class="string">"https://api.weixin.qq.com/cgi-bin/menu/create?access_token=$access_token"</span>;</div><div class="line">     <span class="comment">//发送POST请求</span></div><div class="line">     $result = send_post($menu_url, $menu);</div><div class="line">     $result = json_decode($result, <span class="keyword">true</span>);</div><div class="line">     <span class="comment">//返回数据</span></div><div class="line">     <span class="keyword">if</span>($result[<span class="string">'errcode'</span>] === <span class="number">0</span>) &#123;</div><div class="line">         answer(<span class="keyword">true</span>, <span class="string">'更改菜单'</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         answer(<span class="keyword">false</span>, <span class="string">'更改菜单'</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这个只是创建菜单，其他操作菜单的接口请查阅<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141013&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">自定义菜单</a>。</p>
<p>效果如下：</p>
<p align="center"><br>  <img src="http://ww2.sinaimg.cn/mw690/7746cd07jw1f67s9b3h6hj20ks10c78z.jpg" height="604" width="345"><br></p>

<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>在搜索资料的时候，无意之间找到一个微信公众号开发的框架<a href="https://github.com/overtrue/wechat" target="_blank" rel="external">wechat</a>，star不少，而且看了下开发文档<a href="https://easywechat.org/" target="_blank" rel="external">EasyWechat</a>，讲得比较详细，应该是一个不错的框架，后期准备使用它来进行开发，推荐大家看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司准备在微信公众号上做个东西，所以研究了一周的微信公众号开发，今天在这里做一个总结。&lt;br&gt;在总结之前，先说一下本人使用的环境，语言是PHP，框架是&lt;a href=&quot;https://github.com/bcit-ci/CodeIgniter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CI&lt;/a&gt;和CI框架下的一个RESTFul框架&lt;a href=&quot;https://github.com/chriskacerguis/codeigniter-restserver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codeigniter-restserver&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://www.liuchungui.com/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac10.11升级安装openssl</title>
    <link href="http://www.liuchungui.com/2016/05/10/mac10-dot-11sheng-ji-an-zhuang-openssl/"/>
    <id>http://www.liuchungui.com/2016/05/10/mac10-dot-11sheng-ji-an-zhuang-openssl/</id>
    <published>2016-05-10T12:46:18.000Z</published>
    <updated>2016-08-06T06:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想要升级Mac上的openssl，但是前面没弄成功，所以耽搁到现在。今天由于安装一个软件需要安装openssl到1.0.1版本以上，所以查了下资料，终于升级成功了，也算是还了前面<a href="http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/">自建证书配置HTTPS服务器</a>这篇博客的债。</p>
<a id="more"></a>
<p>首先，来看看我们的openssl的版本和目录</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ openssl version</div><div class="line">OpenSSL 0.9.8zh 14 Jan 2016</div><div class="line"></div><div class="line">$ <span class="built_in">which</span> openssl</div><div class="line">/usr/<span class="built_in">local</span>/bin/openssl</div></pre></td></tr></table></figure>
<p>通过上面的查看，明显我们的版本号太低了，于是google了下，找到了<a href="http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x" target="_blank" rel="external">http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x</a>。</p>
<p>按照上面的步骤，我们首先更新<code>homebrew</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line"></div><div class="line">Error: Cowardly refusing to `sudo brew update`</div><div class="line">You can use brew with sudo, but only if the brew executable is owned by root.</div><div class="line">However, this is both not recommended and completely unsupported so do so at</div><div class="line">your own risk.</div><div class="line">bogon:Downloads user$ brew update</div><div class="line">Error: The /usr/local directory is not writable.</div><div class="line">Even if this directory was writable when you installed Homebrew, other</div><div class="line">software may change permissions on this directory. Some versions of the</div><div class="line">&quot;InstantOn&quot; component of Airfoil or running Cocktail cleanup/optimizations</div><div class="line">are known to do this.</div><div class="line"></div><div class="line">You should probably change the ownership and permissions of /usr/local</div><div class="line">back to your user account.</div><div class="line">  sudo chown -R $(whoami):admin /usr/local</div></pre></td></tr></table></figure>
<p>很不幸，我们在更新的时候遇到了一个错误，好在homebrew有错误提醒，我们按照提醒执行下面命令，继续安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo chown -R $(whoami):admin /usr/local</div><div class="line">$ brew update</div><div class="line">Updated Homebrew from e3986e9 to 21ce7a5.</div><div class="line">==&gt; Migrating Homebrew to v0.9.9</div><div class="line">...</div></pre></td></tr></table></figure>
<p>看到这个信息，就是成功的在更新了，这个过程可能比较久点。更新完之后，我们开始通过homebrew安装openssl。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ brew install openssl</div><div class="line"></div><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/openssl-1.0.2h.el_capitan.b</div><div class="line">######################################################################## 100.0%</div><div class="line">...</div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/openssl/1.0.2h: 1,691 files, 12M</div></pre></td></tr></table></figure>
<p>当最后显示🍺那个标志，说明我们成功的将openssl安装到<code>/usr/local/Cellar/openssl/1.0.2h</code>。</p>
<p>不过，我们还有最后一步，那就是当我们使用openssl时，使用的是我们用homebrew新下载的openssl。为了达到这个目的，我们有两种方法。</p>
<p>第一种：    </p>
<p>将homebrew下载的openssl软链接到/usr/bin/openssl目录下。这里，我们先将它保存一份老的，然后再软链接新下载的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mv /usr/bin/openssl /usr/bin/openssl_old</div><div class="line">mv: rename /usr/bin/openssl to /usr/bin/openssl_old: Operation not permitted</div><div class="line"></div><div class="line">$ ln -s /usr/local/Cellar/openssl/1.0.2h/bin/openssl /usr/bin/openssl</div><div class="line">ln: /usr/bin/openssl: Operation not permitted</div></pre></td></tr></table></figure>
<p><code>Operation not permitted</code>提示没有权限操作，对<code>/usr/bin</code>目录下的东西，我已经遇到过几次这个问题了，于是继续google，在stackoverflow上找到了<a href="http://stackoverflow.com/questions/32659348/operation-not-permitted-when-on-root-el-capitan-rootless-disabled" target="_blank" rel="external">Operation Not Permitted when on root El capitan (rootless disabled)</a>。</p>
<p>重启系统，当启动的时候我们同时按下<code>cmd+r</code>进入Recovery模式，之后选择<code>实用工具</code> =&gt; <code>终端</code>，在终端输入如下命令，接口文件系统的锁定，并且重启电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ csrutil disable</div><div class="line">$ reboot</div></pre></td></tr></table></figure>
<p>最后，我们执行前面两个命令，查看版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mv /usr/bin/openssl /usr/bin/openssl_old</div><div class="line">$ ln -s /usr/local/Cellar/openssl/1.0.2h/bin/openssl /usr/bin/openssl</div><div class="line">$ openssl version</div><div class="line">OpenSSL 1.0.2h  3 May 2016</div></pre></td></tr></table></figure>
<p>这样，我们的openssl升级成功了。不过，为了安全起见，我还是重新启动电脑，然后重新开启了<code>csrutil</code>。</p>
<p>第二种：</p>
<p>在操作完前面一种方法之后，我发现了一个更简单的方式，那就是直接将openssl软链接到<code>/usr/local/bin/openssl</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#如果/usr/local/bin/openssl下存在，则先删除 /usr/local/bin/openssl</div><div class="line">$ rm /usr/local/bin/openssl</div><div class="line"></div><div class="line">#将以前通过homebrew下载的1.0.2e版本的openssl链接到/usr/local/bin/openssl</div><div class="line">$ ln -s /usr/local/Cellar/openssl/1.0.2e/bin/openssl /usr/local/bin/openssl</div><div class="line"></div><div class="line">$ openssl </div><div class="line">OpenSSL 1.0.2e 3 Dec 2015</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要记录了安装openssl过程中遇到的一些问题，同时也知道当如果对<code>/usr/bin</code>类似文件目录无操作权限的时候怎么解锁文件系统。当然，最好是将命令通过ln链接到<code>/usr/local/bin</code>，这个目录下的权限苹果还是开放给我的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想要升级Mac上的openssl，但是前面没弄成功，所以耽搁到现在。今天由于安装一个软件需要安装openssl到1.0.1版本以上，所以查了下资料，终于升级成功了，也算是还了前面&lt;a href=&quot;http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/&quot;&gt;自建证书配置HTTPS服务器&lt;/a&gt;这篇博客的债。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://www.liuchungui.com/categories/Mac/"/>
    
    
      <category term="Mac10.11, openssl, openssl 安装, Mac10.11 openssl, Mac10.11 openssl 安装, Mac10.11 openssl 安装升级, Mac openssl 安装, Mac openssl 升级, Mac10.11 openssl 升级, Mac openssl 安装升级" scheme="http://www.liuchungui.com/tags/Mac10-11-openssl-openssl-%E5%AE%89%E8%A3%85-Mac10-11-openssl-Mac10-11-openssl-%E5%AE%89%E8%A3%85-Mac10-11-openssl-%E5%AE%89%E8%A3%85%E5%8D%87%E7%BA%A7-Mac-openssl-%E5%AE%89%E8%A3%85-Mac-openssl-%E5%8D%87%E7%BA%A7-Mac10-11-openssl-%E5%8D%87%E7%BA%A7-Mac-openssl-%E5%AE%89%E8%A3%85%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative之原生模块开发并发布——android篇</title>
    <link href="http://www.liuchungui.com/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/"/>
    <id>http://www.liuchungui.com/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/</id>
    <published>2016-05-08T06:00:09.000Z</published>
    <updated>2016-11-05T02:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。</p>
<p>整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。</p>
<p>示例代码github地址：<a href="https://github.com/liuchungui/react-native-BGNativeModuleExample" target="_blank" rel="external">https://github.com/liuchungui/react-native-BGNativeModuleExample</a></p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们需要先创建一个ReactNative工程，使用如下命令创建。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ react native init TestProject</div></pre></td></tr></table></figure>
<p>创建好工程之后，我们使用android studio打开<code>TestProject/android/</code>下的android工程。</p>
<p>之后，点击android studio菜单上的File ——&gt; New ——&gt; New Module，之后选择<code>Android Library</code>，设置模块名和包名，我的设置如下：<br><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f3ilkyhcuzj21kw10w42q.jpg" alt=""></p>
<p>点击完成之后，我们的安卓项目中就多了个名字为<code>nativemoduleexample</code>模块。<br><img src="http://ww1.sinaimg.cn/large/7746cd07jw1f3iluj6owuj20qy11mgt8.jpg" alt=""><br>之后，我们在<code>app</code>工程中的<code>build.gradle</code>文件中的<code>dependencies</code>添加一行<code>compile project(&#39;:nativemoduleexample&#39;)</code>，让主工程<code>app</code>依赖我们新创建的Library。</p>
<p>最后，我们还需要让新创建的Library依赖<code>react native</code>，和上面差不多，只需要在我们新创建的<code>nativemoduleexample</code>下的<code>build.gradle</code>中的<code>dependencies</code>添加一行<code>compile &quot;com.facebook.react:react-native:+&quot;</code>就行了。</p>
<h2 id="一、编写原生模块代码"><a href="#一、编写原生模块代码" class="headerlink" title="一、编写原生模块代码"></a>一、编写原生模块代码</h2><h4 id="1、创建原生模块，并进行注册"><a href="#1、创建原生模块，并进行注册" class="headerlink" title="1、创建原生模块，并进行注册"></a>1、创建原生模块，并进行注册</h4><p>我们首先点击打开前面创建的<code>nativemoduleexample</code>库，在<code>src/main/java/com/liuchungui/nativemoduleexample</code>目录下创建我们的原生模块类。当然，如果我们前面创建Library的包名不太一样，那<code>src/main/java/</code>后面跟上就是前面设置的包名。</p>
<p>在这个目录下，我们首先创建一个原生模块<code>BGNativeExampleModule</code>，它继承于<code>ReactContextBaseJavaModule</code>。这个原生模块必须实现两个方法，一个是覆写<code>getName</code>方法，它返回一个字符串名字，在JS中我们就使用这个名字调用这个模块；另外一个是构造方法<code>BGNativeExampleModule</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.liuchungui.nativemoduleexample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.NativeModule;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactContext;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactMethod;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.String;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BGNativeExampleModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BGNativeExampleModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"BGNativeModuleExample"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中需要注意的是，模块名前的RCT前缀会被自动移除。例如”RCTBGNativeModuleExample”，在JS中的模块名字仍然是BGNativeModuleExample。</p>
<p>到这一步的时候，是不是就可以访问这个模块了？事实是现在还不能访问，因为我们还需要注册这个模块。</p>
<p>为了注册原生模块，我们首先创建一个<code>BGNativeExamplePackage</code>类，这个类要求实现<code>ReactPackage</code>接口，这个接口有三个方法<code>createNativeModules</code>、<code>createJSModules</code>和<code>createViewManagers</code>。其中，<code>createNativeModules</code>是用来添加原生模块的；<code>createViewManagers</code>是用来添加原生的UI组件；<code>createJSModules</code>暂时没用过，但是看官方的注释，应该是注册我们原生模块中用到的JS模块。</p>
<p>我们这里只需要在<code>createNativeModules</code>方法中添加原生模块，其他两个方法返回空数组就行了，整个package类的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.liuchungui.nativemoduleexample;</div><div class="line"></div><div class="line">import com.facebook.react.ReactPackage;</div><div class="line">import com.facebook.react.bridge.JavaScriptModule;</div><div class="line">import com.facebook.react.bridge.NativeModule;</div><div class="line">import com.facebook.react.bridge.ReactApplicationContext;</div><div class="line">import com.facebook.react.uimanager.ViewManager;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class BGNativeExamplePackage implements ReactPackage &#123;</div><div class="line">    @Override</div><div class="line">    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</div><div class="line">        return Arrays.asList(new NativeModule[]&#123;</div><div class="line">                new BGNativeExampleModule(reactContext),</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><del>最后，这个package需要在MainActivity.java文件中的getPackages方法中提供。这个文件位于我们的reactNative应用文件夹的android目录中，路径是:android/app/src/main/java/com/testproject/MainActivity.java</del>。<br>最后，这个package需要在<code>getPackages</code>方法中提供出来，需要注意的是，在<code>react-native 0.29版本以前，getPackages方法在我们的工程的MainActivity.java中；而在0.29版本以后，getPackages方法在我们工程的MainApplication.java中</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class="line">    return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">        new MainReactPackage(),</div><div class="line">            new BGNativeExamplePackage()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这个时候，我们终于可以在js中访问我们的原生模块了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; NativeModules &#125; from &apos;react-native&apos;;</div><div class="line">var BGNativeModuleExample = NativeModules.BGNativeModuleExample;</div><div class="line">console.log(BGNativeModuleExample);</div></pre></td></tr></table></figure>
<h3 id="2、为原生模块添加方法"><a href="#2、为原生模块添加方法" class="headerlink" title="2、为原生模块添加方法"></a>2、为原生模块添加方法</h3><p>要导出一个方法给JS使用，Java方法需要使用注解<code>@ReactMethod</code>。方法的返回类型必须为void。ReactNative跨语言访问是异步进行的，所以想要给JS返回一个值，唯一的办法是使用回调函数或者发送事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import com.facebook.react.bridge.ReactMethod;</div><div class="line"></div><div class="line">@ReactMethod</div><div class="line">public void testPrint(String name, ReadableMap info) &#123;</div><div class="line">	Log.i(TAG, name);</div><div class="line">	Log.i(TAG, info.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们如下调用这个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testPrint(&quot;Jack&quot;, &#123;</div><div class="line">    height: &apos;1.78m&apos;,</div><div class="line">    weight: &apos;7kg&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="3、参数类型"><a href="#3、参数类型" class="headerlink" title="3、参数类型"></a>3、参数类型</h4><p>在编写原生模块的时候，我们还需要知道原生Java数据类型和JS数据类型的映射关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Boolean -&gt; Bool</div><div class="line">Integer -&gt; Number</div><div class="line">Double -&gt; Number</div><div class="line">Float -&gt; Number</div><div class="line">String -&gt; String</div><div class="line">Callback -&gt; function</div><div class="line">ReadableMap -&gt; Object</div><div class="line">ReadableArray -&gt; Array</div></pre></td></tr></table></figure>
<p>详情参考：<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java" target="_blank" rel="external">ReadableMap</a>和<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java" target="_blank" rel="external">ReadableArray</a></p>
<h3 id="4、回调函数"><a href="#4、回调函数" class="headerlink" title="4、回调函数"></a>4、回调函数</h3><p>原生模块还支持一种特殊的参数——回调函数。它提供了一个函数来把返回值传回给JS。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import com.facebook.react.bridge.Callback;</div><div class="line"></div><div class="line">@ReactMethod</div><div class="line">public void getNativeClass(Callback callback) &#123;</div><div class="line">      callback.invoke(&quot;BGNativeExampleModule&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们可以通过以下方式获取到原生模块的类名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.getNativeClass(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"nativeClass: "</span>, name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="5、Promises"><a href="#5、Promises" class="headerlink" title="5、Promises"></a>5、Promises</h3><blockquote>
<p>原生模块还可以使用promise来简化代码，搭配ES2016(ES7)标准的async/await语法则效果更佳。如果桥接原生方法的最后一个参数是一个Promise，则对应的JS方法就会返回一个Promise对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.Promise;</div><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPromises</span><span class="params">(Boolean isResolve, Promise promise)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(isResolve) &#123;</div><div class="line">        promise.resolve(isResolve.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        promise.reject(isResolve.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JS中如下调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testPromises(<span class="literal">true</span>)</div><div class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"result is "</span>, result);</div><div class="line">&#125;)</div><div class="line">.catch(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"result = "</span>, result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="6、导出常量"><a href="#6、导出常量" class="headerlink" title="6、导出常量"></a>6、导出常量</h3><p>  我们在<code>getContants</code>方法中导出js所需要使用的常量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span>  Map&lt;String, Object&gt; <span class="title">getConstants</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; constants = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    constants.put(<span class="string">"BGModuleName"</span>, <span class="string">"BGNativeModuleExample"</span>);</div><div class="line">    constants.put(TestEventName, TestEventName);</div><div class="line">    <span class="keyword">return</span> constants;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 我们在JS中打印<code>BGModuleName</code>这个常量的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"BGModuleName const value = "</span>, BGNativeModuleExample.BGModuleName);</div></pre></td></tr></table></figure>
<h3 id="7、给JS发送事件"><a href="#7、给JS发送事件" class="headerlink" title="7、给JS发送事件"></a>7、给JS发送事件</h3><blockquote>
<p>原生模块可以在没有被调用的情况下往JS发送事件通知，最简单的办法是通过<code>RCTDeviceEventEmitter</code>，这可以通过<code>ReactContext</code>获得对应的引用。</p>
</blockquote>
<p>在这里，我们为了能够接收到事件，开启了一个定时器，每一秒发送一次事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BGNativeExampleModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = BGNativeExampleModule.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String TestEventName = <span class="string">"TestEventName"</span>;</div><div class="line">    <span class="keyword">private</span> Timer timer;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BGNativeExampleModule</span><span class="params">(<span class="keyword">final</span> ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">        <span class="comment">//开启定时器</span></div><div class="line">        TimerTask task = <span class="keyword">new</span> TimerTask() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//发送事件</span></div><div class="line">                WritableMap params = Arguments.createMap();</div><div class="line">                params.putString(<span class="string">"name"</span>, <span class="string">"Jack"</span>);</div><div class="line">                reactContext</div><div class="line">                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)</div><div class="line">                        .emit(TestEventName, params);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        timer = <span class="keyword">new</span> Timer();</div><div class="line">        timer.schedule(task, <span class="number">1000</span>, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们这里直接使用<code>DeviceEventEmitter</code>模块来监听事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接收事件</span></div><div class="line">DeviceEventEmitter.addListener(BGNativeModuleExample.TestEventName, info =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(info);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>官方文档中，说也可以使用<code>Subscribable mixin</code>的addListenerOn方法来接收事件，其实它就是对<code>DeviceEventEmitter</code>一种封装。而且，在<code>es6</code>之后，不再支持<code>mixins</code>，所以我们直接使用DeviceEventEmitter接收事件比较好。</p>
<h3 id="8、生命周期"><a href="#8、生命周期" class="headerlink" title="8、生命周期"></a>8、生命周期</h3><p>有时候，为了某些目的，我们需要监听ReactNative应用的生命周期。我们可以让原生模块实现<code>LifecycleEventListener</code>接口，然后使用<code>addLifecycleEventListener</code>注册一下监听。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BGNativeExampleModule</span><span class="params">(<span class="keyword">final</span> ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(reactContext);</div><div class="line">    <span class="comment">//添加监听</span></div><div class="line">    reactContext.addLifecycleEventListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现<code>LifecycleEventListener</code>接口</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public <span class="keyword">void</span> onHostResume() &#123;</div><div class="line">    Log.i(TAG, <span class="string">"onHostResume"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public <span class="keyword">void</span> onHostPause() &#123;</div><div class="line">    Log.i(TAG, <span class="string">"onHostPause"</span>);</div><div class="line">    timer.cancel();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public <span class="keyword">void</span> onHostDestroy() &#123;</div><div class="line">    Log.i(TAG, <span class="string">"onHostDestroy"</span>);</div><div class="line">    timer.cancel();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就可以监听ReactNative应用的生命周期了。</p>
<p>上面原生代码就编写好了，主要以代码实践为主，弥补官方文档中的一些不足，如果要需要了解更多的原生模块封装的知识，可以参考<a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a>，也可以参考官方的源代码。</p>
<h2 id="二、发布上线"><a href="#二、发布上线" class="headerlink" title="二、发布上线"></a>二、发布上线</h2><h3 id="建立一个github仓库"><a href="#建立一个github仓库" class="headerlink" title="建立一个github仓库"></a>建立一个github仓库</h3><p>在github上创建一个仓库<code>react-native-BGNativeModuleExample</code>，克隆到本地，并且创建一个<code>android</code>文件夹。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/liuchungui/react-native-BGNativeModuleExample.git</div><div class="line">$ <span class="built_in">cd</span> react-native-BGNativeModuleExample</div><div class="line">$ mkdir android</div></pre></td></tr></table></figure>
<h3 id="将Library复制到android文件夹下"><a href="#将Library复制到android文件夹下" class="headerlink" title="将Library复制到android文件夹下"></a>将Library复制到android文件夹下</h3><p>我们首先进入前面创建的<code>nativemoduleexample</code>这个Library下，然后将这个文件目录下所有文件copy到<code>react-native-BGNativeModuleExample/android</code>目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp -R android/nativemoduleexample/* ~/github/react-native-BGNativeModuleExample/android</div></pre></td></tr></table></figure>
<h3 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h3><p>这里请参考我前面写的<a href="http://www.liuchungui.com/blog/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/">ReactNative之原生模块开发并发布——iOS篇</a>中的<code>发布到npm</code>那一节的内容，当然如果你和我一样前面已经发布了<code>1.0.0</code>，只需要将<code>package.json</code>修改一个版本就好了，我这里修改为<code>2.0.0</code>，然后使用下面命令发布。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm publish</div><div class="line">+ react-native-nativemodule-example@2.0.0</div></pre></td></tr></table></figure>
<p>这样，我们就成功发布到了<a href="npmjs.org">npmjs.org</a>。</p>
<h2 id="三、添加Example，测试是否可用，添加README"><a href="#三、添加Example，测试是否可用，添加README" class="headerlink" title="三、添加Example，测试是否可用，添加README"></a>三、添加Example，测试是否可用，添加README</h2><p>请点击查看<a href="http://www.liuchungui.com/blog/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/">ReactNative之原生模块开发并发布——iOS篇</a>中的<code>添加Example，测试是否可用，添加README</code>这一部分内容，基本上一样的。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://blog.csdn.net/dxpqxb/article/details/8659292" target="_blank" rel="external">http://blog.csdn.net/dxpqxb/article/details/8659292</a><br><a href="http://reactnative.cn/docs/0.25/native-modules-android.html#content" target="_blank" rel="external">原生模块</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。&lt;/p&gt;
&lt;p&gt;整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。&lt;/p&gt;
&lt;p&gt;示例代码github地址：&lt;a href=&quot;https://github.com/liuchungui/react-native-BGNativeModuleExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/liuchungui/react-native-BGNativeModuleExample&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative, 原生模块, react native, ReactNative原生模块, react native 原生模块, react native 原生模块发布, reactNative原生模块android" scheme="http://www.liuchungui.com/tags/ReactNative-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-ReactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%8F%91%E5%B8%83-reactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97android/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative之原生模块开发并发布——iOS篇</title>
    <link href="http://www.liuchungui.com/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/"/>
    <id>http://www.liuchungui.com/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/</id>
    <published>2016-05-02T11:48:27.000Z</published>
    <updated>2016-08-06T05:42:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。</p>
<p>整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。</p>
<p>示例代码github地址：<a href="https://github.com/liuchungui/react-native-BGNativeModuleExample" target="_blank" rel="external">https://github.com/liuchungui/react-native-BGNativeModuleExample</a></p>
<p>编写android原生模块，请看<a href="http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/">ReactNative之原生模块开发并发布——android篇</a></p>
<a id="more"></a>
<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><h4 id="创建ReactNative工程"><a href="#创建ReactNative工程" class="headerlink" title="创建ReactNative工程"></a>创建ReactNative工程</h4><p>我们需要先创建一个ReactNative工程，使用如下命令创建。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react native init TestProject</div></pre></td></tr></table></figure>
<p>创建好工程之后，我们使用xcode打开<code>TestProject/ios/</code>下的iOS工程。</p>
<h4 id="创建静态库，并将这个静态库手动链接到工程中"><a href="#创建静态库，并将这个静态库手动链接到工程中" class="headerlink" title="创建静态库，并将这个静态库手动链接到工程中"></a>创建静态库，并将这个静态库手动链接到工程中</h4><p>首先，我们在前面创建的ReactNative工程下的<code>node_modules</code>创建一个文件夹<code>react-native-BGNativeModuleExample</code>，然后我们在新创建的文件夹下再创建一个ios文件夹。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd TestProject/node_modules</div><div class="line">$ mkdir react-native-BGNativeModuleExample</div><div class="line">$ cd react-native-BGNativeModuleExample</div><div class="line">$ mkdir ios</div></pre></td></tr></table></figure>
<p>然后，由于ReactNative的组件都是一个个静态库，我们发布到npm给别人使用的话，也需要建立静态库。我们使用xcode建立静态库，取名为<code>BGNativeModuleExample</code>。建立之后，我们将创建的静态库中的文件全部copy到<code>node_modules/react-native-BGNativeModuleExample/ios</code>目录下。<br>ios文件目录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">|____BGNativeModuleExample</div><div class="line">| |____BGNativeModuleExample.h</div><div class="line">| |____BGNativeModuleExample.m</div><div class="line">|____BGNativeModuleExample.xcodeproj</div></pre></td></tr></table></figure>
<p>最后，我们需要手动将这个静态库链接到工程中。</p>
<p>1、使用xcode打开创建的静态库，添加一行<code>Header Search Paths</code>，值为<code>$(SRCROOT)/../../react-native/React</code>，并设置为<code>recursive</code>。</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f3h69rwj3oj212s0r7dm6.jpg" alt=""></p>
<p>2、将<code>BGNativeModuleExample</code>静态库工程拖动到工程中的Library中。<br><img src="http://ww1.sinaimg.cn/large/7746cd07jw1f3o30vl8wjj20xq0fawi3.jpg" alt=""></p>
<p>3、选中 TARGETS =&gt; TestProject =&gt; Build Settings =&gt; Link Binary With Libraries，添加<code>libBGNativeModuleExample.a</code>这个静态库<br><img src="http://ww3.sinaimg.cn/large/7746cd07jw1f3o2v5wrgyj212r0hgq72.jpg" alt=""></p>
<p>到此，我们准备工作完成了。我们这里这么准备是有用意的，那就是模拟npm链接的过程，建立好了环境，避免了发布到npm上后别人使用找不到静态库的问题。</p>
<h2 id="一、编写原生模块代码"><a href="#一、编写原生模块代码" class="headerlink" title="一、编写原生模块代码"></a>一、编写原生模块代码</h2><h4 id="1、创建原生模块"><a href="#1、创建原生模块" class="headerlink" title="1、创建原生模块"></a>1、创建原生模块</h4><p>选中我们创建的<code>BGNativeModuleExample</code>静态库，然后在<code>BGNativeModuleExample.h</code>文件中导入<code>RCTBridgeModule.h</code>，让<code>BGNativeModuleExample</code>类遵循<code>RCTBridgeModule</code>协议。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BGNativeModuleExample.h文件的内容如下</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"RCTBridgeModule.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BGNativeModuleExample</span> : <span class="title">NSObject</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在<code>BGNativeModuleExample.m</code>文件中，我们需要实现<code>RCTBridgeModule</code>协议。为了实现<code>RCTBridgeModule</code>协议，我们的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果不指定，默认会使用这个类的名字。</p>
<p>在这里，我们指定了模块的名字为<code>BGNativeModuleExample</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_MODULE(BGNativeModuleExample);</div></pre></td></tr></table></figure>
<p>实现了RCTBridgeModule协议之后，我们就可以在js中如下获取到我们创建的原生模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; NativeModules &#125; from &apos;react-native&apos;;</div><div class="line">var BGNativeModuleExample = NativeModules.BGNativeModuleExample;</div></pre></td></tr></table></figure>
<p>需要注意的是，RCT_EXPORT_MODULE宏传递的参数不能是OC中的字符串。如果传递@”BGNativeModuleExample”，那么我们导出给JS的模块名字其实是@”BGNativeModuleExample”，使用BGNativeModuleExample就找不到了。在这里，我们其实可以通过打印<code>NativeModules</code>来查找到我们创建的原生模块。</p>
<h4 id="2、为原生模块添加方法"><a href="#2、为原生模块添加方法" class="headerlink" title="2、为原生模块添加方法"></a>2、为原生模块添加方法</h4><p>我们需要明确的声明要给JS导出的方法，否则ReactNative不会导出任何方法。声明通过RCT_EXPORT_METHOD()宏来实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_METHOD(testPrint:(<span class="built_in">NSString</span> *)name info:(<span class="built_in">NSDictionary</span> *)info) &#123;</div><div class="line">  RCTLogInfo(<span class="string">@"%@: %@"</span>, name, info);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们可以这样调用这个方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testPrint(<span class="string">"Jack"</span>, &#123;</div><div class="line">  height: <span class="string">'1.78m'</span>,</div><div class="line">  weight: <span class="string">'7kg'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="3、参数类型"><a href="#3、参数类型" class="headerlink" title="3、参数类型"></a>3、参数类型</h4><p>RCT_EXPORT_METHOD()支持所有标准的JSON类型，包括：</p>
<ul>
<li>string (NSString)</li>
<li>number (NSInteger, float, double, CGFloat, NSNumber)</li>
<li>boolean (BOOL, NSNumber)</li>
<li>array (NSArray) 包含本列表中任意类型</li>
<li>map (NSDictionary) 包含string类型的键和本列表中任意类型的值</li>
<li>function (RCTResponseSenderBlock)</li>
</ul>
<p>除此以外，任何RCTConvert类支持的的类型也都可以使用(参见<a href="https://github.com/facebook/react-native/blob/master/React/Base/RCTConvert.h" target="_blank" rel="external">RCTConvert</a>了解更多信息)。RCTConvert还提供了一系列辅助函数，用来接收一个JSON值并转换到原生Objective-C类型或类。</p>
<p>了解更多请点击<a href="http://reactnative.cn/docs/0.25/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a></p>
<h4 id="4、回调函数"><a href="#4、回调函数" class="headerlink" title="4、回调函数"></a>4、回调函数</h4><blockquote>
<p>警告<br>本章节内容目前还处在实验阶段，因为我们还并没有太多的实践经验来处理回调函数。</p>
</blockquote>
<p>回调函数，在官方的文档中是有上面的一个警告，不过在使用过程暂时未发现问题。在OC中，我们添加一个<code>getNativeClass</code>方法，将当前模块的类名回调给JS。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_METHOD(getNativeClass:(RCTResponseSenderBlock)callback) &#123;</div><div class="line">  callback(@[<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们通过以下方式获取到原生模块的类名</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.getNativeClass(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"nativeClass: "</span>, name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>原生模块通常只应调用回调函数一次。但是，它们可以保存callback并在将来调用。</strong>这在封装那些通过“委托函数”来获得返回值的iOS API时最常见。</p>
<h4 id="5、Promises"><a href="#5、Promises" class="headerlink" title="5、Promises"></a>5、Promises</h4><blockquote>
<p>原生模块还可以使用promise来简化代码，搭配ES2016(ES7)标准的async/await语法则效果更佳。如果桥接原生方法的最后两个参数是RCTPromiseResolveBlock和RCTPromiseRejectBlock，则对应的JS方法就会返回一个Promise对象。</p>
</blockquote>
<p>我们通过Promises来实现原生模块是否会响应方法，响应则返回YES，不响应则返回一个错误信息，代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RCT_REMAP_METHOD(testRespondMethod,</div><div class="line">                 name:(<span class="built_in">NSString</span> *)name</div><div class="line">                 resolver:(RCTPromiseResolveBlock)resolve</div><div class="line">                 rejecter:(RCTPromiseRejectBlock)reject) &#123;</div><div class="line">  <span class="keyword">if</span>([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(name)]) &#123;</div><div class="line">    resolve(@YES);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    reject(<span class="string">@"-1001"</span>, <span class="string">@"not respond this method"</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们有两种方式调用，第一种是通过<code>then....catch</code>的方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testRespondMethod(<span class="string">"dealloc"</span>)</div><div class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"result is "</span>, result);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(error);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>第二种是通过<code>try...catch</code>来调用，与第一种相比，第二种会报警告”Possible Unhandled Promiss Rejection (id:0)“。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  async testRespond() &#123;</div><div class="line">  try &#123;</div><div class="line">    var result = BGNativeModuleExample.testRespondMethod(&quot;hell&quot;);</div><div class="line">    if(result) &#123;</div><div class="line">      console.log(&quot;respond this method&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    console.log(e);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意: 如果使用Promiss我们不需要参数，则在OC去掉name那一行就行了；如果需要多个参数，在name下面多加一行就行了，注意它们之间不需要添加逗号。</strong></p>
<h4 id="6、多线程"><a href="#6、多线程" class="headerlink" title="6、多线程"></a>6、多线程</h4><p>我们这里操作的模块没有涉及到UI，所以专门建立一个串行的队列给它使用，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return dispatch_queue_create(&quot;com.liuchungui.demo&quot;, DISPATCH_QUEUE_SERIAL);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意: 在模块之间共享分发队列<br>methodQueue方法会在模块被初始化的时候被执行一次，然后会被React Native的桥接机制保存下来，所以你不需要自己保存队列的引用，除非你希望在模块的其它地方使用它。但是，如果你希望在若干个模块中共享同一个队列，则需要自己保存并返回相同的队列实例；仅仅是返回相同名字的队列是不行的。</p>
</blockquote>
<p>更多线程的操作细节可以参考<a href="http://reactnative.cn/docs/0.24/native-modules-ios.html#content" target="_blank" rel="external">http://reactnative.cn/docs/0.24/native-modules-ios.html#content</a></p>
<h4 id="7、导出常量"><a href="#7、导出常量" class="headerlink" title="7、导出常量"></a>7、导出常量</h4><p>原生模块可以导出一些常量，这些常量在JavaScript端随时都可以访问。用这种方法来传递一些静态数据，可以避免通过bridge进行一次来回交互。</p>
<p>OC中，我们实现<code>constantsToExport</code>方法，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSDictionary</span> *)constantsToExport &#123;</div><div class="line">  <span class="keyword">return</span> @&#123; <span class="string">@"BGModuleName"</span> : <span class="string">@"BGNativeModuleExample"</span>,</div><div class="line">            TestEventName: TestEventName</div><div class="line">            &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JS中，我们打印一下这个常量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"BGModuleName value is "</span>, BGNativeModuleExample.BGModuleName);</div></pre></td></tr></table></figure>
<p>但是注意这个常量仅仅在初始化的时候导出了一次，所以即使你在运行期间改变constantToExport返回的值，也不会影响到JavaScript环境下所得到的结果。</p>
<h4 id="8、给JS发送事件"><a href="#8、给JS发送事件" class="headerlink" title="8、给JS发送事件"></a>8、给JS发送事件</h4><p>即使没有被JS调用，本地模块也可以给JS发送事件通知。最直接的方式是使用<code>eventDispatcher</code>。</p>
<p>在这里，我们为了能够接收到事件，我们开一个定时器，每一秒发送一次事件。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"BGNativeModuleExample.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"RCTEventDispatcher.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BGNativeModuleExample</span></span></div><div class="line"><span class="keyword">@synthesize</span> bridge = _bridge;</div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">    [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(sendEventToJS) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)receiveNotification:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">  [<span class="keyword">self</span>.bridge.eventDispatcher sendAppEventWithName:TestEventName body:@&#123;<span class="string">@"name"</span>: <span class="string">@"Jack"</span>&#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在JS中，我们这样接收事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NativeAppEventEmitter.addListener(BGNativeModuleExample.TestEventName, info =&gt; &#123;</div><div class="line">      console.log(info);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p><strong>注意： 编写OC代码时，需要添加<code>@synthesize bridge = _bridge;</code>，否则接收事件的时候就会报<code>Exception -[BGNativeModuleExample brige]; unrecognized selector sent to instance</code>的错误。</strong></p>
<p>上面原生代码就编写好了，主要以代码实践为主，弥补官方文档中的一些不足，如果要需要了解更多的原生模块封装的知识，可以参考<a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a>，也可以参考官方的源代码。</p>
<h2 id="二、发布上线"><a href="#二、发布上线" class="headerlink" title="二、发布上线"></a>二、发布上线</h2><p>我们按照上面步骤编写好原生模块之后，接下来将我们写的原生模块发布到npm。</p>
<h4 id="1、我们需要创建github仓库"><a href="#1、我们需要创建github仓库" class="headerlink" title="1、我们需要创建github仓库"></a>1、我们需要创建github仓库</h4><p>在github上创建一个仓库<code>react-native-BGNativeModuleExample</code>，然后关联到我们前面创建的<code>react-native-BGNativeModuleExample</code>目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd TestProject/node_modules/react-native-BGNativeModuleExample</div><div class="line">$ git init .</div><div class="line">$ git remote add origin https://github.com/liuchungui/react-native-BGNativeModuleExample.git</div></pre></td></tr></table></figure>
<h4 id="2、我们需要创建原生模块的入口文件"><a href="#2、我们需要创建原生模块的入口文件" class="headerlink" title="2、我们需要创建原生模块的入口文件"></a>2、我们需要创建原生模块的入口文件</h4><p>我们需要在react-native-BGNativeModuleExample目录下创建一个index.js，它是整个原生模块的入口，我们这里只是将原生进行导出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//index.js</div><div class="line">import React, &#123; NativeModules &#125; from &apos;react-native&apos;;</div><div class="line">module.exports = NativeModules.BGNativeModuleExample;</div></pre></td></tr></table></figure>
<h4 id="3、发布到npm"><a href="#3、发布到npm" class="headerlink" title="3、发布到npm"></a>3、发布到npm</h4><p>在发布到npm之前，我们需要创建一个<code>package.json</code>文件，这个文件包含了module的所有信息，比如名称、版本、描述、依赖、作者、license等。<br>我们在react-native-BGNativeModuleExample根目录下使用<code>npm init</code>命令来创建<code>package.json</code>，系统会提示我们输入所需的信息，不想输入的直接按下<code>Enter</code>跳过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ npm init</div><div class="line">This utility will walk you through creating a package.json file.</div><div class="line">It only covers the most common items, and tries to guess sensible defaults.</div><div class="line"></div><div class="line">See `npm help json` for definitive documentation on these fields</div><div class="line">and exactly what they do.</div><div class="line"></div><div class="line">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</div><div class="line">save it as a dependency in the package.json file.</div><div class="line"></div><div class="line">Press ^C at any time to quit.</div><div class="line">name: (react-native-BGNativeModuleExample)</div></pre></td></tr></table></figure>
<p>输入完成之后，系统会要我们确认文件的内容是否有误，如果没有问题直接输入<code>yes</code>，那么<code>package.json</code>就创建好了。<br>我这里创建的package.json文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;react-native-nativemodule-example&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;repository&quot;: &#123;</div><div class="line">    &quot;type&quot;: &quot;git&quot;,</div><div class="line">    &quot;url&quot;: &quot;git+https://github.com/liuchungui/react-native-BGNativeModuleExample.git&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;bugs&quot;: &#123;</div><div class="line">    &quot;url&quot;: &quot;https://github.com/liuchungui/react-native-BGNativeModuleExample/issues&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;homepage&quot;: &quot;https://github.com/liuchungui/react-native-BGNativeModuleExample#readme&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们编写的原生模块依赖于其他的原生模块，我们需要在<code>package.json</code>添加依赖关系，我们这里由于没有相关依赖，所以不需要添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>初始化完package.json，我们就可以发布到npm上面了。</strong></p>
<p>如果没有npm的账号，我们需要注册一个账号，这个账号会被添加到npm本地的配置中，用来发布module用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm adduser   </div><div class="line">Username: your name</div><div class="line">Password: your password</div><div class="line">Email: yourmail@gmail.com</div></pre></td></tr></table></figure>
<p>成功之后，npm会把认证信息存储在~/.npmrc中，并且可以通过以下命令查看npm当前使用的用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm whoami</div></pre></td></tr></table></figure>
<p>以上完成之后，我们就可以进行发布了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$npm publish</div><div class="line">+ react-native-nativemodule-example@1.0.0</div></pre></td></tr></table></figure>
<p>到这里，我们已经成功把module发布到了<a href="npmjs.org">npmjs.org</a>。当然，我们也别忘记将我们的代码发布到github。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div><div class="line">$ git add .</div><div class="line">$ git commit -m &apos;add Project&apos;</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>有时候，有些文件没必要发布，例如Example文件，我们就可以通过<code>.npmignore</code>忽略它。例如我这里<code>.npmignore</code>文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Example/</div><div class="line">.git</div><div class="line">.gitignore</div><div class="line">.idea</div></pre></td></tr></table></figure>
<p>这样的话，我们npm进行发布的时候，就不会将Example发布到npm上了。</p>
<h4 id="4、添加Example，测试是否可用，添加README"><a href="#4、添加Example，测试是否可用，添加README" class="headerlink" title="4、添加Example，测试是否可用，添加README"></a>4、添加Example，测试是否可用，添加README</h4><p>我们在<code>react-native-BGNativeModuleExample</code>目录下创建一个Example的ReactNative工程，并且通过<code>rnpm install react-native-nativemodule-example</code>命令安装我们发布的<code>react-native-nativemodule-example</code>模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ rnpm install react-native-nativemodule-example</div><div class="line">TestProject@0.0.1 /Users/user/github/TestProject</div><div class="line">└── react-native-nativemodule-example@1.0.0 </div><div class="line"></div><div class="line">rnpm-link info Linking react-native-nativemodule-example ios dependency </div><div class="line">rnpm-link info iOS module react-native-nativemodule-example has been successfully linked </div><div class="line">rnpm-link info Module react-native-nativemodule-example has been successfully installed &amp; linked</div></pre></td></tr></table></figure>
<p>上面提示安装并且link成功，我们就可以在js中进行使用了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import BGNativeModuleExample from &apos;react-native-nativemodule-example&apos;;</div><div class="line"></div><div class="line">BGNativeModuleExample.testPrint(&quot;Jack&quot;, &#123;</div><div class="line">    height: &apos;1.78m&apos;,</div><div class="line">    weight: &apos;7kg&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="5、我们在发布上线之后还需要编写README文件。"><a href="#5、我们在发布上线之后还需要编写README文件。" class="headerlink" title="5、我们在发布上线之后还需要编写README文件。"></a>5、我们在发布上线之后还需要编写README文件。</h4><p>README文件是非常重要的，如果没有README文件，别人看到我们的原生组件，根本就不知道我们这个组件是用来干啥的。所以，我们很有必要添加一个README文件，这个文件需要告诉别人我们这个原生组件是干什么的、如何安装、API、使用手册等等。</p>
<h4 id="6、原生模块升级，发布新版本"><a href="#6、原生模块升级，发布新版本" class="headerlink" title="6、原生模块升级，发布新版本"></a>6、原生模块升级，发布新版本</h4><p>当我们添加新代码或者修复bug后，需要发布新的版本，我们只需要修改package.json文件中的<code>version</code>的值就行了，然后使用<code>npm publish</code>进行发布。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章主要分成两个部分，一是讲述了编写原生模块的知识，二是将我们编写的内容发布到npm上。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://weizhifeng.net/how-to-publish-a-node-module.html" target="_blank" rel="external">如何发布Node模块到NPM社区</a></p>
<p><a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。&lt;/p&gt;
&lt;p&gt;整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。&lt;/p&gt;
&lt;p&gt;示例代码github地址：&lt;a href=&quot;https://github.com/liuchungui/react-native-BGNativeModuleExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/liuchungui/react-native-BGNativeModuleExample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编写android原生模块，请看&lt;a href=&quot;http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/&quot;&gt;ReactNative之原生模块开发并发布——android篇&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative, 原生模块, react native, ReactNative原生模块, react native 原生模块, react native 原生模块发布,reactNative原生模块ios" scheme="http://www.liuchungui.com/tags/ReactNative-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-ReactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%8F%91%E5%B8%83-reactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97ios/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下搭建vpn历程</title>
    <link href="http://www.liuchungui.com/2016/04/23/ubuntuxia-da-jian-vpn/"/>
    <id>http://www.liuchungui.com/2016/04/23/ubuntuxia-da-jian-vpn/</id>
    <published>2016-04-23T08:27:39.000Z</published>
    <updated>2016-08-06T05:44:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>去年四月份的时候，和同学一起买了一个香港的服务器，准备搭建一个vpn给自己翻墙用。当时，vpn搭建成功了，但是连上去之后，根本连不了google。后来，去咨询了一下盼哥，盼哥给我介绍了一款很出名的翻墙工具Shadowsocks。于是，到网上搜了一个教程，apt-get install安装，稍微配置一下，在本地电脑下载一个客户端，填写服务器和密码，在浏览器中输入google.com立马就出现了心动的页面，顿时整个人感觉神清气爽，觉得Shadowsocks真是个好东西。于是，使用Shadowsocks翻墙，用到了现在，一直感觉不错。不过，在使用途中，它也存在一定的不足，那就是命令行下无法翻墙，手机上体验不太好（我使用一次就不再使用了）。前几天，由于使用ReactNative开发安卓，在命令行下一定需要翻墙下载google的东西。于是乎，重整了一下vpn，最终还是以失败告终。后来，准备曲线救国，使用Shadowsocks和一些辅助工具进行全局翻墙，查找了网上的教程，搭建后都失败了。最终，在网上下载了一个vpn翻墙工具<code>VPN Unlimited</code>，搞定了自己的问题，但是有时间限制。</p>
<p>今天，按照同学发的一个链接教程重新整一下vpn，又以失败告终，而且VPN启动都启动不起来了，于是乎google到上面继续找教程，找到了一篇<a href="http://my.oschina.net/mn1127/blog/380941" target="_blank" rel="external">vps ubuntu上搭建pptp服务</a>，按照上面搭建，没想到成功了。<br>鉴于以上搭建的不容易，特此记录一下搭建步骤。<br><a id="more"></a></p>
<h2 id="1、卸载pptpd和iptables，重新安装pptpd"><a href="#1、卸载pptpd和iptables，重新安装pptpd" class="headerlink" title="1、卸载pptpd和iptables，重新安装pptpd"></a>1、卸载pptpd和iptables，重新安装pptpd</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#卸载pptpd</div><div class="line">$ apt-get autoremove pptpd</div><div class="line">$ apt-get purge pptpd</div><div class="line"></div><div class="line">#卸载iptables</div><div class="line">$ apt-get autoremove iptables*</div><div class="line">$ apt-get purge iptables*</div><div class="line"></div><div class="line">#安装pptpd</div><div class="line">$ apt-get install pptpd</div></pre></td></tr></table></figure>
<h2 id="2、配置pptpd"><a href="#2、配置pptpd" class="headerlink" title="2、配置pptpd"></a>2、配置pptpd</h2><h4 id="（1）首先，编辑pptpd-conf文件，设置localip和remoteip"><a href="#（1）首先，编辑pptpd-conf文件，设置localip和remoteip" class="headerlink" title="（1）首先，编辑pptpd.conf文件，设置localip和remoteip"></a>（1）首先，编辑pptpd.conf文件，设置localip和remoteip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/pptpd.conf</div></pre></td></tr></table></figure>
<p>查找到localip和remoteip，打开注释进行设置。将localip设置为你的vps的服务器公网ip，不知道可以通过ifconfig查看。remoteip是设置给VPN用户分配的IP段，我这里设置为10.100.0.2-100。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localip VPS_IP</div><div class="line">remoteip 10.100.0.2-100</div></pre></td></tr></table></figure>
<h4 id="（2）修改dns设置，设置为google的DNS"><a href="#（2）修改dns设置，设置为google的DNS" class="headerlink" title="（2）修改dns设置，设置为google的DNS"></a>（2）修改dns设置，设置为google的DNS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ppp/pptpd-options</div></pre></td></tr></table></figure>
<p>查找到ms-dns，配置dns如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure>
<h4 id="（3）设置VPN的账号密码"><a href="#（3）设置VPN的账号密码" class="headerlink" title="（3）设置VPN的账号密码"></a>（3）设置VPN的账号密码</h4><p>编辑chap-secrets文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ppp/chap-secrets</div></pre></td></tr></table></figure>
<p>在chap-secrets文件中添加一行配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#client           server       secret      IP address</div><div class="line"> liuchungui       pptpd        123456          *</div></pre></td></tr></table></figure>
<p>其中，liuchungui是VPN的用户名，使用的VPN服务类型是pptpd，密码是123456，*代表不限制IP</p>
<h2 id="3、启动pptpd服务"><a href="#3、启动pptpd服务" class="headerlink" title="3、启动pptpd服务"></a>3、启动pptpd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/pptpd restart</div></pre></td></tr></table></figure>
<p> 输入上面命令，如果提示`</p>
<ul>
<li>Restarting PoPToP Point to Point Tunneling Server pptpd               [ OK ] `<br>就说明启动成功了</li>
</ul>
<h2 id="4、设置系统的ipv4的转发开关"><a href="#4、设置系统的ipv4的转发开关" class="headerlink" title="4、设置系统的ipv4的转发开关"></a>4、设置系统的ipv4的转发开关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>编辑<code>/etc/sysctl.conf</code>文件，找到<code>net.ipv4.ip_forward=1</code>，把这行的注释打开并保存。<br>运行：<code>sysctl -p</code> 让上面的修改立即生效。</p>
<h2 id="5、配置iptables"><a href="#5、配置iptables" class="headerlink" title="5、配置iptables"></a>5、配置iptables</h2><h4 id="（1）安装iptables"><a href="#（1）安装iptables" class="headerlink" title="（1）安装iptables"></a>（1）安装iptables</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install iptables</div></pre></td></tr></table></figure>
<h4 id="（2）添加一个NAT，这里特别注意：eth1是vps的ip网卡接口，可以通过ifconfig查看"><a href="#（2）添加一个NAT，这里特别注意：eth1是vps的ip网卡接口，可以通过ifconfig查看" class="headerlink" title="（2）添加一个NAT，这里特别注意：eth1是vps的ip网卡接口，可以通过ifconfig查看"></a>（2）添加一个NAT，这里特别注意：<code>eth1</code>是vps的ip网卡接口，可以通过ifconfig查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -t nat -A POSTROUTING -s 10.100.0.0/24 -o eth1 -j MASQUERADE</div></pre></td></tr></table></figure>
<h4 id="（3）设置MTU，防止包过大"><a href="#（3）设置MTU，防止包过大" class="headerlink" title="（3）设置MTU，防止包过大"></a>（3）设置MTU，防止包过大</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -A FORWARD -s 10.100.0.0/24 -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 1200</div></pre></td></tr></table></figure>
<h4 id="（4）再添加一个NAT，45-62-119-172就是你的vps的公网ip"><a href="#（4）再添加一个NAT，45-62-119-172就是你的vps的公网ip" class="headerlink" title="（4）再添加一个NAT，45.62.119.172就是你的vps的公网ip"></a>（4）再添加一个NAT，<code>45.62.119.172</code>就是你的vps的公网ip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -t nat -A POSTROUTING -s 10.100.0.0/24 -j SNAT --to-source 45.62.119.172</div></pre></td></tr></table></figure>
<h4 id="（5）将iptables规则保存，令重启后规则不丢失："><a href="#（5）将iptables规则保存，令重启后规则不丢失：" class="headerlink" title="（5）将iptables规则保存，令重启后规则不丢失："></a>（5）将iptables规则保存，令重启后规则不丢失：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables-save &gt; /etc/iptables-rules</div></pre></td></tr></table></figure>
<h4 id="（6）编辑网卡文件，加载网卡时自动加载规则"><a href="#（6）编辑网卡文件，加载网卡时自动加载规则" class="headerlink" title="（6）编辑网卡文件，加载网卡时自动加载规则"></a>（6）编辑网卡文件，加载网卡时自动加载规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/network/interfaces</div></pre></td></tr></table></figure>
<p>在<code>interfaces</code>文件末尾加上：<code>pre-up iptables-restore &lt; /etc/iptables-rules</code></p>
<h4 id="（7）安装iptables配置持久化"><a href="#（7）安装iptables配置持久化" class="headerlink" title="（7）安装iptables配置持久化"></a>（7）安装iptables配置持久化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<h4 id="（8）运行保存配置命令"><a href="#（8）运行保存配置命令" class="headerlink" title="（8）运行保存配置命令"></a>（8）运行保存配置命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service iptables-persistent start</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://my.oschina.net/mn1127/blog/380941" target="_blank" rel="external">vps ubuntu上搭建pptp服务</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年四月份的时候，和同学一起买了一个香港的服务器，准备搭建一个vpn给自己翻墙用。当时，vpn搭建成功了，但是连上去之后，根本连不了google。后来，去咨询了一下盼哥，盼哥给我介绍了一款很出名的翻墙工具Shadowsocks。于是，到网上搜了一个教程，apt-get install安装，稍微配置一下，在本地电脑下载一个客户端，填写服务器和密码，在浏览器中输入google.com立马就出现了心动的页面，顿时整个人感觉神清气爽，觉得Shadowsocks真是个好东西。于是，使用Shadowsocks翻墙，用到了现在，一直感觉不错。不过，在使用途中，它也存在一定的不足，那就是命令行下无法翻墙，手机上体验不太好（我使用一次就不再使用了）。前几天，由于使用ReactNative开发安卓，在命令行下一定需要翻墙下载google的东西。于是乎，重整了一下vpn，最终还是以失败告终。后来，准备曲线救国，使用Shadowsocks和一些辅助工具进行全局翻墙，查找了网上的教程，搭建后都失败了。最终，在网上下载了一个vpn翻墙工具&lt;code&gt;VPN Unlimited&lt;/code&gt;，搞定了自己的问题，但是有时间限制。&lt;/p&gt;
&lt;p&gt;今天，按照同学发的一个链接教程重新整一下vpn，又以失败告终，而且VPN启动都启动不起来了，于是乎google到上面继续找教程，找到了一篇&lt;a href=&quot;http://my.oschina.net/mn1127/blog/380941&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vps ubuntu上搭建pptp服务&lt;/a&gt;，按照上面搭建，没想到成功了。&lt;br&gt;鉴于以上搭建的不容易，特此记录一下搭建步骤。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="vpn" scheme="http://www.liuchungui.com/tags/vpn/"/>
    
      <category term="ubuntu搭建vpn" scheme="http://www.liuchungui.com/tags/ubuntu%E6%90%AD%E5%BB%BAvpn/"/>
    
      <category term="unbutn" scheme="http://www.liuchungui.com/tags/unbutn/"/>
    
  </entry>
  
  <entry>
    <title>GCD总结</title>
    <link href="http://www.liuchungui.com/2016/04/04/gcdzong-jie/"/>
    <id>http://www.liuchungui.com/2016/04/04/gcdzong-jie/</id>
    <published>2016-04-04T11:13:33.000Z</published>
    <updated>2016-08-06T05:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GCD的知识点："><a href="#GCD的知识点：" class="headerlink" title="GCD的知识点："></a>GCD的知识点：</h3><ol>
<li>queue分成两种，分别是串行队列(Serial Dispatch Queue)和并行队列（Concurrent Dispatch Queue)。</li>
<li>串行队列只会创建一个线程，而各个串行队列之间是并行的。</li>
<li>串行队列个数创建不受限制，也就是通过串行队列创建的线程可以有很多个，但是这样会存在消耗大量内存的问题；而并行队列不会，不管创建多少个并行队列，XNU内核只使用有效管理的线程。</li>
<li>在iOS6以后，ARC已经实现了GCD的内存管理，所以不用我们去管理它的内存了。</li>
<li>系统已经为我们提供了两个queue，分别是main queue和global queue，其中main queue是串行队列，global queue是并行队列。</li>
</ol>
<a id="more"></a>
<h2 id="GCD的API："><a href="#GCD的API：" class="headerlink" title="GCD的API："></a>GCD的API：</h2><h3 id="1、dispatch-set-target-queue"><a href="#1、dispatch-set-target-queue" class="headerlink" title="1、dispatch_set_target_queue"></a>1、dispatch_set_target_queue</h3><p>这个api有两个功能，一是设置dispatch_queue_create创建队列的优先级，二是建立队列的执行阶层。</p>
<p>（1）当使用dispatch_queue_create创建队列的时候，不管是串行还是并行，它们的优先级都是<code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code>级别，而这个API就是可以设置队列的优先级。</p>
<p>如下，将serailQueue设置成<code>DISPATCH_QUEUE_PRIORITY_HIGH</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_SERIAL);</div><div class="line">    <span class="built_in">dispatch_queue_t</span> globalQueue = </div><div class="line">dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>);</div><div class="line"><span class="comment">//注意：被设置优先级的队列是第一个参数。</span></div><div class="line">dispatch_set_target_queue(serialQueue, globalQueue);</div></pre></td></tr></table></figure>
<p>（2）使用这个API可以设置队列执行阶层，例如<code>dispatch_set_target_queue(queue1, targetQueue);</code>这样设置时，相当于将queue1指派给targetQueue，如果targetQueue是串行队列，则queue1是串行执行的；如果targetQueue是并行队列，那么queue1是并行的。</p>
<p>当targetQueue为串行队列时，代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">const char * kBGGCDTestIdentifier = &quot;kBGGCDTestIdentifier&quot;;</div><div class="line">void testTargetQueue() &#123;</div><div class="line">    dispatch_queue_t targetQueue = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">    dispatch_queue_t queue1 = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t queue2 = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    </div><div class="line">    dispatch_set_target_queue(queue1, targetQueue);</div><div class="line">    dispatch_set_target_queue(queue2, targetQueue);</div><div class="line">    </div><div class="line">    dispatch_async(queue1, ^&#123;</div><div class="line">        NSLog(@&quot;queue1 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(queue1, ^&#123;</div><div class="line">        NSLog(@&quot;queue1 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(queue2, ^&#123;</div><div class="line">        NSLog(@&quot;queue2 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(queue2, ^&#123;</div><div class="line">        NSLog(@&quot;queue2 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(targetQueue, ^&#123;</div><div class="line">        NSLog(@&quot;target queue&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-03-11 00:03:31.015 BGGCDDemo[23237:6187006] queue1 1</div><div class="line">2016-03-11 00:03:31.015 BGGCDDemo[23237:6187006] queue1 2</div><div class="line">2016-03-11 00:03:31.016 BGGCDDemo[23237:6187006] queue2 1</div><div class="line">2016-03-11 00:03:31.017 BGGCDDemo[23237:6187006] queue2 2</div><div class="line">2016-03-11 00:03:31.018 BGGCDDemo[23237:6187006] target queue</div></pre></td></tr></table></figure>
<p>当上面代码中targetQueue是并行队列时</p>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188776] queue2 1</div><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188777] queue1 1</div><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188780] queue2 2</div><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188786] target queue</div><div class="line">2016-03-11 00:04:48.235 BGGCDDemo[23331:6188777] queue1 2</div></pre></td></tr></table></figure>
<p>参考：<a href="http://justsee.iteye.com/blog/2233252" target="_blank" rel="external">http://justsee.iteye.com/blog/2233252</a></p>
<h3 id="2、dispatch-after"><a href="#2、dispatch-after" class="headerlink" title="2、dispatch_after"></a>2、dispatch_after</h3><p>指定时间执行某些内容，例如，下面一秒后执行打印信息.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">      NSLog(@&quot;test&quot;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="3、dispatch-group"><a href="#3、dispatch-group" class="headerlink" title="3、dispatch_group"></a>3、dispatch_group</h3><p>经常会有这么个需求，就是多个queue中所有操作执行完之后，想再执行结束处理，而dispatch_group正是干这个的。它有两种操作可以做到，一种是使用dispatch_group_notify，另外一种是使用dispatch_group_wait。</p>
<p>它们区别是dispatch_group_notify是可以将结束追加到某个队列当中，不会阻塞当前执行的线程；而dispatch_group_wait会阻塞当前执行线程，直到group中所有处理全部执行结束或超过等待的指定时间。当然，可以使用<code>DISPATCH_TIME_NOW</code>就不用等待，然后在主线程的Runloop每次循环中，检查执行是否结束，这样就不会堵塞当前执行的线程了，不过这样实现起来就会麻烦很多。所以，推荐使用dispatch_group_notify。</p>
<p>使用dispatch_group_notify时，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">void testGroupNotification() &#123;</div><div class="line">    dispatch_queue_t serialQueue = dispatch_queue_create(&quot;BG.serailQueue.com&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrentQueue.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    </div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;finish!&quot;);</div><div class="line">    &#125;);</div><div class="line">    NSLog(@&quot;testGroupNotification&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用dispatch_group_wait时，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void testGroupWait() &#123;</div><div class="line">    dispatch_queue_t serialQueue = dispatch_queue_create(&quot;BG.serailQueue.com&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrentQueue.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    </div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 2&quot;);</div><div class="line">        sleep(1);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line">    NSLog(@&quot;testGroupNotification&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、dispatch-barrier-async"><a href="#4、dispatch-barrier-async" class="headerlink" title="4、dispatch_barrier_async"></a>4、dispatch_barrier_async</h3><p>dispatch_barrier_async加入的处理，会等待队列中所有的处理结束后才执行barrier当中的处理，而且只有等待barrier执行完之后，才会继续执行后续处理。<strong>使用并行队列和dispatch_barrier_async可以做到很高效的数据库或文件访问</strong>。</p>
<p>测试代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void testBarrier() &#123;</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrent.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 3&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_barrier_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;writing&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 4&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 5&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2016-03-11 10:31:47.980 BGGCDDemo[28694:6276100] reading 2</div><div class="line">2016-03-11 10:31:47.980 BGGCDDemo[28694:6276099] reading 1</div><div class="line">2016-03-11 10:31:47.981 BGGCDDemo[28694:6276102] reading 3</div><div class="line">2016-03-11 10:31:47.981 BGGCDDemo[28694:6276102] writing</div><div class="line">2016-03-11 10:31:47.982 BGGCDDemo[28694:6276102] reading 4</div><div class="line">2016-03-11 10:31:47.982 BGGCDDemo[28694:6276099] reading 5</div></pre></td></tr></table></figure>
<h3 id="5、dispatch-sync"><a href="#5、dispatch-sync" class="headerlink" title="5、dispatch_sync"></a>5、dispatch_sync</h3><p>与dispatch_async异步不同的是dispatch_sync会等待当前处理结束之后有返回结果时才会继续往下走。与dispatch_group_wait有点类似，当使用dispatch_sync时，当前线程会被阻塞，直到它有返回结果为止。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void testSync() &#123;</div><div class="line">    dispatch_queue_t serialQueue = dispatch_queue_create(&quot;BG.serailQueue.com&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrent.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_sync(serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;test&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_sync(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;test2&quot;);</div><div class="line">    &#125;);</div><div class="line">    NSLog(@&quot;finish&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2016-03-11 10:35:43.166 BGGCDDemo[28912:6278490] test</div><div class="line">2016-03-11 10:35:43.167 BGGCDDemo[28912:6278490] test2</div><div class="line">2016-03-11 10:35:43.167 BGGCDDemo[28912:6278490] finish</div></pre></td></tr></table></figure>
<p>使用dispatch_sync很容易造成死锁，如下代码在主线程中运行就会造成死锁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">    NSLog(@&quot;test&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>分析：主线程会等待dispatch_sync函数返回，而dispatch_sync要等block执行完才会返回。而主线程是串行队列，采用FIFO队列执行任务，dispatch_sync加入的block是后加入的，这样的话这个block是得不到执行的，从而产生了死锁。</p>
<p><strong>官方文档指出：dispatch_sync的当前执行队列与提交block执行的目标队列相同时并且是串行队列时将造成死锁。</strong></p>
<p>参考：<br><a href="http://www.jianshu.com/p/44369c02b62a" target="_blank" rel="external">dispatch_sync死锁问题研究</a><br><a href="http://www.cnblogs.com/tangbinblog/p/4133481.html" target="_blank" rel="external">GCD 之线程死锁</a></p>
<h3 id="6、dispatch-apply"><a href="#6、dispatch-apply" class="headerlink" title="6、dispatch_apply"></a>6、dispatch_apply</h3><p>dispatch_apply函数是dispatch_sync和DISPATCH Group的关联API。该函数按指定的次数将指定的Block追加到指定的队列当中，并等待全部处理执行结束。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void testApply() &#123;</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrent.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_apply(5, concurrentQueue, ^(size_t index) &#123;</div><div class="line">        NSLog(@&quot;%zd&quot;, index);</div><div class="line">    &#125;);</div><div class="line">    NSLog(@&quot;done!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6331022] 0</div><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6331025] 2</div><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6330953] 1</div><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6331023] 3</div><div class="line">2016-03-11 12:08:35.525 BGGCDDemo[32542:6331022] 4</div><div class="line">2016-03-11 12:08:35.525 BGGCDDemo[32542:6330953] done!</div></pre></td></tr></table></figure>
<p><strong>注意：因为dispatch_apply会让当前执行的线程等待，阻塞线程，因此最好将它放在dispatch_async中执行。</strong></p>
<h3 id="7、dispatch-suspend-dispatch-resume"><a href="#7、dispatch-suspend-dispatch-resume" class="headerlink" title="7、dispatch_suspend/dispatch_resume"></a>7、dispatch_suspend/dispatch_resume</h3><p>dispatch_suspend可以暂停当前队列的执行，dispatch_resume恢复当前队列的执行。<br>这两个函数都已经执行的处理没有影响。挂起后，追加到queue中但尚未执行的处理在此之后停止执行。而恢复则使得这些处理能够继续执行。</p>
<h3 id="8、Dispatch-Semaphore"><a href="#8、Dispatch-Semaphore" class="headerlink" title="8、Dispatch Semaphore"></a>8、Dispatch Semaphore</h3><p>信号量，更细粒度的处理资源竞争的方案。<br>主要用到三个方法dispatch_semaphore_create、dispatch_semaphore_wait、dispatch_semaphore_signal。</p>
<ul>
<li>dispatch_semaphore_create：创建一个dispatch_semaphore_t，并且初始化Dispatch Semaphore的计数值；</li>
<li>dispatch_semaphore_wait：等待Dispatch Semaphore的计数值大于等于1，如果大于等于1，则计数值减1并且往下继续执行；如果等于0，则一直等待计数值增加。</li>
<li>dispatch_semaphore_sigal：将Dispatch Semaphore的计数值加1</li>
</ul>
<p>这三个方法配合使用，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void testSemaphore() &#123;</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrentQueue.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(1);</div><div class="line">    NSMutableArray *array = [NSMutableArray array];</div><div class="line">    for (NSInteger i = 0; i &lt; 10000; i++) &#123;</div><div class="line">        dispatch_async(concurrentQueue, ^&#123;</div><div class="line">            dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">            [array addObject:[NSNumber numberWithInteger:i]];</div><div class="line">            dispatch_semaphore_signal(semaphore);</div><div class="line">            NSLog(@&quot;%zd&quot;, i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="9、dispatch-once"><a href="#9、dispatch-once" class="headerlink" title="9、dispatch_once"></a>9、dispatch_once</h3><p>保证在应用程序中只执行一次指定的处理，一般应用场景就是单例了。</p>
<h3 id="10、dispatch-source"><a href="#10、dispatch-source" class="headerlink" title="10、dispatch_source"></a>10、dispatch_source</h3><p>与Dispatch Queue不同的是，dispatch_source是可以进行取消的，而且可以添加取消的block回调；dispatch_source可以做异步读取文件映像、定时器、监听文件目录变化等等，具体请见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_DATA_ADD</td>
<td style="text-align:left">数据增加</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_DATA_OR</td>
<td style="text-align:left">数据OR</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_MACH_SEND</td>
<td style="text-align:left">Mach端口发送</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_MACH_RECV</td>
<td style="text-align:left">Mach端口接收</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>
<td style="text-align:left">内存情况</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_PROC</td>
<td style="text-align:left">进程事件</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_READ</td>
<td style="text-align:left">读数据</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_SIGNAL</td>
<td style="text-align:left">信号</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_TIMER</td>
<td style="text-align:left">定时器</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_VNODE</td>
<td style="text-align:left">文件系统变化</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_WRITE</td>
<td style="text-align:left">文件写入</td>
</tr>
</tbody>
</table>
<p>定时器代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (void)testSourceTimer &#123;</div><div class="line">    //定时器在主线程运行</div><div class="line">    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());</div><div class="line">    //设置定时器每隔2秒调用一次，允许延迟1秒</div><div class="line">    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 2.0 * NSEC_PER_SEC, 1.0 * NSEC_PER_SEC);</div><div class="line">    //定时器执行的处理</div><div class="line">    dispatch_source_set_event_handler(timer, ^&#123;</div><div class="line">        NSLog(@&quot;timer work&quot;);</div><div class="line">//        dispatch_source_cancel(timer);</div><div class="line">    &#125;);</div><div class="line">    //定时器取消所做的处理</div><div class="line">    dispatch_source_set_cancel_handler(timer, ^&#123;</div><div class="line">        NSLog(@&quot;timer cancel!&quot;);</div><div class="line">    &#125;);</div><div class="line">    //需要将定时器设置为全局变量，否则就会被提前释放</div><div class="line">    self.timer = timer;</div><div class="line">    //启动定时器</div><div class="line">    dispatch_resume(timer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>监听文件夹变化代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (void)testSourceForObservFile &#123;</div><div class="line">    //创建文件夹，写入文件，用来进行测试</div><div class="line">    NSString *cacheDirectory = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];</div><div class="line">    NSString *directory = [NSString stringWithFormat:@&quot;%@/test&quot;, cacheDirectory];</div><div class="line">    if(![[NSFileManager defaultManager] fileExistsAtPath:directory isDirectory:nil]) &#123;</div><div class="line">        [[NSFileManager defaultManager] createDirectoryAtPath:directory withIntermediateDirectories:YES attributes:nil error:nil];</div><div class="line">    &#125;</div><div class="line">    NSString *filePath = [NSString stringWithFormat:@&quot;%@/test.txt&quot;, directory];</div><div class="line">    if(![[NSFileManager defaultManager] fileExistsAtPath:filePath]) &#123;</div><div class="line">        [@&quot;hello&quot; writeToFile:filePath atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSURL *directoryURL = [NSURL URLWithString:directory]; // assume this is set to a directory</div><div class="line">    int const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</div><div class="line">    if (fd &lt; 0) &#123;</div><div class="line">        char buffer[80];</div><div class="line">        strerror_r(errno, buffer, sizeof(buffer));</div><div class="line">        NSLog(@&quot;Unable to open \&quot;%@\&quot;: %s (%d)&quot;, [directoryURL path], buffer, errno);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    //设置源监听文件夹的变化，其中监听的是写入、删除、更改名字</div><div class="line">    dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,</div><div class="line">                                                      DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE | DISPATCH_VNODE_RENAME, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class="line">    dispatch_source_set_event_handler(source, ^()&#123;</div><div class="line">        //获取源变化的具体标志</div><div class="line">        unsigned long const data = dispatch_source_get_data(source);</div><div class="line">        if (data &amp; DISPATCH_VNODE_WRITE) &#123;</div><div class="line">            NSLog(@&quot;The directory changed.&quot;);</div><div class="line">        &#125;</div><div class="line">        if (data &amp; DISPATCH_VNODE_DELETE) &#123;</div><div class="line">            NSLog(@&quot;The directory has been deleted.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    dispatch_source_set_cancel_handler(source, ^()&#123;</div><div class="line">        close(fd);</div><div class="line">    &#125;);</div><div class="line">    self.source = source;</div><div class="line">    dispatch_resume(self.source);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="https://github.com/ming1016/study/wiki/%E7%BB%86%E8%AF%B4GCD%EF%BC%88Grand-Central-Dispatch%EF%BC%89%E5%A6%82%E4%BD%95%E7%94%A8" target="_blank" rel="external">细说GCD如何使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GCD的知识点：&quot;&gt;&lt;a href=&quot;#GCD的知识点：&quot; class=&quot;headerlink&quot; title=&quot;GCD的知识点：&quot;&gt;&lt;/a&gt;GCD的知识点：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;queue分成两种，分别是串行队列(Serial Dispatch Queue)和并行队列（Concurrent Dispatch Queue)。&lt;/li&gt;
&lt;li&gt;串行队列只会创建一个线程，而各个串行队列之间是并行的。&lt;/li&gt;
&lt;li&gt;串行队列个数创建不受限制，也就是通过串行队列创建的线程可以有很多个，但是这样会存在消耗大量内存的问题；而并行队列不会，不管创建多少个并行队列，XNU内核只使用有效管理的线程。&lt;/li&gt;
&lt;li&gt;在iOS6以后，ARC已经实现了GCD的内存管理，所以不用我们去管理它的内存了。&lt;/li&gt;
&lt;li&gt;系统已经为我们提供了两个queue，分别是main queue和global queue，其中main queue是串行队列，global queue是并行队列。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="Runtime" scheme="http://www.liuchungui.com/tags/Runtime/"/>
    
      <category term="Runtime总结" scheme="http://www.liuchungui.com/tags/Runtime%E6%80%BB%E7%BB%93/"/>
    
      <category term="Runtime调用代码" scheme="http://www.liuchungui.com/tags/Runtime%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative之Flex布局总结</title>
    <link href="http://www.liuchungui.com/2016/04/04/reactnativezhi-flexbu-ju-zong-jie/"/>
    <id>http://www.liuchungui.com/2016/04/04/reactnativezhi-flexbu-ju-zong-jie/</id>
    <published>2016-04-04T10:35:53.000Z</published>
    <updated>2016-08-06T05:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>从二月份开始学习ReactNative到现在已经有两个月了，零碎的记录了很多笔记，一直想写一些ReactNative相关的东西，奈何感觉自己学习的还比较浅陋，而且笔记比较杂乱，不知从何而起，所以迟迟没有动笔。清明三天假，决定无论如何都得整一篇出来。本来是想整一篇ReactNative布局篇的，但是看看那么多布局属性，自己对CSS又不是特别熟悉，布局篇从何谈起？所以，专门拿出ReactNative中布局比较重要的一个点Flex布局来做下总结，算是开启ReactNative篇章。</p>
<p>Flex是Flexible Box的缩写，意为“弹性布局”，2009年它由W3C提出了一种新的网页布局方案。而FaceBook将这个布局也应用到React和ReactNative两个项目当中。而在ReactNative当中，网页的有些属性和属性的值并不支持，下面来看看ReactNative当中支持的属性。（如果对于Flex布局不太了解的同学，可以看看<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a>）</p>
<a id="more"></a>
<h2 id="一、容器属性："><a href="#一、容器属性：" class="headerlink" title="一、容器属性："></a>一、容器属性：</h2><p>ReactNative支持的容器属性有flexDirection、flexWrap、justifyContent和alignItems。</p>
<h4 id="1、-flexDirection属性"><a href="#1、-flexDirection属性" class="headerlink" title="1、 flexDirection属性"></a>1、 flexDirection属性</h4><p>flexDirection属性决定了主轴的方向，它有两个值：</p>
<ul>
<li>row: 主轴为水平方向，起点在左端</li>
<li>column:  主轴为垂直方向，起点在顶部</li>
</ul>
<h4 id="2、flexWrap属性"><a href="#2、flexWrap属性" class="headerlink" title="2、flexWrap属性"></a>2、flexWrap属性</h4><p>flexWrap属性定义一条轴线排不下时是否折行。它有两个值，分别是’wrap’和’nowrap’，分别代表支持换行和不支持换行，默认是’nowrap’。</p>
<h4 id="3、justifyContent属性"><a href="#3、justifyContent属性" class="headerlink" title="3、justifyContent属性"></a>3、justifyContent属性</h4><p>主轴的对齐方式，默认为’flex-start’，它的值有五个：</p>
<ul>
<li>flex-start：主轴起点对齐</li>
<li>flex-end：主轴终点</li>
<li>center：居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等</li>
<li>space-around: 每个项目两侧的间隔相等。项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h4 id="4、alignItems属性"><a href="#4、alignItems属性" class="headerlink" title="4、alignItems属性"></a>4、alignItems属性</h4><p>交叉轴的对齐方式，默认为’stretch’，它有四个值：</p>
<ul>
<li>flex-start: 交叉轴的起点对齐</li>
<li>flex-end: 交叉轴的终点对齐</li>
<li>center: 交叉轴的中心对齐</li>
<li>stretch: 容器中的所有项目拉伸填满整个容器</li>
</ul>
<h2 id="二、项目属性"><a href="#二、项目属性" class="headerlink" title="二、项目属性"></a>二、项目属性</h2><h4 id="1、flex属性"><a href="#1、flex属性" class="headerlink" title="1、flex属性"></a>1、flex属性</h4><p>是否让当前的视图尽量占用更大的空间，这个属性可能使项目属性justifyContent失效。有两个值0和1，0代表否，1代表是，默认为0。</p>
<h3 id="2、alignSelf属性"><a href="#2、alignSelf属性" class="headerlink" title="2、alignSelf属性"></a>2、alignSelf属性</h3><p>允许单个项目在交叉轴方向上与其他项目不一样的对齐方式，可覆盖alignItems属性，它的值有五个，除了’auto’，其他都与alignItem属性完全一致，默认为’auto’。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>在刚开始接触ReactNative的时候，对于我这么一个从未有过前端开发的iOS开发程序员，两个地方直接让我懵了，一是里面的语法，另外一个就是Flex布局。布局当中其它例如bottom、left、margin等等属性都能从字面意思理解，而Flex布局，确实是从没见过的东西，不理解里面的概念根本没法用。好在找到了阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a>的这篇文章，快速的掌握了Flex布局。<br>在这几天ReactNative的开发当中，越发觉得Flex布局的重要性，能将上面的属性全部理解清楚的话，并且灵活使用，必然会让ReactNative开发之旅更加得心应手。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a><br><a href="http://reactnative.cn/docs/flexbox.html#content" target="_blank" rel="external">弹性盒(Flexbox)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从二月份开始学习ReactNative到现在已经有两个月了，零碎的记录了很多笔记，一直想写一些ReactNative相关的东西，奈何感觉自己学习的还比较浅陋，而且笔记比较杂乱，不知从何而起，所以迟迟没有动笔。清明三天假，决定无论如何都得整一篇出来。本来是想整一篇ReactNative布局篇的，但是看看那么多布局属性，自己对CSS又不是特别熟悉，布局篇从何谈起？所以，专门拿出ReactNative中布局比较重要的一个点Flex布局来做下总结，算是开启ReactNative篇章。&lt;/p&gt;
&lt;p&gt;Flex是Flexible Box的缩写，意为“弹性布局”，2009年它由W3C提出了一种新的网页布局方案。而FaceBook将这个布局也应用到React和ReactNative两个项目当中。而在ReactNative当中，网页的有些属性和属性的值并不支持，下面来看看ReactNative当中支持的属性。（如果对于Flex布局不太了解的同学，可以看看&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flex 布局教程：语法篇&lt;/a&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/tags/ReactNative/"/>
    
      <category term="react-native" scheme="http://www.liuchungui.com/tags/react-native/"/>
    
      <category term="Flex布局" scheme="http://www.liuchungui.com/tags/Flex%E5%B8%83%E5%B1%80/"/>
    
      <category term="Flex" scheme="http://www.liuchungui.com/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>Runtime之类与对象总结</title>
    <link href="http://www.liuchungui.com/2016/03/14/runtimezhi-lei-yu-dui-xiang-zong-jie/"/>
    <id>http://www.liuchungui.com/2016/03/14/runtimezhi-lei-yu-dui-xiang-zong-jie/</id>
    <published>2016-03-14T15:30:27.000Z</published>
    <updated>2016-10-03T09:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前在使用<a href="https://github.com/elado/jastor" target="_blank" rel="external">jastor</a>解析Json成model的时候里面涉及到了Runtime里面的知识，所以专门看了<a href="http://blog.jobbole.com/79566/" target="_blank" rel="external">Objective-C Runtime 运行时之一到六</a>这一系列的文章，整个Jastor也就懂了，现在非常出名的框架<a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a>，<a href="https://github.com/icanzilb/JSONModel" target="_blank" rel="external">JSONModel</a>也都是差不多的原理。但是，一年之后的今天重新再看的时候，发现大概思路知道，但是具体的一些细节实现需要写的时候，却一时上不了手，所以重新看了<a href="http://blog.jobbole.com/79566/" target="_blank" rel="external">Objective-C Runtime 运行时</a>一系列，然后整理了一下，细节部分附上一些代码，方便以后查找。<br><a id="more"></a></p>
<h2 id="一、对象、类、元类之间的关系"><a href="#一、对象、类、元类之间的关系" class="headerlink" title="一、对象、类、元类之间的关系"></a>一、对象、类、元类之间的关系</h2><ul>
<li>每个对象是一个objc_object结构体，此结构体只有一个元素即指向其类的isa指针，isa指针的类型为Class。(Class的结构体后面有）</li>
<li>每个类也是一个对象，它的isa指针指向它的元类(meta class)，一般元类都是唯一的。</li>
<li>每个元类也是一个对象，它的isa指针指向NSObject的元类，而NSObject的元类指向它本身（即NSObject元类）</li>
<li>而每个类的super class都指向它的父类，直至NSObject，NSObject的super class为null。</li>
<li>每个元类的super class都指向它的父元类，直至NSObject元类。NSObject元类的父元类是NSObject，NSObject的父类是nil。</li>
</ul>
<p>注：上面使用代码测试过，主要使用object_getClass、class_getSuperClass和objc_getMetaClass来获取类、父类、元类，然后打印指针进行查看。</p>
<h2 id="二、类与对象基础数据结构"><a href="#二、类与对象基础数据结构" class="headerlink" title="二、类与对象基础数据结构"></a>二、类与对象基础数据结构</h2><p>Objective-C类是由Class类型来表示的，它实际上是一个指向objc_class结构体的指针，它的定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div></pre></td></tr></table></figure>
<p>查看objc/runtime.h中objc_class结构体的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct objc_class &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line"> </div><div class="line">#if !__OBJC2__</div><div class="line">    Class super_class                       OBJC2_UNAVAILABLE;  // 父类</div><div class="line">    const char *name                        OBJC2_UNAVAILABLE;  // 类名</div><div class="line">    long version                            OBJC2_UNAVAILABLE;  // 类的版本信息，默认为0</div><div class="line">    long info                               OBJC2_UNAVAILABLE;  // 类信息，供运行期使用的一些位标识</div><div class="line">    long instance_size                      OBJC2_UNAVAILABLE;  // 该类的实例变量大小</div><div class="line">    struct objc_ivar_list *ivars            OBJC2_UNAVAILABLE;  // 该类的成员变量链表</div><div class="line">    struct objc_method_list **methodLists   OBJC2_UNAVAILABLE;  // 方法定义的链表</div><div class="line">    struct objc_cache *cache                OBJC2_UNAVAILABLE;  // 方法缓存</div><div class="line">    struct objc_protocol_list *protocols    OBJC2_UNAVAILABLE;  // 协议链表</div><div class="line">#endif</div><div class="line"> </div><div class="line">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>
<h2 id="三、调用方法时的流程"><a href="#三、调用方法时的流程" class="headerlink" title="三、调用方法时的流程"></a>三、调用方法时的流程</h2><p>首先到当前对象所属的类中的方法缓存列表中查找这个方法，如果没有则到该类的方法定义链表中查找方法，如果查找到，则执行这个方法将返回值返回给原调用对象，并且将这个方法加入缓存cache当中；如果没有查找到则通过super_class找到它的父类，到它的父类中查找。</p>
<p>想了解更多Runtime方法调用知识，请看<a href="http://blog.jobbole.com/79574/" target="_blank" rel="external">Objective-C Runtime 运行时之三：方法与消息</a></p>
<h2 id="四、类与对象的操作函数"><a href="#四、类与对象的操作函数" class="headerlink" title="四、类与对象的操作函数"></a>四、类与对象的操作函数</h2><p>runtime提供了大量的函数来操作类与对象，操作类的函数一般前缀是class，而操作对象的函数一般前缀是objc。</p>
<h4 id="1、类相关操作函数"><a href="#1、类相关操作函数" class="headerlink" title="1、类相关操作函数"></a>1、类相关操作函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 获取类的类名</div><div class="line">const char * class_getName ( Class cls );</div><div class="line">// 获取类的父类</div><div class="line">Class class_getSuperclass ( Class cls );</div><div class="line"> </div><div class="line">// 判断给定的Class是否是一个元类</div><div class="line">BOOL class_isMetaClass ( Class cls );</div><div class="line">// 获取实例大小</div><div class="line">size_t class_getInstanceSize ( Class cls );</div></pre></td></tr></table></figure>
<h4 id="2、成员变量相关操作函数"><a href="#2、成员变量相关操作函数" class="headerlink" title="2、成员变量相关操作函数"></a>2、成员变量相关操作函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 获取类中指定名称实例成员变量的信息</div><div class="line">Ivar class_getInstanceVariable ( Class cls, const char *name );</div><div class="line"> </div><div class="line">// 获取类成员变量的信息</div><div class="line">Ivar class_getClassVariable ( Class cls, const char *name );</div><div class="line"> </div><div class="line">// 添加成员变量</div><div class="line">BOOL class_addIvar ( Class cls, const char *name, size_t size, uint8_t alignment, const char *types );</div><div class="line"> </div><div class="line">// 获取整个成员变量列表</div><div class="line">Ivar * class_copyIvarList ( Class cls, unsigned int *outCount );</div></pre></td></tr></table></figure>
<p>需要注意：</p>
<ul>
<li>class_copyIvarList：获取的是所有成员实例属性，与property获取不一样。</li>
<li>class_addIvar: <strong>OC不支持往已存在的类中添加实例变量</strong>，因此不管是系统库提供的类，还是我们自定义的类，都无法动态给它添加成员变量。<strong>但，如果是我们通过运行时来创建的类，我们可以使用class_addIvar来添加。不过，需要注意的是，这个方法只能在objc_allocateClassPair函数与objc_registerClassPair之间调用。</strong>另外，<strong>这个类也不能是元类</strong>。</li>
</ul>
<p>代码测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  测试成员变量</div><div class="line"> */</div><div class="line">- (void)testIvar &#123;</div><div class="line">    unsigned int outCount;</div><div class="line">    if(class_addIvar([Student class], &quot;_hell&quot;, sizeof(id), log2(sizeof(id)), &quot;@&quot;)) &#123;</div><div class="line">        NSLog(@&quot;Add Ivar Success!&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;Add Ivar failed!&quot;);</div><div class="line">    &#125;</div><div class="line">    Ivar *ivarList = class_copyIvarList([Student class], &amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line">        const char *ivarName = ivar_getName(ivar);</div><div class="line">        ptrdiff_t offset = ivar_getOffset(ivar);</div><div class="line">        const char *types = ivar_getTypeEncoding(ivar);</div><div class="line">        NSLog(@&quot;ivar:%s, offset:%zd, type:%s&quot;, ivarName, offset, types);</div><div class="line">    &#125;</div><div class="line">    free(ivarList);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：class_addIvar中第三个参数设置类型的大小，第四个参数设置对齐，对齐传递log2(size)，具体原因参考：<a href="http://stackoverflow.com/questions/33184826/what-does-class-addivars-alignment-do-in-objective-c" target="_blank" rel="external">http://stackoverflow.com/questions/33184826/what-does-class-addivars-alignment-do-in-objective-c</a></p>
<h4 id="3、属性操作函数"><a href="#3、属性操作函数" class="headerlink" title="3、属性操作函数"></a>3、属性操作函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 获取指定的属性</div><div class="line">objc_property_t class_getProperty ( Class cls, const char *name );</div><div class="line"> </div><div class="line">// 获取属性列表</div><div class="line">objc_property_t * class_copyPropertyList ( Class cls, unsigned int *outCount );</div><div class="line"> </div><div class="line">// 为类添加属性</div><div class="line">BOOL class_addProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</div><div class="line"> </div><div class="line">// 替换类的属性</div><div class="line">void class_replaceProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</div></pre></td></tr></table></figure>
<p>这一种方法也是针对ivar来操作的，不过它只操作那些property的值，包括扩展中的property。</p>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">- (void)testProperty &#123;</div><div class="line">    /**</div><div class="line">     *  添加property</div><div class="line">     */</div><div class="line">    objc_property_attribute_t attribute1 = &#123;&quot;T&quot;, &quot;@\&quot;NSString\&quot;&quot;&#125;;</div><div class="line">    objc_property_attribute_t attribute2 = &#123;&quot;C&quot;, &quot;&quot;&#125;;</div><div class="line">    objc_property_attribute_t attribute3 = &#123;&quot;N&quot;, &quot;&quot;&#125;;</div><div class="line">    objc_property_attribute_t attribute4 = &#123;&quot;V&quot;, &quot;_lcg&quot;&#125;;</div><div class="line">    objc_property_attribute_t attributesList[] = &#123;attribute1, attribute2, attribute3, attribute4&#125;;</div><div class="line">    if(class_addProperty([Student class], &quot;lcg&quot;, attributesList, 4)) &#123;</div><div class="line">        NSLog(@&quot;add property success!&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;add property failure!&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  打印property的name和property_attribute_t</div><div class="line">     */</div><div class="line">    unsigned int outCount;</div><div class="line">    objc_property_t *propertyList = class_copyPropertyList([Student class], &amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        objc_property_t property = propertyList[i];</div><div class="line">        const char *propertyName = property_getName(property);</div><div class="line">        const char *attribute = property_getAttributes(property);</div><div class="line">        NSLog(@&quot;propertyName: %s, attribute: %s&quot;, propertyName, attribute);</div><div class="line">        </div><div class="line">        unsigned int attributeCount;</div><div class="line">        objc_property_attribute_t *attributeList = property_copyAttributeList(property, &amp;attributeCount);</div><div class="line">        for (unsigned int j = 0; j &lt; attributeCount; j++) &#123;</div><div class="line">            objc_property_attribute_t attribute = attributeList[j];</div><div class="line">            const char *name = attribute.name;</div><div class="line">            const char *value = attribute.value;</div><div class="line">            NSLog(@&quot;attribute name: %s, value: %s&quot;, name, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码有几个知识点需要说一下： </p>
<p>(1) 其中property_attribute的相关内容需要说明下。   </p>
<p>   property_attribute为<strong>T@”NSString”,&amp;,N,V_exprice</strong>时：    </p>
<ul>
<li><strong>T</strong> 是固定的，放在第一个</li>
<li><strong>@”NSString”</strong> 代表这个property是一个字符串对象</li>
<li><strong>&amp;</strong> 代表强引用，其中与之并列的是：’C’代表Copy，’&amp;’代表强引用，’W’表示weak，assign为空，默认为assign。</li>
<li><strong>N</strong> 区分的nonatomic和atomic，默认为atomic，atomic为空，’N’代表是nonatomic</li>
<li><p><strong>V_exprice</strong> V代表变量，后面紧跟着的是成员变量名，代表这个property的成员变量名为_exprice。</p>
<p>property_attribute为<strong>T@”NSNumber”,R,N,V_yearsOld</strong>时：</p>
</li>
<li><p><strong>T</strong> 是固定的，放在第一个</p>
</li>
<li><strong>@”NSNumber”</strong> 代表这个property是一个NSNumber对象</li>
<li><strong>R</strong> 代表readOnly属性，readwrite时为空</li>
<li><strong>N</strong> 区分的nonatomic和atomic，默认为atomic，atomic为空，’N’代表是nonatomic</li>
<li><strong>V_yearsOld</strong> V代表变量，后面紧跟着的是成员变量名，代表这个property的成员变量名为_yearsOld。</li>
</ul>
<p>使用例子参考：<a href="http://www.tuicool.com/articles/aY3Ujii" target="_blank" rel="external">http://www.tuicool.com/articles/aY3Ujii</a><br>官方参考：<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW6" target="_blank" rel="external">Property Type</a></p>
<p>（2） 添加property，property_attribute_t是一个结构体，没有具体创建的方法，我们就只能使用{}这样结构体直接赋值过去。而且，添加property成功之后，它并不会生成<strong>实例属性、setter方法和getter方法</strong>。如果要真正调用的话，还需要我们自己添加对应的setter和getter方法。<br>详情使用请见：<a href="http://blog.csdn.net/meegomeego/article/details/18356169" target="_blank" rel="external">http://blog.csdn.net/meegomeego/article/details/18356169</a></p>
<h4 id="4、协议相关函数"><a href="#4、协议相关函数" class="headerlink" title="4、协议相关函数"></a>4、协议相关函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 添加协议</div><div class="line">BOOL class_addProtocol ( Class cls, Protocol *protocol );</div><div class="line"> </div><div class="line">// 返回类是否实现指定的协议</div><div class="line">BOOL class_conformsToProtocol ( Class cls, Protocol *protocol );</div><div class="line"> </div><div class="line">// 返回类实现的协议列表</div><div class="line">Protocol * class_copyProtocolList ( Class cls, unsigned int *outCount );</div></pre></td></tr></table></figure>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)testProtocolList &#123;</div><div class="line">    //添加协议</div><div class="line">    Protocol *p = @protocol(StudentDataSource);</div><div class="line">    if(class_addProtocol([Student class], p)) &#123;</div><div class="line">        NSLog(@&quot;添加协议成功!&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;添加协议失败!&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //判断是否实现了指定的协议</div><div class="line">    if(class_conformsToProtocol([Student class], p)) &#123;</div><div class="line">        NSLog(@&quot;遵循 %s协议&quot;, protocol_getName(p));</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;不遵循 %s协议&quot;, protocol_getName(p));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //获取类的协议列表</div><div class="line">    unsigned int outCount;</div><div class="line">    Protocol * __unsafe_unretained *protocolList = class_copyProtocolList([Student class], &amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        Protocol *protocol = protocolList[i];</div><div class="line">        const char *name = protocol_getName(protocol);</div><div class="line">        NSLog(@&quot;%s&quot;, name);</div><div class="line">    &#125;</div><div class="line">    free(protocolList);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：可以使用runtime添加协议</strong></p>
<h4 id="6、版本号（Version"><a href="#6、版本号（Version" class="headerlink" title="6、版本号（Version)"></a>6、版本号（Version)</h4><p>版本的使用两个方法，获取版本和设置版本，请看代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)testVersion &#123;</div><div class="line">    int version = class_getVersion([Student class]);</div><div class="line">    NSLog(@&quot;%d&quot;, version);</div><div class="line">    class_setVersion([Student class], 100);</div><div class="line">    version = class_getVersion([Student class]);</div><div class="line">    NSLog(@&quot;%d&quot;, version);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="五、动态创建类和对象"><a href="#五、动态创建类和对象" class="headerlink" title="五、动态创建类和对象"></a>五、动态创建类和对象</h2><h4 id="1、动态创建类"><a href="#1、动态创建类" class="headerlink" title="1、动态创建类"></a>1、动态创建类</h4><p>涉及以下函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 创建一个新类和元类</div><div class="line">Class objc_allocateClassPair ( Class superclass, const char *name, size_t extraBytes );</div><div class="line"> </div><div class="line">// 销毁一个类及其相关联的类</div><div class="line">void objc_disposeClassPair ( Class cls );</div><div class="line"> </div><div class="line">// 在应用中注册由objc_allocateClassPair创建的类</div><div class="line">void objc_registerClassPair ( Class cls );</div></pre></td></tr></table></figure>
<p>注意：objc_disposeClassPair只能销毁由objc_allocateClassPair创建的类，当有实例存在或者它的子类存在时，调用这个函数会抛出异常。</p>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)testCreateClass &#123;</div><div class="line">    Class cls = objc_allocateClassPair([Person class], &quot;Teacher&quot;, 0);</div><div class="line">    //添加成员变量，只能在运行时创建类添加，并且是在objc_allocateClassPair与objc_registerClassPair之间</div><div class="line">    if(class_addIvar(cls, &quot;_level&quot;, sizeof(id), log2(sizeof(id)), &quot;@\&quot;NSString\&quot;&quot;)) &#123;</div><div class="line">        NSLog(@&quot;添加_level成员变量成功&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;添加_level成员变量失败&quot;);</div><div class="line">    &#125;</div><div class="line">    objc_registerClassPair(cls);</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  当有实例存在不能销毁类，所以讲代码放到里面</div><div class="line">     */</div><div class="line">    &#123;</div><div class="line">        //创建对象</div><div class="line">        Person *p = [[cls alloc] init];</div><div class="line">        NSLog(@&quot;%@&quot;, [p class]);</div><div class="line">        [p printInfo];</div><div class="line">        //设置值</div><div class="line">        [p setValue:@&quot;高级讲师&quot; forKey:@&quot;level&quot;];</div><div class="line">        NSString *level = [p valueForKey:@&quot;level&quot;];</div><div class="line">        NSLog(@&quot;level: %@&quot;, level);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //销毁类，当有实例存在的时候是不能销毁类</div><div class="line">    objc_disposeClassPair(cls);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、实例操作函数"><a href="#六、实例操作函数" class="headerlink" title="六、实例操作函数"></a>六、实例操作函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 返回指定对象的一份拷贝</div><div class="line">id object_copy ( id obj, size_t size );</div><div class="line"> </div><div class="line">// 释放指定对象占用的内存</div><div class="line">id object_dispose ( id obj );</div><div class="line">// 修改类实例的实例变量的值</div><div class="line">Ivar object_setInstanceVariable ( id obj, const char *name, void *value );</div><div class="line"> </div><div class="line">// 获取对象实例变量的值</div><div class="line">Ivar object_getInstanceVariable ( id obj, const char *name, void **outValue );</div><div class="line"> </div><div class="line">// 返回指向给定对象分配的任何额外字节的指针</div><div class="line">void * object_getIndexedIvars ( id obj );</div><div class="line"> </div><div class="line">// 返回对象中实例变量的值</div><div class="line">id object_getIvar ( id obj, Ivar ivar );</div><div class="line"> </div><div class="line">// 设置对象中实例变量的值</div><div class="line">void object_setIvar ( id obj, Ivar ivar, id value );</div><div class="line">// 返回给定对象的类名</div><div class="line">const char * object_getClassName ( id obj );</div><div class="line"> </div><div class="line">// 返回对象的类</div><div class="line">Class object_getClass ( id obj );</div><div class="line"> </div><div class="line">// 设置对象的类</div><div class="line">Class object_setClass ( id obj, Class cls );</div></pre></td></tr></table></figure>
<p>实践代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)testInstance &#123;</div><div class="line">    Person *p = [Person new];</div><div class="line">    //object_copy在ARC下不能使用</div><div class="line">//    p = object_copy(p, class_getInstanceSize([Student class]));</div><div class="line">    //将p的isa指向Student</div><div class="line">    object_setClass(p, [Student class]);</div><div class="line">    [(Student *)p setName:@&quot;Jack&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是简单的将p这个对象的class设置为Student类，其实就是将p对象的isa指针指向Student类，KVO中的isa-swizzling其实就是这样干的。当调用setName:的方法的时候，就调用到了Student类中的setName。不过，这里调用Person类没有，而Student类有的方法会崩溃，报错Heap buffer overflow，就算是在非ARC下使用object_copy也是一样。</p>
<h2 id="七、获取类的定义"><a href="#七、获取类的定义" class="headerlink" title="七、获取类的定义"></a>七、获取类的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 获取已注册的类定义的列表</div><div class="line">int objc_getClassList ( Class *buffer, int bufferCount );</div><div class="line"> </div><div class="line">// 创建并返回一个指向所有已注册类的指针列表</div><div class="line">Class * objc_copyClassList ( unsigned int *outCount );</div><div class="line"> </div><div class="line">// 返回指定类的类定义</div><div class="line">Class objc_lookUpClass ( const char *name );</div><div class="line">Class objc_getClass ( const char *name );</div><div class="line">Class objc_getRequiredClass ( const char *name );</div><div class="line"> </div><div class="line">// 返回指定类的元类</div><div class="line">Class objc_getMetaClass ( const char *name );</div></pre></td></tr></table></figure>
<p>objc_getClassList和objc_copyClassList都是获取所有已注册的类；而objc_lookUpClass获取指定的类，如果没有注册则返回nil；objc_getRequiredClass也是获取指定的类，不过如果这个类不存则，则会崩溃；objc_getMetaClass专门用来获取类的元类，每个类都有一个有效并且唯一的元类，如果这个类没有注册则返回nil。</p>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (void)testGetClass &#123;</div><div class="line">    /**</div><div class="line">     *  第一种获取所有注册的类</div><div class="line">     */</div><div class="line">    Class *bufferClass;</div><div class="line">    int numClasses;</div><div class="line">    numClasses = objc_getClassList(NULL, 0);</div><div class="line">    if(numClasses &gt; 0) &#123;</div><div class="line">        bufferClass = (Class *)malloc(sizeof(Class)*numClasses);</div><div class="line">        numClasses = objc_getClassList(bufferClass, numClasses);</div><div class="line">        NSLog(@&quot;numer of classes: %d&quot;, numClasses);</div><div class="line">        for (int i = 0; i &lt; numClasses; i++) &#123;</div><div class="line">            Class cls = bufferClass[i];</div><div class="line">            NSLog(@&quot;class name: %s&quot;, class_getName(cls));</div><div class="line">        &#125;</div><div class="line">        free(bufferClass);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  第二种获取所有注册的类</div><div class="line">     */</div><div class="line">    unsigned int outCount;</div><div class="line">    Class *classLiset = objc_copyClassList(&amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        Class cls = classLiset[i];</div><div class="line">        NSLog(@&quot;class name: %s&quot;, class_getName(cls));</div><div class="line">    &#125;</div><div class="line">    free(classLiset);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种获取所有注册的类比第一种简单多了，建议使用第二种。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.jobbole.com/79566/" target="_blank" rel="external">Objective-C Runtime 运行时之一：类与对象</a>    </p>
<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100" target="_blank" rel="external">Type Encodings</a>    </p>
<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW6" target="_blank" rel="external">Property Type</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在使用&lt;a href=&quot;https://github.com/elado/jastor&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jastor&lt;/a&gt;解析Json成model的时候里面涉及到了Runtime里面的知识，所以专门看了&lt;a href=&quot;http://blog.jobbole.com/79566/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Runtime 运行时之一到六&lt;/a&gt;这一系列的文章，整个Jastor也就懂了，现在非常出名的框架&lt;a href=&quot;https://github.com/Mantle/Mantle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mantle&lt;/a&gt;，&lt;a href=&quot;https://github.com/icanzilb/JSONModel&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSONModel&lt;/a&gt;也都是差不多的原理。但是，一年之后的今天重新再看的时候，发现大概思路知道，但是具体的一些细节实现需要写的时候，却一时上不了手，所以重新看了&lt;a href=&quot;http://blog.jobbole.com/79566/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Objective-C Runtime 运行时&lt;/a&gt;一系列，然后整理了一下，细节部分附上一些代码，方便以后查找。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="Runtime, Runtime总结, Runtime调用代码" scheme="http://www.liuchungui.com/tags/Runtime-Runtime%E6%80%BB%E7%BB%93-Runtime%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
</feed>
