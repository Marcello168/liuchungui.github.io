<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘春桂的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.liuchungui.com/"/>
  <updated>2016-10-22T14:01:58.000Z</updated>
  <id>http://www.liuchungui.com/</id>
  
  <author>
    <name>liuchungui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>bootstrap-datetimepicker集成到angular使用</title>
    <link href="http://www.liuchungui.com/2016/10/22/bootstrap-datetimepicker%E9%9B%86%E6%88%90%E5%88%B0angular%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.liuchungui.com/2016/10/22/bootstrap-datetimepicker集成到angular使用/</id>
    <published>2016-10-22T13:32:31.000Z</published>
    <updated>2016-10-22T14:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司网站以前用的是原生的时间控件，用起来用户体验并不好，然后把这个就给我当专属bug了。</p>
<p>于是，前几天我专门在github上找相关的控件，找了几个，终于找到了一个满意的控件<a href="https://github.com/Eonasdan/bootstrap-datetimepicker" target="_blank" rel="external">bootstrap-datetimepicker</a>，推荐给大家。</p>
<p>不过它不是angular控件，所以还需要另外的封装，找到了<a href="https://github.com/atais/angular-eonasdan-datetimepicker" target="_blank" rel="external">angular-enoasdan-datetimepicker</a>这个，这里我就简单总结下继承和使用。</p>
<h2 id="如何安装？"><a href="#如何安装？" class="headerlink" title="如何安装？"></a>如何安装？</h2><p>使用npm进行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install --save eonasdan-bootstrap-datetimepicker</div><div class="line">$ npm install angular-eonasdan-datetimepicker --save</div></pre></td></tr></table></figure>
<p>引入js文件和css文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;../node_modules/moment/min/moment.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;../node_modules/moment/min/locales.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;../node_modules/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;../node_modules/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css&quot;&gt;</div><div class="line">&lt;script src=&quot;../node_modules/angular-eonasdan-datetimepicker/dist/angular-eonasdan-datetimepicker.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><h4 id="让app依赖这个模块"><a href="#让app依赖这个模块" class="headerlink" title="让app依赖这个模块"></a>让app依赖这个模块</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var salesApp = angular.module(&quot;salesApp&quot;, [&apos;ae-datetimepicker&apos;]);</div></pre></td></tr></table></figure>
<h4 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=&quot;text&quot; class=&quot;form-control&quot; datetimepicker ng-model=&quot;editingFile.effect_time&quot; options=&quot;dateOptions&quot;&gt;</div></pre></td></tr></table></figure>
<h4 id="angular中配置日期控件"><a href="#angular中配置日期控件" class="headerlink" title="angular中配置日期控件"></a>angular中配置日期控件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$scope.dateOptions = &#123;</div><div class="line">          locale: &apos;zh-cn&apos;,</div><div class="line">          format: &apos;L&apos;,</div><div class="line">          showClose: true,</div><div class="line">          keepOpen: false</div><div class="line">      &#125;;</div></pre></td></tr></table></figure>
<p><strong>需要注意的是</strong><code>zh-cn</code>是配置中文；<code>format</code>是配置日期格式，当日期格式是<code>L</code>时，会点击一下，自动隐藏日期弹框，用法来源于：<br> <a href="https://github.com/Eonasdan/bootstrap-datetimepicker/issues/1464" target="_blank" rel="external">How to close DateTimePicker after date is picker</a>这个链接，整个控件配置的选项在<a href="http://eonasdan.github.io/bootstrap-datetimepicker/Options/#format" target="_blank" rel="external">http://eonasdan.github.io/bootstrap-datetimepicker/Options/#format</a>这个文档中可查看。</p>
<p>效果如下（来自官网）：<br><img src="http://i.imgur.com/nfnvh5g.png" alt="DateTimePicker"></p>
<p>项目github地址：</p>
<p><a href="https://github.com/Eonasdan/bootstrap-datetimepicker" target="_blank" rel="external">bootstrap-datetimepicker</a></p>
<p><a href="https://github.com/atais/angular-eonasdan-datetimepicker" target="_blank" rel="external">angular-eonasdan-datetimepicker</a></p>
<p>官网文档：</p>
<p><a href="http://eonasdan.github.io/bootstrap-datetimepicker/Installing/" target="_blank" rel="external">http://eonasdan.github.io/bootstrap-datetimepicker/Installing/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司网站以前用的是原生的时间控件，用起来用户体验并不好，然后把这个就给我当专属bug了。&lt;/p&gt;
&lt;p&gt;于是，前几天我专门在github上找相关的控件，找了几个，终于找到了一个满意的控件&lt;a href=&quot;https://github.com/Eonasdan/bootstr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular1.5 入门之常用指令使用</title>
    <link href="http://www.liuchungui.com/2016/10/03/angular-%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.liuchungui.com/2016/10/03/angular-入门之常用指令使用/</id>
    <published>2016-10-03T06:40:09.000Z</published>
    <updated>2016-10-03T09:36:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>Angular使用了应该有一个月了，一直想总结来着，但是比较懒，所以一直拖着。这次正好趁着分享，写一篇相关内容的文章，来总结下Angular的基本使用和常用指令。本来打算写的是入门教程，发现入门教程怎么写都感觉不如官网，所以放弃了，可以把这一篇当做入门教程的补充版。如果大家要看入门教程可以看官方的<a href="https://docs.angularjs.org/tutorial" target="_blank" rel="external">angular tutorial</a>，中文版的话1.5版本的没找到，大家可以看<code>angular 1.4</code>的<a href="http://www.apjs.net/#dir31" target="_blank" rel="external">angular 教程</a>。</p>
<p>这里以一个简单的图片列表应用为demo，查看效果可以点击：<a href="http://www.liuchungui.com/example/angularExample/01/">http://www.liuchungui.com/example/angularExample/01/</a>查看，github地址是<a href="https://github.com/liuchungui/angularExample" target="_blank" rel="external">angularExample 01</a>。</p>
<a id="more"></a>
<p>现在跟着我一步一步来吧！</p>
<h2 id="一、使用npm管理器搭建环境"><a href="#一、使用npm管理器搭建环境" class="headerlink" title="一、使用npm管理器搭建环境"></a>一、使用npm管理器搭建环境</h2><p>我们使用npm包管理器来搭建环境，因为它易于安装和管理。我们先创建一个文件夹，初始化工程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir angularExample</div><div class="line">$ cd angularExample</div><div class="line">$ npm init</div></pre></td></tr></table></figure>
<p>初始化的时候，会让你填入项目的一些信息，之后我们输入<code>yes</code>之后，会在当前目录下生成一个<code>package.json</code>，里面是我们填入的信息。</p>
<p>之后，我们安装<code>angularJS</code>、<code>jquery</code>和<code>bootstrap</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#安装angular</div><div class="line">$ npm install --save angular</div><div class="line">#安装jquery</div><div class="line">$ npm install --save jquery</div><div class="line">#安装bootstrap</div><div class="line">$ npm install --save bootstrap</div></pre></td></tr></table></figure>
<p>这时，我们的项目工程文件下多了个<code>node_modules</code>文件夹，<code>node_modules</code>下有<code>angular</code>和<code>jquery</code>，这就说明我们安装成功了。</p>
<p>查看<code>package.json</code>，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;learning&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;dependencies&quot;: &#123;</div><div class="line">    &quot;angular&quot;: &quot;^1.5.8&quot;,</div><div class="line">    &quot;bootstrap&quot;: &quot;^3.3.7&quot;,</div><div class="line">    &quot;jquery&quot;: &quot;^3.1.1&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到<code>dependencies</code>那一块，这里说明我们项目依赖的是<code>angular 1.5.8</code>、<code>jquery 3.1.1</code>和<code>bootstrap 3.3.7</code>。</p>
<p>在安装完依赖之后，我们需要将我们的工程放入一个web环境下，例如apache等等。如果你没有对应的web环境，我们可以使用npm快速搭建一个，这里可参考<a href="http://www.alloyteam.com/2015/06/kuai-su-da-jian-jing-tai-fu-wu-qi-di-ji-zhong-fang-fa/" target="_blank" rel="external">快速搭建静态服务器的几种方法</a>。</p>
<p>到此，我们的环境算是搭建好了，现在开启我们的旅程吧！</p>
<h2 id="二、图片列表应用"><a href="#二、图片列表应用" class="headerlink" title="二、图片列表应用"></a>二、图片列表应用</h2><h3 id="1、导入文件"><a href="#1、导入文件" class="headerlink" title="1、导入文件"></a>1、导入文件</h3><p>克隆或下载<a href="https://github.com/liuchungui/angularExample.git" target="_blank" rel="external">angularExample</a>，将工程下面的<code>demoApp.css</code>样式文件、<code>image</code>文件夹和<code>resource</code>文件夹copy到你的工程目录下，这是我们所需要样式、图片和资源。</p>
<p>创建<code>index.html</code>和<code>demoApp.js</code>，在<code>index.html</code>文件中，导入<code>angular</code>、<code>jquery</code>和<code>bootstrap</code>这三个框架，然后导入<code>demoApp.css</code>和<code>demoApp.js</code>。</p>
<p>下面是index.html文件内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Hello World&lt;/title&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;demoApp.css&quot;&gt;</div><div class="line">    &lt;script src=&quot;node_modules/angular/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;node_modules/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;demoApp.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="2、添加列表展示页面"><a href="#2、添加列表展示页面" class="headerlink" title="2、添加列表展示页面"></a>2、添加列表展示页面</h4><p>下面是添加列表展示页之后index.html的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot; ng-app=&quot;demoApp&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;Hello World&lt;/title&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;node_modules/bootstrap/dist/css/bootstrap.css&quot;&gt;</div><div class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;demoApp.css&quot;&gt;</div><div class="line">    &lt;script src=&quot;node_modules/angular/angular.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;node_modules/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;script src=&quot;demoApp.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body ng-controller=&quot;demoController&quot;&gt;</div><div class="line">&lt;div class=&quot;photos&quot;&gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>demoApp.js中的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var demoApp = angular.module(&apos;demoApp&apos;, []);</div><div class="line"></div><div class="line">demoApp.controller(&apos;demoController&apos;, function ($scope, $http) &#123;</div><div class="line">    /**</div><div class="line">     * 获取imageList.json文件中的json数据</div><div class="line">     */</div><div class="line">    $http.get(&apos;resource/imageList.json&apos;).success(function (data) &#123;</div><div class="line">        console.log(data);</div><div class="line">        //绑定到scope当中的图片列表中</div><div class="line">        $scope.imageList = data;</div><div class="line">    &#125;).error(function (error) &#123;</div><div class="line">        console.log(error);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置图片的宽和高</div><div class="line">     */</div><div class="line">    $scope.imageStyle = function(width) &#123;</div><div class="line">        var windowWidth = window.document.body.clientWidth;</div><div class="line">        var scale = windowWidth/1932;</div><div class="line">        return &#123;</div><div class="line">            &apos;height&apos;: parseInt(352*scale) + &apos;px&apos;,</div><div class="line">            &apos;width&apos;: parseInt((windowWidth-36)/4) + &apos;px&apos;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * jquery事件</div><div class="line">     * resize是当窗口变化时,会触发resize事件</div><div class="line">     */</div><div class="line">    $(window).resize(function()&#123;</div><div class="line">        /**</div><div class="line">         * angular 事件, 重新更新界面, 做手动刷新</div><div class="line">         */</div><div class="line">        $scope.$apply(function()&#123;</div><div class="line">            //do something to update current scope based on the new innerWidth and let angular update the view.</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码，我们实现了一个简单展示图片的列表，而且做到了响应式布局，你可以在浏览器里面看到效果。这是怎么做到的？</p>
<h4 id="首先，创建demoApp应用"><a href="#首先，创建demoApp应用" class="headerlink" title="首先，创建demoApp应用"></a>首先，创建<code>demoApp</code>应用</h4><p>我们在<code>index.html</code>文件中<code>&lt;html lang=&quot;en&quot; ng-app=&quot;demoApp&quot;&gt;</code>中使用了<code>ng-app</code>指令，这个指令指定了<code>angular</code>中<code>demoApp</code>模块作为它的根模块，也指定了<code>html</code>标签作为我们angular应用的作用域。</p>
<p>随后，我们在<code>demoApp.js</code>文件中注册了<code>demoApp</code>模块，名称与上一步<code>ng-app</code>指定的名称对应，注册模块的模式是固定的，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 注册模块, []是依赖的模块</div><div class="line"> * @type &#123;angular.Module&#125;</div><div class="line"> */</div><div class="line">var demoApp = angular.module(&quot;demoApp&quot;, []);</div></pre></td></tr></table></figure>
<p>所使用的<code>angular.module</code>中有两个参数，第一个参数是注册的模块名称，第二个参数是这个注册模块依赖的模块。</p>
<h4 id="然后、创建控制器"><a href="#然后、创建控制器" class="headerlink" title="然后、创建控制器"></a>然后、创建控制器</h4><p>创建控制器，在html中只需要使用<code>ng-controller</code>指定一下就行了，如<code>&lt;body ng-controller=&quot;demoController&quot;&gt;</code>，那这个body标签就成为控制器的作用域了。而在js中，需要创建一个对应的控制器，样式如下面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(&quot;demoController&quot;, function ($scope, $http) &#123;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h4 id="最后，创建图片列表"><a href="#最后，创建图片列表" class="headerlink" title="最后，创建图片列表"></a>最后，创建图片列表</h4><p>图片列表中模块<code>index.html</code>中的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photos&quot;&gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot; /&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>它首先使用<code>ng-repeat</code>指令，遍历了<code>imageList</code>的内容，然后实例化了多个<code>&lt;img&gt;</code>。<br>在说<code>ng-repeat</code>命令之前，我们先来看看这个<code>imageList</code>是怎么来的。我们在<code>demoApp.js</code>中看到下面一段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取imageList.json文件中的json数据</div><div class="line"> */</div><div class="line">$http.get(&apos;resource/imageList.json&apos;).success(function (data) &#123;</div><div class="line">    console.log(data);</div><div class="line">    //绑定到scope当中的图片列表中</div><div class="line">    $scope.imageList = data;</div><div class="line">&#125;).error(function (error) &#123;</div><div class="line">    console.log(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这段代码注释很清楚，就是我们通过<code>$http</code>进行http请求，获取本地的资源文件<code>imageList.json</code>中的内容，然后将这个json数据赋值给$scope.imageList，这样模板<code>index.html</code>中的<code>imageList</code>就有内容了。</p>
<p>这整个过程用到了angular两个核心概念：</p>
<ul>
<li>依赖注入：通过依赖注入，我们可以很方便的获取所需要的东西。这个<code>$scope</code>和<code>$http</code>就是通过依赖注入的机制获得的，我们并不需要创建它们，只需要在<code>demoController</code>获取就行了。</li>
<li>数据绑定：当我们获取数据赋值给当前作用域下的某个值后，例如$scope.imageList，模板<code>index.html</code>中的imageList也发生了变化。</li>
</ul>
<p>当<code>imageList</code>有值后，<code>ng-repeat</code>遍历这个<code>imageList</code>，然后多次实例化<code>img</code>元素，用法就和PHP中的for-in类似，只是少了for。</p>
<p>在实例化<code>img</code>时，使用了<code>ng-src</code>和<code>ng-style</code>指令。<br>其中，<code>ng-src</code>和<code>src</code>一样，指定图片的地址。<br>而<code>ng-style</code>则对应的是<code>style</code>，指定的是样式，但是它与style不同的是，它传递的是对象，而且可以通过函数获取一个对象。例如上面实现响应式布局，就是通过<code>imageStyle</code>返回了对应的高和宽。</p>
<p>不过，这种通过js设置样式的代码是不推荐的，因为在angular使用的是MVC的开发模式，M就是绑定的数据；V就是DOM，也就是我们的index.html模板；C则是控制器。上面，我们相当于在控制器做模板的事情，我们应该保持js纯洁性，详情可参考：<a href="http://www.cnblogs.com/whitewolf/archive/2013/05/22/3092184.html" target="_blank" rel="external">细说Angular ng-class</a>。</p>
<h3 id="3、添加分类、搜索和删除功能"><a href="#3、添加分类、搜索和删除功能" class="headerlink" title="3、添加分类、搜索和删除功能"></a>3、添加分类、搜索和删除功能</h3><p>当我们在显示列表的时候，也许想拥有菜单分类、搜索和删除的功能，这个时候在前面的代码基础上，如何实现呢？</p>
<p>这里是实现之后的<code>index.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;body ng-controller=&quot;demoController&quot;&gt;</div><div class="line">&lt;div class=&quot;row&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot;&gt;</div><div class="line">        &lt;div class=&quot;btn-group pull-left&quot;&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: !search.type&#125;&quot; ng-click=&quot;selectType()&quot;&gt;全部&lt;/button&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 1&#125;&quot; ng-click=&quot;selectType(1)&quot;&gt;人物&lt;/button&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 2&#125;&quot; ng-click=&quot;selectType(2)&quot;&gt;动物&lt;/button&gt;</div><div class="line">            &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 3&#125;&quot; ng-click=&quot;selectType(3)&quot;&gt;风景&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;margin: 10px 0; height: 40px&quot;&gt;</div><div class="line">        &lt;input class=&quot;form-control&quot; ng-model=&quot;search.keyword&quot; placeholder=&quot;搜索内容&quot;/&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;line-height: 50px&quot;&gt;</div><div class="line">        搜索:&#123;&#123;search.keyword&#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;photos&quot;&gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList | filter:search&quot; ng-if=&quot;!info.is_hide&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">        &lt;div class=&quot;block&quot;&gt;</div><div class="line">            &lt;button class=&quot;btn btn-default gap&quot; ng-click=&quot;removePhoto(info)&quot;&gt;&lt;span&gt;删除&lt;/span&gt;&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>在demoApp.js文件中的demoController添加了下面一些内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$scope.search = &#123;&#125;;</div><div class="line">/**</div><div class="line"> * 删除图片</div><div class="line"> * @param index</div><div class="line"> */</div><div class="line">$scope.removePhoto = function (info) &#123;</div><div class="line">    info.is_hide = true;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 按钮点击选择类型的事件</div><div class="line"> * @param type</div><div class="line"> */</div><div class="line">$scope.selectType = function (type) &#123;</div><div class="line">    $scope.search.type = type;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这个实现之后就是我们的最终效果，当点击类型时，可以获取对应类型的图片，当输入关键字，可以搜索到相关的图片，还可以进行删除，这是怎么做到的呢？</p>
<p>首先，我们在左上角添加一排按钮，添加类型选择的功能，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-sm-4 col-xs-12&quot;&gt;</div><div class="line">    &lt;div class=&quot;btn-group pull-left&quot;&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: !search.type&#125;&quot; ng-click=&quot;selectType()&quot;&gt;全部&lt;/button&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 1&#125;&quot; ng-click=&quot;selectType(1)&quot;&gt;人物&lt;/button&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 2&#125;&quot; ng-click=&quot;selectType(2)&quot;&gt;动物&lt;/button&gt;</div><div class="line">        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-class=&quot;&#123;&apos;btn-primary&apos;: search.type == 3&#125;&quot; ng-click=&quot;selectType(3)&quot;&gt;风景&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>对应的demoApp.js文件的内容有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> /**</div><div class="line"> * 按钮点击选择类型的事件</div><div class="line"> * @param type</div><div class="line"> */</div><div class="line">$scope.selectType = function (type) &#123;</div><div class="line">    $scope.search.type = type;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们在按钮上通过<code>ng-click</code>指令添加了事件监听，当点击按钮的时候，触发了<code>selectType</code>事件，随后就将<code>search.type</code>的值改变成了事件传递过来的值。</p>
<p>当<code>search.type</code>值改变之后，由于按钮中我们添加了<code>ng-class</code>指令，从而enable了当前点击按钮的<code>btn-primary</code>类，这样就实现了选中效果。</p>
<p><code>ng-class</code>是用来实现样式的，它有两种用法（通过函数传递就不说了）:</p>
<ul>
<li>传递类名， 例如 <code>&lt;a ng-class=&quot;active selected&quot; /&gt;</code>，这样a标签就相当于给了两个样式类的效果，和<code>&lt;a class=&quot;active selected&quot;&gt;</code>一样</li>
<li>通过true和false来控制，例如 <code>&lt;button ng-class=&quot;{&#39;btn-primary&#39;: search.type == 1}&quot;&gt;</code>，当search.type为1时，button就拥有了btn-primary这个类的样式；否则就不拥有。</li>
</ul>
<p>相比与<code>ng-style</code>，<code>ng-class</code>它更能实现js与html代码的分离，保持js的纯洁，详情可参考：<a href="http://www.cnblogs.com/whitewolf/archive/2013/05/22/3092184.html" target="_blank" rel="external">细说Angular ng-class</a>。</p>
<p>当我们点击类型按钮的时候，如何显示出对应类型的图片？这用到了<code>ng-repeat的过滤器</code>，具体代码在这里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList | filter:search&quot;&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>当使用ng-repeat遍历时，如果<code>info</code>中的数据与<code>search</code>中的数据不匹配，则<code>ng-repeat</code>会忽略，不会实例化元素。</p>
<p>这个匹配规则默认是这样的，当<code>search</code>是一个数字或字符串时，它会匹配<code>info</code>对象所有的值，例如，search=6，那么info={id: 6, type:2}和info={id:7, type:6}都会匹配到；而当search是个对象时，它就会将对应的键值进行匹配，例如search={type:2}，它只会匹配info={id: 6, type:2}的对象，而不会匹配info={id: 2, type:7}。</p>
<p> 当然，上面是<code>ng-repeat</code>的过滤器的默认匹配规则，我们可以后面添加第三个参数，详情可以参考<a href="https://code.angularjs.org/1.4.12/docs/api/ng/filter/filter" target="_blank" rel="external">filter</a>。</p>
<p> 同样原理，我们实现搜索是通过<code>ng-model</code>和<code>filter</code>实现的，这里就说说<code>ng-model</code>，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;margin: 10px 0; height: 40px&quot;&gt;</div><div class="line">    &lt;input class=&quot;form-control&quot; ng-model=&quot;search.keyword&quot; placeholder=&quot;搜索内容&quot;/&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;col-sm-4 col-xs-12&quot; style=&quot;line-height: 50px&quot;&gt;</div><div class="line">    搜索:&#123;&#123;search.keyword&#125;&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>这段代码通过<code>ng-model</code>，我们实现了<code>双向绑定</code>，当我们输入值之后，我们可以看到界面中<code>搜索：</code>后面的内容随着我们输入变化而变化，我们不需要在js中做任何事情就可以做到这些，这是一个特别棒的特性。</p>
<p> 最后，我们来看看是如何实现删除的？<br> 对应的index.html中的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList | filter:search&quot; ng-if=&quot;!info.is_hide&quot;&gt;</div><div class="line">    &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">    &lt;div class=&quot;block&quot;&gt;</div><div class="line">        &lt;button class=&quot;btn btn-default gap&quot; ng-click=&quot;removePhoto(info)&quot;&gt;&lt;span&gt;删除&lt;/span&gt;&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>对应的demoApp.js中的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  /**</div><div class="line"> * 删除图片</div><div class="line"> * @param index</div><div class="line"> */</div><div class="line">$scope.removePhoto = function (info) &#123;</div><div class="line">    info.is_hide = true;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>操作主要是在按钮上添加一个removePhoto事件，当点击按钮的时候，将数据中的<code>is_hide</code>设置true，而在模板有<code>ng-if=&quot;!info.is_hide&quot;</code>，当is_hide为true时，表达式为false, 从而通过<code>ng-if</code>指令实现了删除功能。</p>
<p>除了，<code>ng-if</code>可以隐藏元素之外，还有<code>ng-show</code>和<code>ng-hide</code>，它们用法差不多，都是传递一个bool值进行控制。但是，它们之间是有些区别的：</p>
<ul>
<li>ng-if 它实现隐藏的功能，是将元素从dom中删除，使用ng-if会创建子作用域。</li>
<li>ng-show 它实现隐藏的功能，是将元素中的display设置为none，它不会创建子作用域。</li>
<li>ng-hide 它实现隐藏的功能和ng-show一样，是设置元素样式中的display为none来实现的，它不会创建子作用域。<br>到此，我们就实现了简单的图片列表应用。</li>
</ul>
<h2 id="三、指令补充"><a href="#三、指令补充" class="headerlink" title="三、指令补充"></a>三、指令补充</h2><h3 id="1、ng-app"><a href="#1、ng-app" class="headerlink" title="1、ng-app"></a>1、<code>ng-app</code></h3><p>这个指令指定了angular中<code>demoApp</code>模块作为它的根模块。使用ng-app指令时，需要注意的是，它一般都放在页面的根元素当中，例如<body>或<html>标签。还需要注意三点是，一个页面只能有一个angular应用；angular应用不能嵌套使用；不能和一些开启了<code>transclusion</code>的指令一起使用，例如ng-if、ng-include、ng-view（<code>transclusion</code>是什么参考<a href="http://www.html-js.com/article/Using-Angular-to-develop-web-application-completely-understand-AngularJS-transclusion" target="_blank" rel="external">彻底弄懂AngularJS中的transclusion</a>）。</html></body></p>
<h3 id="2、ng-repeat"><a href="#2、ng-repeat" class="headerlink" title="2、ng-repeat"></a>2、<code>ng-repeat</code></h3><p>ng-repeat会遍历所指定的对象，然后多次实例化所在的元素，用法就和PHP中的for-in一样，只是少了for，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">            &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>而且，它还可以进行键值对访问，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photos&quot; &gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;(key, info) in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">        &lt;span&gt;&#123;&#123;key&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>在使用<code>ng-repeat</code>时，需要注意的是，它会多次实例化模板，每个模板都会创建一个属于它自己的<code>scope</code>。</p>
<p>在使用ng-repeat时，我们需要获取当前repeate的元素是第几个，这个时候我们就会用到里面的一个特殊变量<code>$index</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;photos&quot; &gt;</div><div class="line">    &lt;div class=&quot;photoItem&quot; ng-repeat=&quot;info in imageList&quot;&gt;</div><div class="line">        &lt;img ng-src=&quot;&#123;&#123;info.imageUrl&#125;&#125;&quot; ng-style=&quot;imageStyle(info.width)&quot;/&gt;</div><div class="line">        &lt;span&gt;&#123;&#123;$Index&#125;&#125;&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>当使用<code>ng-repeat</code>时，有时候会涉及到嵌套，这个时候，我们就需要借助<code>ng-init</code>指令一起使用了，如下我曾经使用过的一种情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> &lt;div class=&quot;row&quot; style=&quot;height:400px&quot;&gt;</div><div class="line">    &lt;div class=&quot;col-sm-4 col-xs-12&quot; ng-repeat=&quot;data in dataList&quot; ng-init=&quot;pIndex=$index&quot;&gt;</div><div class="line">        &lt;div class=&quot;well&quot;&gt;</div><div class="line">            &lt;h5 class=&quot;text-center text-theme&quot;&gt;&#123;&#123;data.title&#125;&#125;&lt;/h5&gt;</div><div class="line">            &lt;div style=&quot;overflow: auto; border-bottom: 1px dashed red; margin-bottom: 10px;&quot;&gt;</div><div class="line">                &lt;div ng-repeat=&quot;item in data.itemList&quot; style=&quot;border-top: 1px dashed #aaa; padding-bottom: 10px&quot;&gt;</div><div class="line">                    &lt;input type=&quot;checkbox&quot;</div><div class="line">                           ng-click=&quot;selectItem(item, pIndex)&quot;</div><div class="line">                           ng-checked=&quot;item.item_status == 2&quot;</div><div class="line">                           ng-model=&quot;checked[item.project_module_item_id]&quot;</div><div class="line">                    &gt;</div><div class="line">                    &lt;div ng-repeat=&quot;msg in item.item_detail | splitArr&quot;&gt;</div><div class="line">                        &lt;p&gt;&#123;&#123;$index+1&#125;&#125;. &#123;&#123;msg&#125;&#125;&lt;/p&gt;</div><div class="line">                    &lt;/div&gt;</div><div class="line">                    &lt;p class=&quot;text-right&quot;&gt;</div><div class="line">                        &lt;span class=&quot;text-theme&quot;&gt;&#123;&#123;item.time&#125;&#125;&lt;/span&gt;</div><div class="line">                    &lt;/p&gt;</div><div class="line">                &lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>还有一些更详细的知识，请参考官方文档<a href="https://docs.angularjs.org/api/ng/directive/ngRepeat" target="_blank" rel="external">ngRepeat</a></p>
<h3 id="3、-watch监听数据变化"><a href="#3、-watch监听数据变化" class="headerlink" title="3、$watch监听数据变化"></a>3、$watch监听数据变化</h3><p>这个功能，我们在实时搜索时会用到，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$scope.$watch(&apos;name&apos;, function () &#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当监听的是一个对象的时，你想监听到这个对象每个属性的变化时，上面就会有问题，这个时候，需要传递第三个参数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$scope.$watch(&apos;person&apos;, function () &#123;</div><div class="line">&#125;, true);</div></pre></td></tr></table></figure>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>1、我们搭建开发环境时，尽量使用npm或bower进行集成式搭建，这样易于安装和管理。</p>
<p>2、简单罗列一些我们讲到的指令，也是经常用到的指令：</p>
<ul>
<li>ng-app（指定应用的模块名，与angular.module一起使用）</li>
<li>ng-controller（指定了一个控制器，一个作用域范围，MVC）</li>
<li>$http（http请求，$http.get、$http.post来请求数据）</li>
<li>$scope （作用域）</li>
<li>ng-model （双向绑定）</li>
<li>ng-repeat （ng-init来操作嵌套循环)</li>
<li>ng-if &amp; ng-show &amp; ng-hide (ng-if会删除或创建dom，ng-show和ng-hide将元素的display设置为none来实现）</li>
<li>ng-style &amp; ng-class（ng中设置样式用的，ng-style传一个对象，ng-class传多个样式类，还可以通过true和false来开启关闭）</li>
<li>ng-click（点击事件）</li>
<li>$watch（监听属性变量的变化）</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.angularjs.org/tutorial/" target="_blank" rel="external">angular tutorial</a></p>
<p><a href="http://www.apjs.net/#dir31" target="_blank" rel="external">angular 中文入门教程</a></p>
<p><a href="http://www.alloyteam.com/2015/06/kuai-su-da-jian-jing-tai-fu-wu-qi-di-ji-zhong-fang-fa/" target="_blank" rel="external">快速搭建静态服务器的几种方法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular使用了应该有一个月了，一直想总结来着，但是比较懒，所以一直拖着。这次正好趁着分享，写一篇相关内容的文章，来总结下Angular的基本使用和常用指令。本来打算写的是入门教程，发现入门教程怎么写都感觉不如官网，所以放弃了，可以把这一篇当做入门教程的补充版。如果大家要看入门教程可以看官方的&lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;angular tutorial&lt;/a&gt;，中文版的话1.5版本的没找到，大家可以看&lt;code&gt;angular 1.4&lt;/code&gt;的&lt;a href=&quot;http://www.apjs.net/#dir31&quot;&gt;angular 教程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这里以一个简单的图片列表应用为demo，查看效果可以点击：&lt;a href=&quot;http://www.liuchungui.com/example/angularExample/01/&quot;&gt;http://www.liuchungui.com/example/angularExample/01/&lt;/a&gt;查看，github地址是&lt;a href=&quot;https://github.com/liuchungui/angularExample&quot;&gt;angularExample 01&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="angular" scheme="http://www.liuchungui.com/categories/angular/"/>
    
    
      <category term="angular, angular 常用指令, angular 使用" scheme="http://www.liuchungui.com/tags/angular-angular-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4-angular-%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo博客</title>
    <link href="http://www.liuchungui.com/2016/08/09/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.liuchungui.com/2016/08/09/搭建Hexo博客/</id>
    <published>2016-08-08T17:04:57.000Z</published>
    <updated>2016-10-03T09:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>修改记录：</p>
<ul>
<li>2016-08-09 发布</li>
<li>2016-10-3 添加常用命令</li>
</ul>
<p>前段时间看到唐巧大大将博客从Octopress迁移到了Hexo，当时顿觉新奇，在本地搭建了下hexo。发现搭建起来确实简单方便，而且npm的安装方式也特别顺手，当然这是因为开发<code>react-native</code>久了就有这么个感觉。不过，当时只是在本地搭建了，并没有什么其他想法。但是，不久之后，硬盘被锁，无力回天，只能施展重装系统大法才解决。但是，此法有一后遗症，那就是电脑上的软件都没有了，博客系统也没有了。<br><a id="more"></a></p>
<p>至此之后，耽搁了一段时间没有写博客，最近想捡回来，重装了Octopress之后发现评论、百度SEO不见了，不想折腾Octopress，随之换了个Hexo试试，下面是一篇简单总结。</p>
<h2 id="一、安装Hexo"><a href="#一、安装Hexo" class="headerlink" title="一、安装Hexo"></a>一、安装Hexo</h2><p>Hexo的安装主要参考Hexo的官方文档<a href="https://hexo.io/zh-cn" target="_blank" rel="external">https://hexo.io/zh-cn</a>，这里只列出简单的安装方式。</p>
<p>在安装<code>Hexo</code>之前，你需要首先安装<code>Node.js</code>，这我们可以不翻墙到<a href="http://nodejs.cn/" target="_blank" rel="external">http://nodejs.cn/</a>下载。</p>
<p>安装完<code>node.js</code>之后，使用下面命令全局安装<code>Hexo</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>到此，我们安装好了<code>Hexo</code>，之后我们开始搭建博客。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#初始化博客</div><div class="line">hexo init myblog</div><div class="line">cd myblog</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>安装完这一切之后，我们就可以查看<code>Hexo</code>效果了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>在浏览器里面输入<code>localhost:4000</code>，我们就看到了效果。这样，Hexo就安装好了，是不是很简单？</p>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>Hexo安装之后，我们当然要做一些配置，这一步特别简单，只需要在<code>myblog</code>目录下编辑<code>_config.yml</code>文件，修改下相关配置就行了。这里，我只列出修改的选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># Site</div><div class="line">title: 刘春桂的博客 #博客的标题</div><div class="line">author: liuchungui #博客的作者</div><div class="line">language: zh-CN #博客的语言，zh-CN代表中文</div><div class="line"></div><div class="line"># URL</div><div class="line">url: http://www.liuchungui.com #博客域名</div><div class="line"></div><div class="line"># Writing</div><div class="line">new_post_name: :year-:month-:day-:title.md #新建博客时的命名方式</div><div class="line">highlight:</div><div class="line">  auto_detect: false #是否自动检测代码高亮</div><div class="line"></div><div class="line"># Pagination</div><div class="line">per_page: 20 #每一页20条博客</div><div class="line"></div><div class="line"># Extensions</div><div class="line">theme: landscape #主题</div></pre></td></tr></table></figure>
<h2 id="三、修改主题"><a href="#三、修改主题" class="headerlink" title="三、修改主题"></a>三、修改主题</h2><h3 id="1、安装主题"><a href="#1、安装主题" class="headerlink" title="1、安装主题"></a>1、安装主题</h3><p>如果你觉得默认的主题不符合胃口，可以到<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a>找一个你喜欢的。主题找来找去，我最后选择了<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">maupassant</a>这个主题，感觉它非常的简洁美观。</p>
<p>按照<code>maupassant</code>作者的一篇博客<a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">大道至简——Hexo简洁主题推荐</a>进行了安装，步骤如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#将主题安装到themes/maupassant目录下</div><div class="line">$ git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</div><div class="line">$ npm install hexo-renderer-jade --save</div><div class="line">$ npm install hexo-renderer-sass --save</div></pre></td></tr></table></figure>
<p>需要注意的是，安装上面的内容是在<code>myblog</code>目录下进行的。</p>
<p>在<code>npm install hexo-renderer-sass --save</code>安装时，我失败了，然后使用<code>cnpm</code>进行了安装就没有了问题。</p>
<p>安装好之后，在<code>themes</code>目录下多了个<code>maupassant</code>，然后我们编辑<code>Hexo的配置文件_config.yml</code>，将<code>theme</code>的值改为<code>maupassant</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Extensions</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">theme: maupassant</div><div class="line"># theme: landscape</div></pre></td></tr></table></figure>
<p>注：Hexo的配置文件和主题的配置文件名字都是_config.yml，我们需要区别开来。下面我称主题的配置文件为<code>maupassant的_config.yml</code>。</p>
<p>安装好这一切之后，我们使用<code>hexo server</code>开启服务器，刷新本地的页面，我们就看到了简洁的博客页面出现我们眼前。</p>
<h3 id="2、修改主题配置"><a href="#2、修改主题配置" class="headerlink" title="2、修改主题配置"></a>2、修改主题配置</h3><p>整个主题，有些东西我觉得它还不够简洁，于是我在maupassant的_config.yml文件中注释了一些东西，去掉了菜单的<code>about</code>和<code>rss</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">  - page: home</div><div class="line">    directory: .</div><div class="line">    icon: fa-home</div><div class="line">  - page: archive</div><div class="line">    directory: archives/</div><div class="line">    icon: fa-archive</div><div class="line">  # - page: about #去掉about页面</div><div class="line">  #   directory: about/</div><div class="line">  #   icon: fa-user</div><div class="line">  # - page: rss #去掉rss页面</div><div class="line">  #   directory: atom.xml</div><div class="line">  #   icon: fa-rss</div></pre></td></tr></table></figure>
<p>关闭<code>友情链接</code>和<code>tag</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">widgets: ## Six widgets in sidebar provided: search, category, tag, recent_posts, rencent_comments and links.</div><div class="line">  - search</div><div class="line">  - category</div><div class="line">  # - tag #去掉tag</div><div class="line">  - recent_posts</div><div class="line">  - recent_comments</div><div class="line">  # - links #关闭友情链接</div></pre></td></tr></table></figure>
<p>加上多说评论和百度统计</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">duoshuo: liuchungui</div><div class="line">baidu_analytics: ## Your Baidu Analytics tracking id, e.g. 8006843039519956000</div></pre></td></tr></table></figure>
<p>之后，主题就看起来简洁多了。</p>
<h2 id="三、将Octopress迁移到Hexo"><a href="#三、将Octopress迁移到Hexo" class="headerlink" title="三、将Octopress迁移到Hexo"></a>三、将Octopress迁移到Hexo</h2><p>迁移这个非常简单，将以前Octopress博客中<code>source/_posts</code>目录下的所有markdown文件复制到Hexo目录下的<code>source/_posts</code>就行了。</p>
<p>不过，在迁移中就说说碰到的一些问题：</p>
<ol>
<li>在有一篇博客中英文太长导致不换行，然后出现了排列不是特别好看，这里我的解决的办法是修改maupassant主题下的css/style.scss文件中<code>.post-content</code>样式的<code>text-align</code>样式，将<code>justify</code>改成<code>left</code>就行了</li>
<li>对html写的table适配的不是特别好，会出现一大片空白，问题见<a href="https://github.com/hexojs/hexo/issues/1388" target="_blank" rel="external">https://github.com/hexojs/hexo/issues/1388</a>。暂时没有什么解决的办法，最后是将表格截了一张图放在上面显示。</li>
<li><code>#</code>后面没有空格，导致标示标题的<code>#</code>出现文中，最后将整个博客调了一遍，改成<code>## + 空格 + 标题</code>的方式。</li>
<li>三个反引号里面放一段代码时，由于结尾的反引号后面有空格，导致代码和正文排版混乱。最后删除了空格，就没什么问题了。</li>
</ol>
<h2 id="四、发布博客"><a href="#四、发布博客" class="headerlink" title="四、发布博客"></a>四、发布博客</h2><p>安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="external">hexo-deployer-git</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>然后修改Hexo中的配置，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git #git的方式部署博客</div><div class="line">  repo: git@github.com:liuchungui/liuchungui.github.io.git #博客仓库地址</div><div class="line">  branch: master #存储在master分支下</div></pre></td></tr></table></figure>
<p>最后，我们将博客上传到github上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#生成博客网页文件</div><div class="line">$ hexo generate</div><div class="line">#部署</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>注：如果我们是使用<code>github page</code>服务，注意在public文件中加上对应的<code>CNAME</code>文件。</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#新建一个博客</div><div class="line">$ hexo init [folder]</div><div class="line">#新建一篇文章</div><div class="line">$ hexo new [layout] &lt;title&gt;</div><div class="line">#生成静态文件</div><div class="line">$ hexo generate</div><div class="line">#启动服务器</div><div class="line">$ hexo server</div><div class="line">#部署到博客</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/commands.html</a></p>
<p><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="external">大道至简——Hexo简洁主题推荐</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修改记录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2016-08-09 发布&lt;/li&gt;
&lt;li&gt;2016-10-3 添加常用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前段时间看到唐巧大大将博客从Octopress迁移到了Hexo，当时顿觉新奇，在本地搭建了下hexo。发现搭建起来确实简单方便，而且npm的安装方式也特别顺手，当然这是因为开发&lt;code&gt;react-native&lt;/code&gt;久了就有这么个感觉。不过，当时只是在本地搭建了，并没有什么其他想法。但是，不久之后，硬盘被锁，无力回天，只能施展重装系统大法才解决。但是，此法有一后遗症，那就是电脑上的软件都没有了，博客系统也没有了。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo, Octopress, 博客, Hexo安装, Hexo搭建" scheme="http://www.liuchungui.com/tags/Hexo-Octopress-%E5%8D%9A%E5%AE%A2-Hexo%E5%AE%89%E8%A3%85-Hexo%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发总结</title>
    <link href="http://www.liuchungui.com/2016/08/01/wei-xin-gong-zhong-hao-kai-fa-zong-jie/"/>
    <id>http://www.liuchungui.com/2016/08/01/wei-xin-gong-zhong-hao-kai-fa-zong-jie/</id>
    <published>2016-08-01T03:51:36.000Z</published>
    <updated>2016-08-04T16:04:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司准备在微信公众号上做个东西，所以研究了一周的微信公众号开发，今天在这里做一个总结。<br>在总结之前，先说一下本人使用的环境，语言是PHP，框架是<a href="https://github.com/bcit-ci/CodeIgniter" target="_blank" rel="external">CI</a>和CI框架下的一个RESTFul框架<a href="https://github.com/chriskacerguis/codeigniter-restserver" target="_blank" rel="external">codeigniter-restserver</a>。</p>
<a id="more"></a>
<h2 id="一、配置服务器"><a href="#一、配置服务器" class="headerlink" title="一、配置服务器"></a>一、配置服务器</h2><p>在开发之前，我们首先需要在微信公众号下设置服务器配置，这里完全可以参考官方的<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">接入指南</a>。<br>需要说明两点的是：</p>
<ol>
<li>我们只能填写一个URL（服务器地址），当微信服务器想要发送消息给我们服务器，只能通过这个URL来进行交互。</li>
<li>我们在接入的时候，有个验证消息是否来自微信服务器的过程，这个验证过程是GET请求，我们需要输出echostr，验证代码如下：</li>
</ol>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查消息是否来自微信</div><div class="line"> * <span class="doctag">@return</span> bool</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check_from_wx</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//检查$_GET中的参数</span></div><div class="line">    param_check($_GET, [<span class="string">'signature'</span>, <span class="string">'timestamp'</span>, <span class="string">'nonce'</span>]);</div><div class="line"></div><div class="line">    <span class="comment">//获取参数</span></div><div class="line">    $signature = $_GET[<span class="string">"signature"</span>];</div><div class="line">    $timestamp = $_GET[<span class="string">"timestamp"</span>];</div><div class="line">    $nonce = $_GET[<span class="string">"nonce"</span>];</div><div class="line"></div><div class="line">    $token = WX_APP_TOKEN;</div><div class="line">    $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</div><div class="line">    <span class="comment">// use SORT_STRING rule</span></div><div class="line">    sort($tmpArr, SORT_STRING);</div><div class="line">    $tmpStr = implode($tmpArr);</div><div class="line">    $tmpStr = sha1($tmpStr);</div><div class="line">    </div><div class="line">    <span class="comment">//验证</span></div><div class="line">    <span class="keyword">if</span>($tmpStr == $signature) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 配合微信服务器验证是否有效</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_get</span><span class="params">()</span> </span>&#123;</div><div class="line">    $echoStr = <span class="keyword">$this</span>-&gt;get(<span class="string">"echostr"</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;check_from_wx()) &#123;</div><div class="line">       <span class="keyword">echo</span> $echoStr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"验证不通过"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">exit</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到上面的代码，你也许会有疑问，为什么在<code>check_get</code>方法中使用<code>$this-&gt;get</code>获取get参数，而在<code>check_from_wx</code>方法中使用的是<code>$_GET</code>。这是因为我们后面接收的消息是微信服务器向我们发送POST请求，但是验证的参数却是放在URL后面，所以为了兼容，专门封装了一个<code>check_from_wx</code>的私有方法。</p>
<p>到这里，我们算是配置好了，下面我们来看看如何接收和回复用户发来的消息。</p>
<h2 id="二、接收消息和回复消息"><a href="#二、接收消息和回复消息" class="headerlink" title="二、接收消息和回复消息"></a>二、接收消息和回复消息</h2><p>接收和回复消息的流程图大概就是这样的：<br><img src="http://ww4.sinaimg.cn/large/7746cd07jw1f66f138zo1j218q0imacd.jpg" alt=""><br>看上面的流程图，我们可以把整个接收和回复消息分成四个步骤：</p>
<ul>
<li>第一步：用户在微信公众号内发送一条消息，微信客户端将这条消息发送给微信服务器。</li>
<li>第二步：微信服务器将消息以POST方式将消息提交给我们服务器，而这个服务器的地址只有一个，就是我们前面配置服务器填写的URL地址。消息的数据格式是XML格式的。    </li>
<li>第三步：我们收到这个消息之后，做出对应的回复，返回对应的XML数据，就算是进行回复了。</li>
<li>第四步：微信服务器将我们服务器的消息返回给微信客户端，这样用户就看到了我们回复的消息了。</li>
</ul>
<p>看了上面的消息接收和回复流程图，我们下面使用代码进行实现。在配置服务器的时候，我先前填写的URL地址对应的接口是<code>check</code>，所以接收消息的PHP代码这么写：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line">  * 检查消息是否来自微信</div><div class="line">  * <span class="doctag">@return</span> bool</div><div class="line">  */</div><div class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">check_from_wx</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">//检查$_GET中的参数</span></div><div class="line">     param_check($_GET, [<span class="string">'signature'</span>, <span class="string">'timestamp'</span>, <span class="string">'nonce'</span>]);</div><div class="line"></div><div class="line">     <span class="comment">//获取参数</span></div><div class="line">     $signature = $_GET[<span class="string">"signature"</span>];</div><div class="line">     $timestamp = $_GET[<span class="string">"timestamp"</span>];</div><div class="line">     $nonce = $_GET[<span class="string">"nonce"</span>];</div><div class="line"></div><div class="line">     $token = WX_APP_TOKEN;</div><div class="line">     $tmpArr = <span class="keyword">array</span>($token, $timestamp, $nonce);</div><div class="line">     <span class="comment">// use SORT_STRING rule</span></div><div class="line">     sort($tmpArr, SORT_STRING);</div><div class="line">     $tmpStr = implode($tmpArr);</div><div class="line">     $tmpStr = sha1($tmpStr);</div><div class="line">     </div><div class="line">     <span class="comment">//验证</span></div><div class="line">     <span class="keyword">if</span>($tmpStr == $signature) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check_post</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">//检查消息是否来自微信</span></div><div class="line">     <span class="keyword">if</span>(!<span class="keyword">$this</span>-&gt;check_from_wx()) &#123;</div><div class="line">         <span class="comment">//非法</span></div><div class="line">         <span class="keyword">echo</span> <span class="string">"非法操作"</span>;</div><div class="line">     &#125;</div><div class="line">     </div><div class="line">     <span class="comment">//获取POST参数</span></div><div class="line">     $param = file_get_contents(<span class="string">"php://input"</span>);</div><div class="line">     <span class="comment">//将xml格式中的数据读取成数组</span></div><div class="line">     $param = <span class="keyword">$this</span>-&gt;format-&gt;factory($param, <span class="string">'xml'</span>)-&gt;to_array();</div><div class="line"></div><div class="line">     <span class="comment">//将消息插入by_message表中</span></div><div class="line">     $result = <span class="keyword">$this</span>-&gt;share_model-&gt;insert($msg_info, <span class="string">'by_message'</span>);</div><div class="line">     </div><div class="line">     <span class="comment">//回复空字符串</span></div><div class="line">     <span class="keyword">echo</span> <span class="string">""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  上面代码值得注意有三个地方，第一个地方是我们检查消息是否来自微信，是获取<code>$_GET</code>中的参数；第二个地方是我们不能使用<code>$_POST</code>和<code>$this-&gt;post</code>来获取post参数，只能使用<code>file_get_contents(&quot;php://input&quot;)</code>来获取；第三个地方是当我们没有消息回复的时候，回复<code>success和空字符串</code>就代表交互成功，否则用户就会看到<code>该公众号暂时无法提供服务</code>。</p>
<p>  当写好代码之后，我们在微信公众号中发送消息，它就会将消息存入到<code>by_message</code>表中，我们就可以进行查看。如果出现<code>该公众号暂时无法提供服务</code>，那就可能我们服务器出错误了，可以开启日志功能，使用<code>log_message</code>输出日志进行调试。</p>
<p> 当接收消息没问题之后，我们就可以进行回复消息了，代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public function check_post() &#123;</div><div class="line">    //检查消息是否来自微信</div><div class="line">    if(!$this-&gt;check_from_wx()) &#123;</div><div class="line">        //非法</div><div class="line">        echo "非法操作";</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //获取POST参数</div><div class="line">    $param = file_get_contents("php://input");</div><div class="line">    //获取xml中的数据</div><div class="line">    $param = $this-&gt;format-&gt;factory($param, 'xml')-&gt;to_array();</div><div class="line"></div><div class="line">    //选出参数</div><div class="line">    $msg_info = array_choose($param, ['Content', 'ToUserName', 'FromUserName', 'MsgId', 'MsgType']);</div><div class="line">    //将消息插入数据库</div><div class="line">    $result = $this-&gt;share_model-&gt;insert($msg_info, 'by_message');</div><div class="line"></div><div class="line">    //获取信息</div><div class="line">    $to_user = $param['ToUserName'];</div><div class="line">    $from_user = $param['FromUserName'];</div><div class="line">    $content = $param['Content'];</div><div class="line"></div><div class="line">    //去掉消息id</div><div class="line">    unset($param['MsgId']);</div><div class="line"></div><div class="line">    //回复的内容</div><div class="line">    $content = 'http://xxxxxx.com/';</div><div class="line">    $response_text = "&lt;xml&gt;</div><div class="line">                        &lt;ToUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/ToUserName&gt;</div><div class="line">                        &lt;FromUserName&gt;&lt;![CDATA[%s]]&gt;&lt;/FromUserName&gt;</div><div class="line">                        &lt;CreateTime&gt;%s&lt;/CreateTime&gt;</div><div class="line">                        &lt;MsgType&gt;&lt;![CDATA[%s]]&gt;&lt;/MsgType&gt;</div><div class="line">                        &lt;Content&gt;&lt;![CDATA[%s]]&gt;&lt;/Content&gt;</div><div class="line">                      &lt;/xml&gt;";</div><div class="line">    $response_text = sprintf($response_text, $from_user, $to_user, time(), $param['MsgType'], $content);</div><div class="line">    echo $response_text;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置好之后，我们在微信公众输入字符，它就会回复<code>http://xxxxxx.com/</code>。</p>
<p>上面代码需要注意的是，我们回复消息的时候，返回的数据格式是<code>xml格式</code>的，而且对格式有严格要求。我前面使用框架中的<code>format类</code>生成xml的数据是无法被微信读取的，所以建议和我上面一样的写法。</p>
<p>还有，上面回复的消息是文本消息，我们还可以回复图片、图文、语音、视频、音乐等消息，其实它们都大体相同，查看官方的文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140543&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">被动回复用户消息</a>这一节，按照对应的格式进行回复就行了。</p>
<p>到这一步的时候，是不是很有成就感？其实，这还是很小的一步，微信开发还有很多的内容，就消息管理这部分来说，它就分接收和发送消息两大类。    </p>
<p>其中，接收消息有两种：        </p>
<ul>
<li>第一种：接收普通消息，它是微信用户向公众号发送的消息，我们上面说的就是接收普通消息。</li>
<li>第二种：接收事件消息，它是微信用户在微信公众号里面交互过程中产生的事件消息，例如关注/取消事件、扫描带参数二维码等等。具体可以接收哪些事件消息，就去查询微信的开发文档吧。接收事件消息说起来很高端的样子，其实它和普通消息差不多，整个接收和回复流程和上面一样，只是有的事件消息是不允许我们回复用户的。</li>
</ul>
<p>而发送消息就有被动<code>回复消息</code>、<code>客服消息</code>、<code>群发消息</code>、<code>模板消息</code>四种，其中这四种我又把它分成两小类，被动回复消息算是一类，我们前面实现对用户消息的回复就算是这一类；另外三种我将它们归类为主动发送消息，与被动回复消息不同的是，它会被微信主动推送给用户，流程大概如下图：</p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07jw1f66jvxhdfij20nx07uaaf.jpg" alt=""></p>
<p>了解了流程之后，我们下面来实现模板消息的发送。</p>
<h2 id="三、发送模板消息"><a href="#三、发送模板消息" class="headerlink" title="三、发送模板消息"></a>三、发送模板消息</h2><p>模板消息可以定制，而且发送模板消息后，微信会主动推送给用户，这是我们开发很需要的一个功能。（注：模板消息只有认证后的服务号才可以使用）。</p>
<p>首先，我们在微信公众平台的<code>功能-&gt;添加功能插件</code>处添加这个功能，进入模板消息页面，从模板库中添加一个模板消息，获取到模板ID。当然，我们也可以创建一个符号自己业务的模板消息，进行定制（这个需要申请）。</p>
<p>然后，我们对应着模板详情的数据格式，写一个接口专门用来发送模板消息。</p>
<p>下面是模板详情：</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f658hkxak6j20iu0kb75u.jpg" alt=""></p>
<p>对应上面的模板消息，我们的接口这么写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * 发送模板消息</div><div class="line">     */</div><div class="line">    public function send_template_message_get() &#123;</div><div class="line">        //检查参数</div><div class="line">        param_check($this-&gt;get(), [&apos;uid&apos;]);</div><div class="line">        $uid = $this-&gt;get(&apos;uid&apos;);</div><div class="line"></div><div class="line">        //wx appid</div><div class="line">        $wx_app_id = WX_APP_ID;</div><div class="line">        $wx_app_secret = WX_APP_SECRET;</div><div class="line"></div><div class="line">        //get access token</div><div class="line">        $token_info = file_get_contents(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$wx_app_id&amp;secret=$wx_app_secret&quot;);</div><div class="line">        $token_info = json_decode($token_info, true);</div><div class="line">        $access_token = $token_info[&apos;access_token&apos;];</div><div class="line"></div><div class="line">        //获取用户信息</div><div class="line">        $openid = $this-&gt;user_model-&gt;get_value(&apos;openid&apos;, $uid);</div><div class="line"></div><div class="line">        //组织参数</div><div class="line">        $param = array(</div><div class="line">            &quot;touser&quot; =&gt; $openid,</div><div class="line">            &quot;template_id&quot; =&gt; &quot;jt_Rl5X9QWXMiRihrQz67n4riGt3kaPA81Zku0wLm9M&quot;,</div><div class="line">            &quot;url&quot; =&gt; &quot;http://www.beyondwinlaw.com/test/wx/test/home.html&quot;,</div><div class="line">            &quot;data&quot; =&gt; [</div><div class="line">                &quot;first&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;案件有新进展&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword1&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword2&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword3&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword4&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;2016-07-12 11:11:11&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;keyword5&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;jkfdjafjdsfjdjfs&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ],</div><div class="line">                &quot;remark&quot; =&gt; [</div><div class="line">                    &quot;value&quot; =&gt; &quot;点击查看案件进度详情&quot;,</div><div class="line">                    &quot;color&quot; =&gt; &quot;#173177&quot;</div><div class="line">                ]</div><div class="line">            ]</div><div class="line">        );</div><div class="line"></div><div class="line">        //发送请求</div><div class="line">        $url = &quot;https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=$access_token&quot;;</div><div class="line">        $result = send_post($url, $param);</div><div class="line">        answer([</div><div class="line">            &quot;result&quot; =&gt; $result</div><div class="line">        ]);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>效果是这样的：</p>
<p align="center"><br>  <img src="http://ww3.sinaimg.cn/mw690/7746cd07jw1f65905jwfbj20mq10iq75.jpg" height="554" width="345"><br></p>

<p>这样，我们就实现了模板消息的发送，至于客服消息、群发接口，原理差不多，因为我没实现过，这里就不多说了。</p>
<h2 id="四、网页授权，获取用户信息"><a href="#四、网页授权，获取用户信息" class="headerlink" title="四、网页授权，获取用户信息"></a>四、网页授权，获取用户信息</h2><p>微信采用的是OAuth对开发者进行授权的，具体OAuth授权原理请google查询。在开发之前，我们需要先到公众平台官网中的<code>开发-接口权限-网页服务-网页授权获取用户基本信息</code>的配置选项中，修改授权回调域名。</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f65ggry50ij20y20dimyr.jpg" alt=""></p>
<p>整个授权过程，其实微信官方已经说的很清楚了。我这里简略说一下，算是总结下吧！</p>
<p>首先，我们需要获取access_token，它的时序图和微信开放平台类似，如下：<br><img src="http://ww1.sinaimg.cn/mw690/7746cd07jw1f68rcxtd2lj21020fu40c.jpg" alt=""></p>
<p>这整个过程是当用户要登录我们的网站时，我们带上回调地址、AppId、scope等参数跳转到微信授权页面；然后获得用户的同意之后，它会跳转到我们的回调地址，并带上code参数；最后我们通过code、AppId、AppSecret请求接口，获取access_token。</p>
<p>之后，我们通过access_token请求对应的接口，就可以获取用户的基本信息了。</p>
<p>需要注意地方有两个：</p>
<ol>
<li>我们的回调地址需要进行encodeURL，否则可能回调地址中url后面的参数会丢失。</li>
<li>我们的回调地址的域名必须是前面配置的域名。</li>
</ol>
<p>具体的实现细节，根据官方文档<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">微信网页授权</a>和<a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">网站应用微信登录开发指南</a>的步骤来就行了。</p>
<h2 id="五、JS-SDK的使用"><a href="#五、JS-SDK的使用" class="headerlink" title="五、JS-SDK的使用"></a>五、JS-SDK的使用</h2><p>在我们要做的产品中，我们希望能够控制每个页面分享的链接，而JS-SDK就可以做到这一切。<br>它的使用步骤可以查阅<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">微信JS-SDK说明文档</a>这个文档，而且在网页最后还有对应的<a href="http://demo.open.weixin.qq.com/jssdk" target="_blank" rel="external">DEMO页面</a>和<a href="http://demo.open.weixin.qq.com/jssdk/sample.zip" target="_blank" rel="external">示例代码</a>。</p>
<p>我们的实现是这样的，在前端专门写了一个JS文件<code>wx_share.js</code>，这个JS文件中将当前的url传给后台，请求后台的数据对JS-SDK进行配置。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server_url = <span class="string">"http://192.168.30.249/by/wx_api/index.php/share/wx_config"</span>;</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">window</span>.location.href;</div><div class="line"></div><div class="line"><span class="comment">//配置微信</span></div><div class="line">$.ajax(&#123;</div><div class="line">    type: <span class="string">"GET"</span>,</div><div class="line">    url: server_url,</div><div class="line">    data: &#123;</div><div class="line">        url: <span class="built_in">encodeURI</span>(url)</div><div class="line">    &#125;,</div><div class="line">    dataType: <span class="string">"json"</span>,</div><div class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="comment">// alert('请求分享配置数据成功');</span></div><div class="line">        wx.config(&#123;</div><div class="line">            debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class="line">            appId: data.data.appId, <span class="comment">// 必填，公众号的唯一标识</span></div><div class="line">            timestamp: data.data.timestamp, <span class="comment">// 必填，生成签名的时间戳</span></div><div class="line">            nonceStr: data.data.nonceStr, <span class="comment">// 必填，生成签名的随机串</span></div><div class="line">            signature: data.data.signature,<span class="comment">// 必填，签名，见附录1</span></div><div class="line">            jsApiList: [<span class="string">'onMenuShareAppMessage'</span>, <span class="string">'onMenuShareTimeline'</span>] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class="line">        &#125;);</div><div class="line">        wx.ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// alert("分享验证完毕");</span></div><div class="line">        &#125;);</div><div class="line">        wx.error(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// alert("分享验证失败");</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//获取uid和link_id</span></div><div class="line">        <span class="keyword">var</span> uid = localStorage.getItem(<span class="string">"uid"</span>);</div><div class="line">        <span class="keyword">var</span> linkId = localStorage.getItem(<span class="string">"link_id"</span>);</div><div class="line">        <span class="keyword">var</span> shareUrl = <span class="string">"http://www.baidu.com"</span>;</div><div class="line">        <span class="comment">//存在linkId, 则分享带上link_id等参数</span></div><div class="line">        <span class="keyword">if</span>(linkId != <span class="literal">undefined</span> &amp;&amp; linkId != <span class="string">""</span> &amp;&amp; linkId != <span class="literal">null</span>) &#123;</div><div class="line">          shareUrl = shareUrl + <span class="string">"?super_id="</span> + uid + <span class="string">"&amp;link_id="</span> + linkId;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// alert("分享链接: "+shareUrl);</span></div><div class="line"></div><div class="line">        wx.onMenuShareAppMessage(&#123;</div><div class="line">            title: <span class="string">'分享测试'</span>, <span class="comment">// 分享标题</span></div><div class="line">            desc: <span class="string">'测试一下'</span>, <span class="comment">// 分享描述</span></div><div class="line">            link: shareUrl, <span class="comment">// 分享链接</span></div><div class="line">            imgUrl: <span class="string">'http://www.beyondwinlaw.com/gw4/images/zhongjie.jpg'</span>, <span class="comment">// 分享图标</span></div><div class="line">            type: <span class="string">'link'</span>, <span class="comment">// 分享类型,music、video或link，不填默认为link</span></div><div class="line">            dataUrl: <span class="string">''</span>, <span class="comment">// 如果type是music或video，则要提供数据链接，默认为空</span></div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">// 用户确认分享后执行的回调函数</span></div><div class="line">                <span class="comment">// alert("分享成功");</span></div><div class="line">            &#125;,</div><div class="line">            cancel: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="comment">// 用户取消分享后执行的回调函数</span></div><div class="line">                <span class="comment">// alert("取消分享");</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    error: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        alert(<span class="string">'请求分享配置数据失败'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>而具体JS-SDK权限签名算法的实现是放在后台的，这个实现我是直接使用官方的<code>jssdk</code>的类，只是将它稍微修改了下。<br><code>share.php</code>中<code>wx_config</code>接口实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取微信配置</div><div class="line"> */</div><div class="line">public function wx_config_get() &#123;</div><div class="line">    //获取参数</div><div class="line">    param_check($this-&gt;get(), [&apos;url&apos;]);</div><div class="line">    $url = $this-&gt;get(&apos;url&apos;);</div><div class="line">    $url = urldecode($url);</div><div class="line"></div><div class="line">    $jssdk = new JSSDK(WX_APP_ID, WX_APP_SECRET, $url);</div><div class="line">    $signPackage = $jssdk-&gt;GetSignPackage();</div><div class="line">    answer($signPackage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而修改后的JS-SDK代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">class JSSDK &#123;</div><div class="line">  private $appId;</div><div class="line">  private $appSecret;</div><div class="line">  private $url;</div><div class="line"></div><div class="line">  public function __construct($appId, $appSecret, $url) &#123;</div><div class="line">    $this-&gt;appId = $appId;</div><div class="line">    $this-&gt;appSecret = $appSecret;</div><div class="line">    $this-&gt;url = $url;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public function getSignPackage() &#123;</div><div class="line">    // 注意 URL 一定要动态获取，不能 hardcode.</div><div class="line">//    $protocol = (!empty($_SERVER[&apos;HTTPS&apos;]) &amp;&amp; $_SERVER[&apos;HTTPS&apos;] !== &apos;off&apos; || $_SERVER[&apos;SERVER_PORT&apos;] == 443) ? &quot;https://&quot; : &quot;http://&quot;;</div><div class="line">//    $url = &quot;$protocol$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]&quot;;</div><div class="line">    $url = $this-&gt;url;</div><div class="line"></div><div class="line">    //wx appid</div><div class="line">    $wx_app_id = $this-&gt;appId;</div><div class="line">    $wx_app_secret = $this-&gt;appSecret;</div><div class="line"></div><div class="line">    //get token</div><div class="line">    $token_info = file_get_contents(&quot;https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$wx_app_id&amp;secret=$wx_app_secret&quot;);</div><div class="line">    $token_info = json_decode($token_info, true);</div><div class="line">    $access_token = $token_info[&apos;access_token&apos;];</div><div class="line"></div><div class="line">    //get ticket</div><div class="line">    $ticket_info = file_get_contents(&quot;https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=$access_token&amp;type=jsapi&quot;);</div><div class="line">    $ticket_info = json_decode($ticket_info, true);</div><div class="line">    $ticket = $ticket_info[&apos;ticket&apos;];</div><div class="line">    </div><div class="line">    //拼接字符串</div><div class="line">    $timestamp = time();</div><div class="line">    $nonceStr = $this-&gt;createNonceStr();</div><div class="line">    // 这里参数的顺序要按照 key 值 ASCII 码升序排序</div><div class="line">    $string = &quot;jsapi_ticket=$ticket&amp;noncestr=$nonceStr&amp;timestamp=$timestamp&amp;url=$url&quot;;</div><div class="line"></div><div class="line">    //使用sha1进行签名</div><div class="line">    $signature = sha1($string);</div><div class="line"></div><div class="line">    $signPackage = array(</div><div class="line">      &quot;appId&quot;     =&gt; $this-&gt;appId,</div><div class="line">      &quot;nonceStr&quot;  =&gt; $nonceStr,</div><div class="line">      &quot;timestamp&quot; =&gt; $timestamp,</div><div class="line">      &quot;url&quot;       =&gt; $url,</div><div class="line">      &quot;signature&quot; =&gt; $signature,</div><div class="line">      &quot;rawString&quot; =&gt; $string</div><div class="line">    );</div><div class="line">    return $signPackage; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private function createNonceStr($length = 16) &#123;</div><div class="line">    $chars = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;;</div><div class="line">    $str = &quot;&quot;;</div><div class="line">    for ($i = 0; $i &lt; $length; $i++) &#123;</div><div class="line">      $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);</div><div class="line">    &#125;</div><div class="line">    return $str;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private function httpGet($url) &#123;</div><div class="line">    $curl = curl_init();</div><div class="line">    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);</div><div class="line">    curl_setopt($curl, CURLOPT_TIMEOUT, 500);</div><div class="line">    // 为保证第三方服务器与微信服务器之间数据传输的安全性，所有微信接口采用https方式调用，必须使用下面2行代码打开ssl安全校验。</div><div class="line">    // 如果在部署过程中代码在此处验证失败，请到 http://curl.haxx.se/ca/cacert.pem 下载新的证书判别文件。</div><div class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, true);</div><div class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, true);</div><div class="line">    curl_setopt($curl, CURLOPT_URL, $url);</div><div class="line"></div><div class="line">    $res = curl_exec($curl);</div><div class="line">    curl_close($curl);</div><div class="line"></div><div class="line">    return $res;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  private function get_php_file($filename) &#123;</div><div class="line">    return trim(substr(file_get_contents($filename), 15));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要说明一下的是，这里我只是测试功能的实现，<code>获取access_token</code>是直接通过接口实时进行获取的。如果是在生产环境，还请参考官方的<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140183&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">获取access_token</a>。</p>
<p>在这里我碰到一个问题，耽搁了挺久的时间。那就是前面我按照官方文档自己写的签名算法，然后各种配置不成功。后来下载了官方的demo，发现官方文档jssdk没有问题，然后将自己的签名算法放入官方的jssdk中，也没有问题。因为官方文档是前后端放在一块的，所以总感觉url不对，但是对<code>url进行encodeURL</code>之后，发现还是不行。最后和小伙伴一起google了之后，<code>将生成数字随机替换成生成字母随机数</code>，然后配置就没问题了。</p>
<p>到这一步，逻辑已经全部实现，只需要在我们对应的页面中引入JS-SDK和wx_share.js文件就行了，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;http://res.wx.qq.com/open/js/jweixin-1.1.0.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;js/wx_share.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>成功之后的效果如下：</p>
<p align="center"><br>  <img src="http://ww4.sinaimg.cn/large/7746cd07jw1f6e24s7grrj20ku112q4f.jpg" height="667" width="375"><br></p>

<h2 id="六、自定义菜单"><a href="#六、自定义菜单" class="headerlink" title="六、自定义菜单"></a>六、自定义菜单</h2><p>自定义菜单这个是比较简单的，我们只需要将我们配置数据POST到微信服务器，微信用户进入我们公众号之后，看到界面就变成了我们自定义菜单样式。<br>在这里，我也写了一个接口，用来修改菜单：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 更改微信公众号菜单</div><div class="line">  * <span class="doctag">@note</span> 这个接口在线上是禁止调用的,它只需要更改的时候,调用一次就行了</div><div class="line">  */</div><div class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">change_menu_get</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">//获取access_token, 需要中控服务器,否则会造成服务不稳定,咱们这里暂时不这么做</span></div><div class="line">     $app_id = WX_APP_ID;</div><div class="line">     $app_secret = WX_APP_SECRET;</div><div class="line">     $content = file_get_contents(<span class="string">"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=$app_id&amp;secret=$app_secret"</span>);</div><div class="line">     $info = json_decode($content, <span class="keyword">true</span>);</div><div class="line">     $access_token = $info[<span class="string">'access_token'</span>];</div><div class="line"></div><div class="line">     <span class="comment">//自定义菜单</span></div><div class="line">     $auth_url = <span class="string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid=&#123;$app_id&#125;&amp;redirect_uri=http://www.liuchungui.com/api/wx_api/index.php/share/test&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect"</span>;</div><div class="line"></div><div class="line">     $menu = <span class="keyword">array</span>(</div><div class="line">         <span class="string">"button"</span> =&gt; [</div><div class="line">             [</div><div class="line">                 <span class="string">"type"</span> =&gt; <span class="string">"view"</span>,</div><div class="line">                 <span class="string">"name"</span> =&gt; <span class="string">"合作"</span>,</div><div class="line">                 <span class="string">"url"</span> =&gt; $auth_url</div><div class="line">             ],</div><div class="line">             [</div><div class="line">                 <span class="string">"name"</span> =&gt; <span class="string">"菜单"</span>,</div><div class="line">                 <span class="string">"sub_button"</span> =&gt; [</div><div class="line">                     [</div><div class="line">                         <span class="string">"type"</span> =&gt; <span class="string">"view"</span>,</div><div class="line">                         <span class="string">"name"</span> =&gt; <span class="string">"官网"</span>,</div><div class="line">                         <span class="string">"url"</span> =&gt; <span class="string">"http://www.liuchungui.com/"</span></div><div class="line">                     ],</div><div class="line">                     [</div><div class="line">                         <span class="string">"type"</span> =&gt; <span class="string">"view"</span>,</div><div class="line">                         <span class="string">"name"</span> =&gt; <span class="string">"关于我们"</span>,</div><div class="line">                         <span class="string">"url"</span> =&gt; <span class="string">"http://www.liuchungui.com/about.html"</span></div><div class="line">                     ]</div><div class="line">                 ]</div><div class="line">             ]</div><div class="line">         ]</div><div class="line">     );</div><div class="line"></div><div class="line">     $menu_url = <span class="string">"https://api.weixin.qq.com/cgi-bin/menu/create?access_token=$access_token"</span>;</div><div class="line">     <span class="comment">//发送POST请求</span></div><div class="line">     $result = send_post($menu_url, $menu);</div><div class="line">     $result = json_decode($result, <span class="keyword">true</span>);</div><div class="line">     <span class="comment">//返回数据</span></div><div class="line">     <span class="keyword">if</span>($result[<span class="string">'errcode'</span>] === <span class="number">0</span>) &#123;</div><div class="line">         answer(<span class="keyword">true</span>, <span class="string">'更改菜单'</span>);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">else</span> &#123;</div><div class="line">         answer(<span class="keyword">false</span>, <span class="string">'更改菜单'</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这个只是创建菜单，其他操作菜单的接口请查阅<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141013&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">自定义菜单</a>。</p>
<p>效果如下：</p>
<p align="center"><br>  <img src="http://ww2.sinaimg.cn/mw690/7746cd07jw1f67s9b3h6hj20ks10c78z.jpg" height="604" width="345"><br></p>

<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>在搜索资料的时候，无意之间找到一个微信公众号开发的框架<a href="https://github.com/overtrue/wechat" target="_blank" rel="external">wechat</a>，star不少，而且看了下开发文档<a href="https://easywechat.org/" target="_blank" rel="external">EasyWechat</a>，讲得比较详细，应该是一个不错的框架，后期准备使用它来进行开发，推荐大家看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司准备在微信公众号上做个东西，所以研究了一周的微信公众号开发，今天在这里做一个总结。&lt;br&gt;在总结之前，先说一下本人使用的环境，语言是PHP，框架是&lt;a href=&quot;https://github.com/bcit-ci/CodeIgniter&quot;&gt;CI&lt;/a&gt;和CI框架下的一个RESTFul框架&lt;a href=&quot;https://github.com/chriskacerguis/codeigniter-restserver&quot;&gt;codeigniter-restserver&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="web" scheme="http://www.liuchungui.com/categories/web/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac10.11升级安装openssl</title>
    <link href="http://www.liuchungui.com/2016/05/10/mac10-dot-11sheng-ji-an-zhuang-openssl/"/>
    <id>http://www.liuchungui.com/2016/05/10/mac10-dot-11sheng-ji-an-zhuang-openssl/</id>
    <published>2016-05-10T12:46:18.000Z</published>
    <updated>2016-08-06T06:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直想要升级Mac上的openssl，但是前面没弄成功，所以耽搁到现在。今天由于安装一个软件需要安装openssl到1.0.1版本以上，所以查了下资料，终于升级成功了，也算是还了前面<a href="http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/">自建证书配置HTTPS服务器</a>这篇博客的债。</p>
<a id="more"></a>
<p>首先，来看看我们的openssl的版本和目录</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ openssl version</div><div class="line">OpenSSL 0.9.8zh 14 Jan 2016</div><div class="line"></div><div class="line">$ <span class="built_in">which</span> openssl</div><div class="line">/usr/<span class="built_in">local</span>/bin/openssl</div></pre></td></tr></table></figure>
<p>通过上面的查看，明显我们的版本号太低了，于是google了下，找到了<a href="http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x" target="_blank" rel="external">http://apple.stackexchange.com/questions/126830/how-to-upgrade-openssl-in-os-x</a>。</p>
<p>按照上面的步骤，我们首先更新<code>homebrew</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line"></div><div class="line">Error: Cowardly refusing to `sudo brew update`</div><div class="line">You can use brew with sudo, but only if the brew executable is owned by root.</div><div class="line">However, this is both not recommended and completely unsupported so do so at</div><div class="line">your own risk.</div><div class="line">bogon:Downloads user$ brew update</div><div class="line">Error: The /usr/local directory is not writable.</div><div class="line">Even if this directory was writable when you installed Homebrew, other</div><div class="line">software may change permissions on this directory. Some versions of the</div><div class="line">&quot;InstantOn&quot; component of Airfoil or running Cocktail cleanup/optimizations</div><div class="line">are known to do this.</div><div class="line"></div><div class="line">You should probably change the ownership and permissions of /usr/local</div><div class="line">back to your user account.</div><div class="line">  sudo chown -R $(whoami):admin /usr/local</div></pre></td></tr></table></figure>
<p>很不幸，我们在更新的时候遇到了一个错误，好在homebrew有错误提醒，我们按照提醒执行下面命令，继续安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo chown -R $(whoami):admin /usr/local</div><div class="line">$ brew update</div><div class="line">Updated Homebrew from e3986e9 to 21ce7a5.</div><div class="line">==&gt; Migrating Homebrew to v0.9.9</div><div class="line">...</div></pre></td></tr></table></figure>
<p>看到这个信息，就是成功的在更新了，这个过程可能比较久点。更新完之后，我们开始通过homebrew安装openssl。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ brew install openssl</div><div class="line"></div><div class="line">==&gt; Downloading https://homebrew.bintray.com/bottles/openssl-1.0.2h.el_capitan.b</div><div class="line">######################################################################## 100.0%</div><div class="line">...</div><div class="line">==&gt; Summary</div><div class="line">🍺  /usr/local/Cellar/openssl/1.0.2h: 1,691 files, 12M</div></pre></td></tr></table></figure>
<p>当最后显示🍺那个标志，说明我们成功的将openssl安装到<code>/usr/local/Cellar/openssl/1.0.2h</code>。</p>
<p>不过，我们还有最后一步，那就是当我们使用openssl时，使用的是我们用homebrew新下载的openssl。为了达到这个目的，我们有两种方法。</p>
<p>第一种：    </p>
<p>将homebrew下载的openssl软链接到/usr/bin/openssl目录下。这里，我们先将它保存一份老的，然后再软链接新下载的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ mv /usr/bin/openssl /usr/bin/openssl_old</div><div class="line">mv: rename /usr/bin/openssl to /usr/bin/openssl_old: Operation not permitted</div><div class="line"></div><div class="line">$ ln -s /usr/local/Cellar/openssl/1.0.2h/bin/openssl /usr/bin/openssl</div><div class="line">ln: /usr/bin/openssl: Operation not permitted</div></pre></td></tr></table></figure>
<p><code>Operation not permitted</code>提示没有权限操作，对<code>/usr/bin</code>目录下的东西，我已经遇到过几次这个问题了，于是继续google，在stackoverflow上找到了<a href="http://stackoverflow.com/questions/32659348/operation-not-permitted-when-on-root-el-capitan-rootless-disabled" target="_blank" rel="external">Operation Not Permitted when on root El capitan (rootless disabled)</a>。</p>
<p>重启系统，当启动的时候我们同时按下<code>cmd+r</code>进入Recovery模式，之后选择<code>实用工具</code> =&gt; <code>终端</code>，在终端输入如下命令，接口文件系统的锁定，并且重启电脑：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ csrutil disable</div><div class="line">$ reboot</div></pre></td></tr></table></figure>
<p>最后，我们执行前面两个命令，查看版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mv /usr/bin/openssl /usr/bin/openssl_old</div><div class="line">$ ln -s /usr/local/Cellar/openssl/1.0.2h/bin/openssl /usr/bin/openssl</div><div class="line">$ openssl version</div><div class="line">OpenSSL 1.0.2h  3 May 2016</div></pre></td></tr></table></figure>
<p>这样，我们的openssl升级成功了。不过，为了安全起见，我还是重新启动电脑，然后重新开启了<code>csrutil</code>。</p>
<p>第二种：</p>
<p>在操作完前面一种方法之后，我发现了一个更简单的方式，那就是直接将openssl软链接到<code>/usr/local/bin/openssl</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#如果/usr/local/bin/openssl下存在，则先删除 /usr/local/bin/openssl</div><div class="line">$ rm /usr/local/bin/openssl</div><div class="line"></div><div class="line">#将以前通过homebrew下载的1.0.2e版本的openssl链接到/usr/local/bin/openssl</div><div class="line">$ ln -s /usr/local/Cellar/openssl/1.0.2e/bin/openssl /usr/local/bin/openssl</div><div class="line"></div><div class="line">$ openssl </div><div class="line">OpenSSL 1.0.2e 3 Dec 2015</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要记录了安装openssl过程中遇到的一些问题，同时也知道当如果对<code>/usr/bin</code>类似文件目录无操作权限的时候怎么解锁文件系统。当然，最好是将命令通过ln链接到<code>/usr/local/bin</code>，这个目录下的权限苹果还是开放给我的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想要升级Mac上的openssl，但是前面没弄成功，所以耽搁到现在。今天由于安装一个软件需要安装openssl到1.0.1版本以上，所以查了下资料，终于升级成功了，也算是还了前面&lt;a href=&quot;http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/&quot;&gt;自建证书配置HTTPS服务器&lt;/a&gt;这篇博客的债。&lt;/p&gt;
    
    </summary>
    
      <category term="Mac" scheme="http://www.liuchungui.com/categories/Mac/"/>
    
    
      <category term="Mac10.11, openssl, openssl 安装, Mac10.11 openssl, Mac10.11 openssl 安装, Mac10.11 openssl 安装升级, Mac openssl 安装, Mac openssl 升级, Mac10.11 openssl 升级, Mac openssl 安装升级" scheme="http://www.liuchungui.com/tags/Mac10-11-openssl-openssl-%E5%AE%89%E8%A3%85-Mac10-11-openssl-Mac10-11-openssl-%E5%AE%89%E8%A3%85-Mac10-11-openssl-%E5%AE%89%E8%A3%85%E5%8D%87%E7%BA%A7-Mac-openssl-%E5%AE%89%E8%A3%85-Mac-openssl-%E5%8D%87%E7%BA%A7-Mac10-11-openssl-%E5%8D%87%E7%BA%A7-Mac-openssl-%E5%AE%89%E8%A3%85%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative之原生模块开发并发布——android篇</title>
    <link href="http://www.liuchungui.com/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/"/>
    <id>http://www.liuchungui.com/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/</id>
    <published>2016-05-08T06:00:09.000Z</published>
    <updated>2016-08-06T05:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。</p>
<p>整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。</p>
<p>示例代码github地址：<a href="https://github.com/liuchungui/react-native-BGNativeModuleExample" target="_blank" rel="external">https://github.com/liuchungui/react-native-BGNativeModuleExample</a></p>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们需要先创建一个ReactNative工程，使用如下命令创建。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ react native init TestProject</div></pre></td></tr></table></figure>
<p>创建好工程之后，我们使用android studio打开<code>TestProject/android/</code>下的android工程。</p>
<p>之后，点击android studio菜单上的File ——&gt; New ——&gt; New Module，之后选择<code>Android Library</code>，设置模块名和包名，我的设置如下：<br><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f3ilkyhcuzj21kw10w42q.jpg" alt=""></p>
<p>点击完成之后，我们的安卓项目中就多了个名字为<code>nativemoduleexample</code>模块。<br><img src="http://ww1.sinaimg.cn/large/7746cd07jw1f3iluj6owuj20qy11mgt8.jpg" alt=""><br>之后，我们在<code>app</code>工程中的<code>build.gradle</code>文件中的<code>dependencies</code>添加一行<code>compile project(&#39;:nativemoduleexample&#39;)</code>，让主工程<code>app</code>依赖我们新创建的Library。</p>
<p>最后，我们还需要让新创建的Library依赖<code>react native</code>，和上面差不多，只需要在我们新创建的<code>nativemoduleexample</code>下的<code>build.gradle</code>中的<code>dependencies</code>添加一行<code>compile &quot;com.facebook.react:react-native:+&quot;</code>就行了。</p>
<h2 id="一、编写原生模块代码"><a href="#一、编写原生模块代码" class="headerlink" title="一、编写原生模块代码"></a>一、编写原生模块代码</h2><p>####1、创建原生模块，并进行注册<br>我们首先点击打开前面创建的<code>nativemoduleexample</code>库，在<code>src/main/java/com/liuchungui/nativemoduleexample</code>目录下创建我们的原生模块类。当然，如果我们前面创建Library的包名不太一样，那<code>src/main/java/</code>后面跟上就是前面设置的包名。</p>
<p>在这个目录下，我们首先创建一个原生模块<code>BGNativeExampleModule</code>，它继承于<code>ReactContextBaseJavaModule</code>。这个原生模块必须实现两个方法，一个是覆写<code>getName</code>方法，它返回一个字符串名字，在JS中我们就使用这个名字调用这个模块；另外一个是构造方法<code>BGNativeExampleModule</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.liuchungui.nativemoduleexample;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.NativeModule;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactApplicationContext;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactContext;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactContextBaseJavaModule;</div><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.ReactMethod;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.String;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BGNativeExampleModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BGNativeExampleModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"BGNativeModuleExample"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中需要注意的是，模块名前的RCT前缀会被自动移除。例如”RCTBGNativeModuleExample”，在JS中的模块名字仍然是BGNativeModuleExample。</p>
<p>到这一步的时候，是不是就可以访问这个模块了？事实是现在还不能访问，因为我们还需要注册这个模块。</p>
<p>为了注册原生模块，我们首先创建一个<code>BGNativeExamplePackage</code>类，这个类要求实现<code>ReactPackage</code>接口，这个接口有三个方法<code>createNativeModules</code>、<code>createJSModules</code>和<code>createViewManagers</code>。其中，<code>createNativeModules</code>是用来添加原生模块的；<code>createViewManagers</code>是用来添加原生的UI组件；<code>createJSModules</code>暂时没用过，但是看官方的注释，应该是注册我们原生模块中用到的JS模块。</p>
<p>我们这里只需要在<code>createNativeModules</code>方法中添加原生模块，其他两个方法返回空数组就行了，整个package类的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.liuchungui.nativemoduleexample;</div><div class="line"></div><div class="line">import com.facebook.react.ReactPackage;</div><div class="line">import com.facebook.react.bridge.JavaScriptModule;</div><div class="line">import com.facebook.react.bridge.NativeModule;</div><div class="line">import com.facebook.react.bridge.ReactApplicationContext;</div><div class="line">import com.facebook.react.uimanager.ViewManager;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Collections;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class BGNativeExamplePackage implements ReactPackage &#123;</div><div class="line">    @Override</div><div class="line">    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123;</div><div class="line">        return Arrays.asList(new NativeModule[]&#123;</div><div class="line">                new BGNativeExampleModule(reactContext),</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    public List&lt;Class&lt;? extends JavaScriptModule&gt;&gt; createJSModules() &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123;</div><div class="line">        return Collections.emptyList();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，这个package需要在<code>MainActivity.java</code>文件中的<code>getPackages</code>方法中提供。这个文件位于我们的reactNative应用文件夹的android目录中，路径是:<code>android/app/src/main/java/com/testproject/MainActivity.java</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected List&lt;ReactPackage&gt; getPackages() &#123;</div><div class="line">    return Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">        new MainReactPackage(),</div><div class="line">            new BGNativeExamplePackage()</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这个时候，我们终于可以在js中访问我们的原生模块了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &#123; NativeModules &#125; from &apos;react-native&apos;;</div><div class="line">var BGNativeModuleExample = NativeModules.BGNativeModuleExample;</div><div class="line">console.log(BGNativeModuleExample);</div></pre></td></tr></table></figure>
<h3 id="2、为原生模块添加方法"><a href="#2、为原生模块添加方法" class="headerlink" title="2、为原生模块添加方法"></a>2、为原生模块添加方法</h3><p>要导出一个方法给JS使用，Java方法需要使用注解<code>@ReactMethod</code>。方法的返回类型必须为void。ReactNative跨语言访问是异步进行的，所以想要给JS返回一个值，唯一的办法是使用回调函数或者发送事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import com.facebook.react.bridge.ReactMethod;</div><div class="line"></div><div class="line">@ReactMethod</div><div class="line">public void testPrint(String name, ReadableMap info) &#123;</div><div class="line">	Log.i(TAG, name);</div><div class="line">	Log.i(TAG, info.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们如下调用这个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testPrint(&quot;Jack&quot;, &#123;</div><div class="line">    height: &apos;1.78m&apos;,</div><div class="line">    weight: &apos;7kg&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="3、参数类型"><a href="#3、参数类型" class="headerlink" title="3、参数类型"></a>3、参数类型</h4><p>在编写原生模块的时候，我们还需要知道原生Java数据类型和JS数据类型的映射关系：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Boolean -&gt; Bool</div><div class="line">Integer -&gt; Number</div><div class="line">Double -&gt; Number</div><div class="line">Float -&gt; Number</div><div class="line">String -&gt; String</div><div class="line">Callback -&gt; function</div><div class="line">ReadableMap -&gt; Object</div><div class="line">ReadableArray -&gt; Array</div></pre></td></tr></table></figure>
<p>详情参考：<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableMap.java" target="_blank" rel="external">ReadableMap</a>和<a href="https://github.com/facebook/react-native/blob/master/ReactAndroid/src/main/java/com/facebook/react/bridge/ReadableArray.java" target="_blank" rel="external">ReadableArray</a></p>
<h3 id="4、回调函数"><a href="#4、回调函数" class="headerlink" title="4、回调函数"></a>4、回调函数</h3><p>原生模块还支持一种特殊的参数——回调函数。它提供了一个函数来把返回值传回给JS。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import com.facebook.react.bridge.Callback;</div><div class="line"></div><div class="line">@ReactMethod</div><div class="line">public void getNativeClass(Callback callback) &#123;</div><div class="line">      callback.invoke(&quot;BGNativeExampleModule&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们可以通过以下方式获取到原生模块的类名：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.getNativeClass(name =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"nativeClass: "</span>, name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="5、Promises"><a href="#5、Promises" class="headerlink" title="5、Promises"></a>5、Promises</h3><blockquote>
<p>原生模块还可以使用promise来简化代码，搭配ES2016(ES7)标准的async/await语法则效果更佳。如果桥接原生方法的最后一个参数是一个Promise，则对应的JS方法就会返回一个Promise对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.facebook.react.bridge.Promise;</div><div class="line"><span class="meta">@ReactMethod</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPromises</span><span class="params">(Boolean isResolve, Promise promise)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(isResolve) &#123;</div><div class="line">        promise.resolve(isResolve.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        promise.reject(isResolve.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JS中如下调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testPromises(<span class="literal">true</span>)</div><div class="line">.then(result =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"result is "</span>, result);</div><div class="line">&#125;)</div><div class="line">.catch(result =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"result = "</span>, result);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="6、导出常量"><a href="#6、导出常量" class="headerlink" title="6、导出常量"></a>6、导出常量</h3><p>  我们在<code>getContants</code>方法中导出js所需要使用的常量。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span>  Map&lt;String, Object&gt; <span class="title">getConstants</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Map&lt;String, Object&gt; constants = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    constants.put(<span class="string">"BGModuleName"</span>, <span class="string">"BGNativeModuleExample"</span>);</div><div class="line">    constants.put(TestEventName, TestEventName);</div><div class="line">    <span class="keyword">return</span> constants;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 我们在JS中打印<code>BGModuleName</code>这个常量的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"BGModuleName const value = "</span>, BGNativeModuleExample.BGModuleName);</div></pre></td></tr></table></figure>
<h3 id="7、给JS发送事件"><a href="#7、给JS发送事件" class="headerlink" title="7、给JS发送事件"></a>7、给JS发送事件</h3><blockquote>
<p>原生模块可以在没有被调用的情况下往JS发送事件通知，最简单的办法是通过<code>RCTDeviceEventEmitter</code>，这可以通过<code>ReactContext</code>获得对应的引用。</p>
</blockquote>
<p>在这里，我们为了能够接收到事件，开启了一个定时器，每一秒发送一次事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BGNativeExampleModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = BGNativeExampleModule.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span>  String TestEventName = <span class="string">"TestEventName"</span>;</div><div class="line">    <span class="keyword">private</span> Timer timer;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BGNativeExampleModule</span><span class="params">(<span class="keyword">final</span> ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(reactContext);</div><div class="line">        <span class="comment">//开启定时器</span></div><div class="line">        TimerTask task = <span class="keyword">new</span> TimerTask() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//发送事件</span></div><div class="line">                WritableMap params = Arguments.createMap();</div><div class="line">                params.putString(<span class="string">"name"</span>, <span class="string">"Jack"</span>);</div><div class="line">                reactContext</div><div class="line">                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)</div><div class="line">                        .emit(TestEventName, params);</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        timer = <span class="keyword">new</span> Timer();</div><div class="line">        timer.schedule(task, <span class="number">1000</span>, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们这里直接使用<code>DeviceEventEmitter</code>模块来监听事件。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//接收事件</span></div><div class="line">DeviceEventEmitter.addListener(BGNativeModuleExample.TestEventName, info =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(info);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>官方文档中，说也可以使用<code>Subscribable mixin</code>的addListenerOn方法来接收事件，其实它就是对<code>DeviceEventEmitter</code>一种封装。而且，在<code>es6</code>之后，不再支持<code>mixins</code>，所以我们直接使用DeviceEventEmitter接收事件比较好。</p>
<h3 id="8、生命周期"><a href="#8、生命周期" class="headerlink" title="8、生命周期"></a>8、生命周期</h3><p>有时候，为了某些目的，我们需要监听ReactNative应用的生命周期。我们可以让原生模块实现<code>LifecycleEventListener</code>接口，然后使用<code>addLifecycleEventListener</code>注册一下监听。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">BGNativeExampleModule</span><span class="params">(<span class="keyword">final</span> ReactApplicationContext reactContext)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(reactContext);</div><div class="line">    <span class="comment">//添加监听</span></div><div class="line">    reactContext.addLifecycleEventListener(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现<code>LifecycleEventListener</code>接口</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public <span class="keyword">void</span> onHostResume() &#123;</div><div class="line">    Log.i(TAG, <span class="string">"onHostResume"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public <span class="keyword">void</span> onHostPause() &#123;</div><div class="line">    Log.i(TAG, <span class="string">"onHostPause"</span>);</div><div class="line">    timer.cancel();</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public <span class="keyword">void</span> onHostDestroy() &#123;</div><div class="line">    Log.i(TAG, <span class="string">"onHostDestroy"</span>);</div><div class="line">    timer.cancel();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，我们就可以监听ReactNative应用的生命周期了。</p>
<p>上面原生代码就编写好了，主要以代码实践为主，弥补官方文档中的一些不足，如果要需要了解更多的原生模块封装的知识，可以参考<a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a>，也可以参考官方的源代码。</p>
<h2 id="二、发布上线"><a href="#二、发布上线" class="headerlink" title="二、发布上线"></a>二、发布上线</h2><h3 id="建立一个github仓库"><a href="#建立一个github仓库" class="headerlink" title="建立一个github仓库"></a>建立一个github仓库</h3><p>在github上创建一个仓库<code>react-native-BGNativeModuleExample</code>，克隆到本地，并且创建一个<code>android</code>文件夹。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/liuchungui/react-native-BGNativeModuleExample.git</div><div class="line">$ <span class="built_in">cd</span> react-native-BGNativeModuleExample</div><div class="line">$ mkdir android</div></pre></td></tr></table></figure>
<h3 id="将Library复制到android文件夹下"><a href="#将Library复制到android文件夹下" class="headerlink" title="将Library复制到android文件夹下"></a>将Library复制到android文件夹下</h3><p>我们首先进入前面创建的<code>nativemoduleexample</code>这个Library下，然后将这个文件目录下所有文件copy到<code>react-native-BGNativeModuleExample/android</code>目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cp -R android/nativemoduleexample/* ~/github/react-native-BGNativeModuleExample/android</div></pre></td></tr></table></figure>
<h3 id="发布到npm"><a href="#发布到npm" class="headerlink" title="发布到npm"></a>发布到npm</h3><p>这里请参考我前面写的<a href="http://www.liuchungui.com/blog/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/">ReactNative之原生模块开发并发布——iOS篇</a>中的<code>发布到npm</code>那一节的内容，当然如果你和我一样前面已经发布了<code>1.0.0</code>，只需要将<code>package.json</code>修改一个版本就好了，我这里修改为<code>2.0.0</code>，然后使用下面命令发布。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm publish</div><div class="line">+ react-native-nativemodule-example@2.0.0</div></pre></td></tr></table></figure>
<p>这样，我们就成功发布到了<a href="npmjs.org">npmjs.org</a>。</p>
<h2 id="三、添加Example，测试是否可用，添加README"><a href="#三、添加Example，测试是否可用，添加README" class="headerlink" title="三、添加Example，测试是否可用，添加README"></a>三、添加Example，测试是否可用，添加README</h2><p>请点击查看<a href="http://www.liuchungui.com/blog/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/">ReactNative之原生模块开发并发布——iOS篇</a>中的<code>添加Example，测试是否可用，添加README</code>这一部分内容，基本上一样的。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://blog.csdn.net/dxpqxb/article/details/8659292" target="_blank" rel="external">http://blog.csdn.net/dxpqxb/article/details/8659292</a><br><a href="http://reactnative.cn/docs/0.25/native-modules-android.html#content" target="_blank" rel="external">原生模块</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。&lt;/p&gt;
&lt;p&gt;整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。&lt;/p&gt;
&lt;p&gt;示例代码github地址：&lt;a href=&quot;https://github.com/liuchungui/react-native-BGNativeModuleExample&quot;&gt;https://github.com/liuchungui/react-native-BGNativeModuleExample&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative, 原生模块, react native, ReactNative原生模块, react native 原生模块, react native 原生模块发布, reactNative原生模块android" scheme="http://www.liuchungui.com/tags/ReactNative-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-ReactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%8F%91%E5%B8%83-reactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97android/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative之原生模块开发并发布——iOS篇</title>
    <link href="http://www.liuchungui.com/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/"/>
    <id>http://www.liuchungui.com/2016/05/02/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-iospian/</id>
    <published>2016-05-02T11:48:27.000Z</published>
    <updated>2016-08-06T05:42:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。</p>
<p>整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。</p>
<p>示例代码github地址：<a href="https://github.com/liuchungui/react-native-BGNativeModuleExample" target="_blank" rel="external">https://github.com/liuchungui/react-native-BGNativeModuleExample</a></p>
<p>编写android原生模块，请看<a href="http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/">ReactNative之原生模块开发并发布——android篇</a></p>
<a id="more"></a>
<h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><h4 id="创建ReactNative工程"><a href="#创建ReactNative工程" class="headerlink" title="创建ReactNative工程"></a>创建ReactNative工程</h4><p>我们需要先创建一个ReactNative工程，使用如下命令创建。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react native init TestProject</div></pre></td></tr></table></figure>
<p>创建好工程之后，我们使用xcode打开<code>TestProject/ios/</code>下的iOS工程。</p>
<h4 id="创建静态库，并将这个静态库手动链接到工程中"><a href="#创建静态库，并将这个静态库手动链接到工程中" class="headerlink" title="创建静态库，并将这个静态库手动链接到工程中"></a>创建静态库，并将这个静态库手动链接到工程中</h4><p>首先，我们在前面创建的ReactNative工程下的<code>node_modules</code>创建一个文件夹<code>react-native-BGNativeModuleExample</code>，然后我们在新创建的文件夹下再创建一个ios文件夹。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd TestProject/node_modules</div><div class="line">$ mkdir react-native-BGNativeModuleExample</div><div class="line">$ cd react-native-BGNativeModuleExample</div><div class="line">$ mkdir ios</div></pre></td></tr></table></figure>
<p>然后，由于ReactNative的组件都是一个个静态库，我们发布到npm给别人使用的话，也需要建立静态库。我们使用xcode建立静态库，取名为<code>BGNativeModuleExample</code>。建立之后，我们将创建的静态库中的文件全部copy到<code>node_modules/react-native-BGNativeModuleExample/ios</code>目录下。<br>ios文件目录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">|____BGNativeModuleExample</div><div class="line">| |____BGNativeModuleExample.h</div><div class="line">| |____BGNativeModuleExample.m</div><div class="line">|____BGNativeModuleExample.xcodeproj</div></pre></td></tr></table></figure>
<p>最后，我们需要手动将这个静态库链接到工程中。</p>
<p>1、使用xcode打开创建的静态库，添加一行<code>Header Search Paths</code>，值为<code>$(SRCROOT)/../../react-native/React</code>，并设置为<code>recursive</code>。</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1f3h69rwj3oj212s0r7dm6.jpg" alt=""></p>
<p>2、将<code>BGNativeModuleExample</code>静态库工程拖动到工程中的Library中。<br><img src="http://ww1.sinaimg.cn/large/7746cd07jw1f3o30vl8wjj20xq0fawi3.jpg" alt=""></p>
<p>3、选中 TARGETS =&gt; TestProject =&gt; Build Settings =&gt; Link Binary With Libraries，添加<code>libBGNativeModuleExample.a</code>这个静态库<br><img src="http://ww3.sinaimg.cn/large/7746cd07jw1f3o2v5wrgyj212r0hgq72.jpg" alt=""></p>
<p>到此，我们准备工作完成了。我们这里这么准备是有用意的，那就是模拟npm链接的过程，建立好了环境，避免了发布到npm上后别人使用找不到静态库的问题。</p>
<h2 id="一、编写原生模块代码"><a href="#一、编写原生模块代码" class="headerlink" title="一、编写原生模块代码"></a>一、编写原生模块代码</h2><h4 id="1、创建原生模块"><a href="#1、创建原生模块" class="headerlink" title="1、创建原生模块"></a>1、创建原生模块</h4><p>选中我们创建的<code>BGNativeModuleExample</code>静态库，然后在<code>BGNativeModuleExample.h</code>文件中导入<code>RCTBridgeModule.h</code>，让<code>BGNativeModuleExample</code>类遵循<code>RCTBridgeModule</code>协议。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BGNativeModuleExample.h文件的内容如下</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"RCTBridgeModule.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">BGNativeModuleExample</span> : <span class="title">NSObject</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在<code>BGNativeModuleExample.m</code>文件中，我们需要实现<code>RCTBridgeModule</code>协议。为了实现<code>RCTBridgeModule</code>协议，我们的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果不指定，默认会使用这个类的名字。</p>
<p>在这里，我们指定了模块的名字为<code>BGNativeModuleExample</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_MODULE(BGNativeModuleExample);</div></pre></td></tr></table></figure>
<p>实现了RCTBridgeModule协议之后，我们就可以在js中如下获取到我们创建的原生模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &#123; NativeModules &#125; from &apos;react-native&apos;;</div><div class="line">var BGNativeModuleExample = NativeModules.BGNativeModuleExample;</div></pre></td></tr></table></figure>
<p>需要注意的是，RCT_EXPORT_MODULE宏传递的参数不能是OC中的字符串。如果传递@”BGNativeModuleExample”，那么我们导出给JS的模块名字其实是@”BGNativeModuleExample”，使用BGNativeModuleExample就找不到了。在这里，我们其实可以通过打印<code>NativeModules</code>来查找到我们创建的原生模块。</p>
<h4 id="2、为原生模块添加方法"><a href="#2、为原生模块添加方法" class="headerlink" title="2、为原生模块添加方法"></a>2、为原生模块添加方法</h4><p>我们需要明确的声明要给JS导出的方法，否则ReactNative不会导出任何方法。声明通过RCT_EXPORT_METHOD()宏来实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_METHOD(testPrint:(<span class="built_in">NSString</span> *)name info:(<span class="built_in">NSDictionary</span> *)info) &#123;</div><div class="line">  RCTLogInfo(<span class="string">@"%@: %@"</span>, name, info);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们可以这样调用这个方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testPrint(<span class="string">"Jack"</span>, &#123;</div><div class="line">  height: <span class="string">'1.78m'</span>,</div><div class="line">  weight: <span class="string">'7kg'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="3、参数类型"><a href="#3、参数类型" class="headerlink" title="3、参数类型"></a>3、参数类型</h4><p>RCT_EXPORT_METHOD()支持所有标准的JSON类型，包括：</p>
<ul>
<li>string (NSString)</li>
<li>number (NSInteger, float, double, CGFloat, NSNumber)</li>
<li>boolean (BOOL, NSNumber)</li>
<li>array (NSArray) 包含本列表中任意类型</li>
<li>map (NSDictionary) 包含string类型的键和本列表中任意类型的值</li>
<li>function (RCTResponseSenderBlock)</li>
</ul>
<p>除此以外，任何RCTConvert类支持的的类型也都可以使用(参见<a href="https://github.com/facebook/react-native/blob/master/React/Base/RCTConvert.h" target="_blank" rel="external">RCTConvert</a>了解更多信息)。RCTConvert还提供了一系列辅助函数，用来接收一个JSON值并转换到原生Objective-C类型或类。</p>
<p>了解更多请点击<a href="http://reactnative.cn/docs/0.25/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a></p>
<h4 id="4、回调函数"><a href="#4、回调函数" class="headerlink" title="4、回调函数"></a>4、回调函数</h4><blockquote>
<p>警告<br>本章节内容目前还处在实验阶段，因为我们还并没有太多的实践经验来处理回调函数。</p>
</blockquote>
<p>回调函数，在官方的文档中是有上面的一个警告，不过在使用过程暂时未发现问题。在OC中，我们添加一个<code>getNativeClass</code>方法，将当前模块的类名回调给JS。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RCT_EXPORT_METHOD(getNativeClass:(RCTResponseSenderBlock)callback) &#123;</div><div class="line">  callback(@[<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>])]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们通过以下方式获取到原生模块的类名</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.getNativeClass(name =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"nativeClass: "</span>, name);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>原生模块通常只应调用回调函数一次。但是，它们可以保存callback并在将来调用。</strong>这在封装那些通过“委托函数”来获得返回值的iOS API时最常见。</p>
<h4 id="5、Promises"><a href="#5、Promises" class="headerlink" title="5、Promises"></a>5、Promises</h4><blockquote>
<p>原生模块还可以使用promise来简化代码，搭配ES2016(ES7)标准的async/await语法则效果更佳。如果桥接原生方法的最后两个参数是RCTPromiseResolveBlock和RCTPromiseRejectBlock，则对应的JS方法就会返回一个Promise对象。</p>
</blockquote>
<p>我们通过Promises来实现原生模块是否会响应方法，响应则返回YES，不响应则返回一个错误信息，代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RCT_REMAP_METHOD(testRespondMethod,</div><div class="line">                 name:(<span class="built_in">NSString</span> *)name</div><div class="line">                 resolver:(RCTPromiseResolveBlock)resolve</div><div class="line">                 rejecter:(RCTPromiseRejectBlock)reject) &#123;</div><div class="line">  <span class="keyword">if</span>([<span class="keyword">self</span> respondsToSelector:<span class="built_in">NSSelectorFromString</span>(name)]) &#123;</div><div class="line">    resolve(@YES);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    reject(<span class="string">@"-1001"</span>, <span class="string">@"not respond this method"</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在JS中，我们有两种方式调用，第一种是通过<code>then....catch</code>的方式：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BGNativeModuleExample.testRespondMethod(<span class="string">"dealloc"</span>)</div><div class="line">    .then(result =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"result is "</span>, result);</div><div class="line">    &#125;)</div><div class="line">    .catch(error =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(error);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>第二种是通过<code>try...catch</code>来调用，与第一种相比，第二种会报警告”Possible Unhandled Promiss Rejection (id:0)“。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  async testRespond() &#123;</div><div class="line">  try &#123;</div><div class="line">    var result = BGNativeModuleExample.testRespondMethod(&quot;hell&quot;);</div><div class="line">    if(result) &#123;</div><div class="line">      console.log(&quot;respond this method&quot;);</div><div class="line">    &#125;</div><div class="line">  &#125; catch (e) &#123;</div><div class="line">    console.log(e);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意: 如果使用Promiss我们不需要参数，则在OC去掉name那一行就行了；如果需要多个参数，在name下面多加一行就行了，注意它们之间不需要添加逗号。</strong></p>
<h4 id="6、多线程"><a href="#6、多线程" class="headerlink" title="6、多线程"></a>6、多线程</h4><p>我们这里操作的模块没有涉及到UI，所以专门建立一个串行的队列给它使用，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return dispatch_queue_create(&quot;com.liuchungui.demo&quot;, DISPATCH_QUEUE_SERIAL);</div></pre></td></tr></table></figure>
<blockquote>
<p>注意: 在模块之间共享分发队列<br>methodQueue方法会在模块被初始化的时候被执行一次，然后会被React Native的桥接机制保存下来，所以你不需要自己保存队列的引用，除非你希望在模块的其它地方使用它。但是，如果你希望在若干个模块中共享同一个队列，则需要自己保存并返回相同的队列实例；仅仅是返回相同名字的队列是不行的。</p>
</blockquote>
<p>更多线程的操作细节可以参考<a href="http://reactnative.cn/docs/0.24/native-modules-ios.html#content" target="_blank" rel="external">http://reactnative.cn/docs/0.24/native-modules-ios.html#content</a></p>
<h4 id="7、导出常量"><a href="#7、导出常量" class="headerlink" title="7、导出常量"></a>7、导出常量</h4><p>原生模块可以导出一些常量，这些常量在JavaScript端随时都可以访问。用这种方法来传递一些静态数据，可以避免通过bridge进行一次来回交互。</p>
<p>OC中，我们实现<code>constantsToExport</code>方法，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSDictionary</span> *)constantsToExport &#123;</div><div class="line">  <span class="keyword">return</span> @&#123; <span class="string">@"BGModuleName"</span> : <span class="string">@"BGNativeModuleExample"</span>,</div><div class="line">            TestEventName: TestEventName</div><div class="line">            &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JS中，我们打印一下这个常量</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"BGModuleName value is "</span>, BGNativeModuleExample.BGModuleName);</div></pre></td></tr></table></figure>
<p>但是注意这个常量仅仅在初始化的时候导出了一次，所以即使你在运行期间改变constantToExport返回的值，也不会影响到JavaScript环境下所得到的结果。</p>
<h4 id="8、给JS发送事件"><a href="#8、给JS发送事件" class="headerlink" title="8、给JS发送事件"></a>8、给JS发送事件</h4><p>即使没有被JS调用，本地模块也可以给JS发送事件通知。最直接的方式是使用<code>eventDispatcher</code>。</p>
<p>在这里，我们为了能够接收到事件，我们开一个定时器，每一秒发送一次事件。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"BGNativeModuleExample.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"RCTEventDispatcher.h"</span></span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BGNativeModuleExample</span></span></div><div class="line"><span class="keyword">@synthesize</span> bridge = _bridge;</div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">    [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">1.0</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(sendEventToJS) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)receiveNotification:(<span class="built_in">NSNotification</span> *)notification &#123;</div><div class="line">  [<span class="keyword">self</span>.bridge.eventDispatcher sendAppEventWithName:TestEventName body:@&#123;<span class="string">@"name"</span>: <span class="string">@"Jack"</span>&#125;];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在JS中，我们这样接收事件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NativeAppEventEmitter.addListener(BGNativeModuleExample.TestEventName, info =&gt; &#123;</div><div class="line">      console.log(info);</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p><strong>注意： 编写OC代码时，需要添加<code>@synthesize bridge = _bridge;</code>，否则接收事件的时候就会报<code>Exception -[BGNativeModuleExample brige]; unrecognized selector sent to instance</code>的错误。</strong></p>
<p>上面原生代码就编写好了，主要以代码实践为主，弥补官方文档中的一些不足，如果要需要了解更多的原生模块封装的知识，可以参考<a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a>，也可以参考官方的源代码。</p>
<h2 id="二、发布上线"><a href="#二、发布上线" class="headerlink" title="二、发布上线"></a>二、发布上线</h2><p>我们按照上面步骤编写好原生模块之后，接下来将我们写的原生模块发布到npm。</p>
<h4 id="1、我们需要创建github仓库"><a href="#1、我们需要创建github仓库" class="headerlink" title="1、我们需要创建github仓库"></a>1、我们需要创建github仓库</h4><p>在github上创建一个仓库<code>react-native-BGNativeModuleExample</code>，然后关联到我们前面创建的<code>react-native-BGNativeModuleExample</code>目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd TestProject/node_modules/react-native-BGNativeModuleExample</div><div class="line">$ git init .</div><div class="line">$ git remote add origin https://github.com/liuchungui/react-native-BGNativeModuleExample.git</div></pre></td></tr></table></figure>
<h4 id="2、我们需要创建原生模块的入口文件"><a href="#2、我们需要创建原生模块的入口文件" class="headerlink" title="2、我们需要创建原生模块的入口文件"></a>2、我们需要创建原生模块的入口文件</h4><p>我们需要在react-native-BGNativeModuleExample目录下创建一个index.js，它是整个原生模块的入口，我们这里只是将原生进行导出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//index.js</div><div class="line">import React, &#123; NativeModules &#125; from &apos;react-native&apos;;</div><div class="line">module.exports = NativeModules.BGNativeModuleExample;</div></pre></td></tr></table></figure>
<h4 id="3、发布到npm"><a href="#3、发布到npm" class="headerlink" title="3、发布到npm"></a>3、发布到npm</h4><p>在发布到npm之前，我们需要创建一个<code>package.json</code>文件，这个文件包含了module的所有信息，比如名称、版本、描述、依赖、作者、license等。<br>我们在react-native-BGNativeModuleExample根目录下使用<code>npm init</code>命令来创建<code>package.json</code>，系统会提示我们输入所需的信息，不想输入的直接按下<code>Enter</code>跳过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ npm init</div><div class="line">This utility will walk you through creating a package.json file.</div><div class="line">It only covers the most common items, and tries to guess sensible defaults.</div><div class="line"></div><div class="line">See `npm help json` for definitive documentation on these fields</div><div class="line">and exactly what they do.</div><div class="line"></div><div class="line">Use `npm install &lt;pkg&gt; --save` afterwards to install a package and</div><div class="line">save it as a dependency in the package.json file.</div><div class="line"></div><div class="line">Press ^C at any time to quit.</div><div class="line">name: (react-native-BGNativeModuleExample)</div></pre></td></tr></table></figure>
<p>输入完成之后，系统会要我们确认文件的内容是否有误，如果没有问题直接输入<code>yes</code>，那么<code>package.json</code>就创建好了。<br>我这里创建的package.json文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;react-native-nativemodule-example&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;repository&quot;: &#123;</div><div class="line">    &quot;type&quot;: &quot;git&quot;,</div><div class="line">    &quot;url&quot;: &quot;git+https://github.com/liuchungui/react-native-BGNativeModuleExample.git&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;author&quot;: &quot;&quot;,</div><div class="line">  &quot;license&quot;: &quot;ISC&quot;,</div><div class="line">  &quot;bugs&quot;: &#123;</div><div class="line">    &quot;url&quot;: &quot;https://github.com/liuchungui/react-native-BGNativeModuleExample/issues&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;homepage&quot;: &quot;https://github.com/liuchungui/react-native-BGNativeModuleExample#readme&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果我们编写的原生模块依赖于其他的原生模块，我们需要在<code>package.json</code>添加依赖关系，我们这里由于没有相关依赖，所以不需要添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>初始化完package.json，我们就可以发布到npm上面了。</strong></p>
<p>如果没有npm的账号，我们需要注册一个账号，这个账号会被添加到npm本地的配置中，用来发布module用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm adduser   </div><div class="line">Username: your name</div><div class="line">Password: your password</div><div class="line">Email: yourmail@gmail.com</div></pre></td></tr></table></figure>
<p>成功之后，npm会把认证信息存储在~/.npmrc中，并且可以通过以下命令查看npm当前使用的用户：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm whoami</div></pre></td></tr></table></figure>
<p>以上完成之后，我们就可以进行发布了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$npm publish</div><div class="line">+ react-native-nativemodule-example@1.0.0</div></pre></td></tr></table></figure>
<p>到这里，我们已经成功把module发布到了<a href="npmjs.org">npmjs.org</a>。当然，我们也别忘记将我们的代码发布到github。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master</div><div class="line">$ git add .</div><div class="line">$ git commit -m &apos;add Project&apos;</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>有时候，有些文件没必要发布，例如Example文件，我们就可以通过<code>.npmignore</code>忽略它。例如我这里<code>.npmignore</code>文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Example/</div><div class="line">.git</div><div class="line">.gitignore</div><div class="line">.idea</div></pre></td></tr></table></figure>
<p>这样的话，我们npm进行发布的时候，就不会将Example发布到npm上了。</p>
<h4 id="4、添加Example，测试是否可用，添加README"><a href="#4、添加Example，测试是否可用，添加README" class="headerlink" title="4、添加Example，测试是否可用，添加README"></a>4、添加Example，测试是否可用，添加README</h4><p>我们在<code>react-native-BGNativeModuleExample</code>目录下创建一个Example的ReactNative工程，并且通过<code>rnpm install react-native-nativemodule-example</code>命令安装我们发布的<code>react-native-nativemodule-example</code>模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ rnpm install react-native-nativemodule-example</div><div class="line">TestProject@0.0.1 /Users/user/github/TestProject</div><div class="line">└── react-native-nativemodule-example@1.0.0 </div><div class="line"></div><div class="line">rnpm-link info Linking react-native-nativemodule-example ios dependency </div><div class="line">rnpm-link info iOS module react-native-nativemodule-example has been successfully linked </div><div class="line">rnpm-link info Module react-native-nativemodule-example has been successfully installed &amp; linked</div></pre></td></tr></table></figure>
<p>上面提示安装并且link成功，我们就可以在js中进行使用了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import BGNativeModuleExample from &apos;react-native-nativemodule-example&apos;;</div><div class="line"></div><div class="line">BGNativeModuleExample.testPrint(&quot;Jack&quot;, &#123;</div><div class="line">    height: &apos;1.78m&apos;,</div><div class="line">    weight: &apos;7kg&apos;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="5、我们在发布上线之后还需要编写README文件。"><a href="#5、我们在发布上线之后还需要编写README文件。" class="headerlink" title="5、我们在发布上线之后还需要编写README文件。"></a>5、我们在发布上线之后还需要编写README文件。</h4><p>README文件是非常重要的，如果没有README文件，别人看到我们的原生组件，根本就不知道我们这个组件是用来干啥的。所以，我们很有必要添加一个README文件，这个文件需要告诉别人我们这个原生组件是干什么的、如何安装、API、使用手册等等。</p>
<h4 id="6、原生模块升级，发布新版本"><a href="#6、原生模块升级，发布新版本" class="headerlink" title="6、原生模块升级，发布新版本"></a>6、原生模块升级，发布新版本</h4><p>当我们添加新代码或者修复bug后，需要发布新的版本，我们只需要修改package.json文件中的<code>version</code>的值就行了，然后使用<code>npm publish</code>进行发布。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇文章主要分成两个部分，一是讲述了编写原生模块的知识，二是将我们编写的内容发布到npm上。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://weizhifeng.net/how-to-publish-a-node-module.html" target="_blank" rel="external">如何发布Node模块到NPM社区</a></p>
<p><a href="http://reactnative.cn/docs/0.22/native-modules-ios.html#content" target="_blank" rel="external">原生模块</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间做了个ReactNative的App，发现ReactNative中不少组件并不存在，所以还是需要自己对原生模块进行编写让JS调用，正是因为在这个编写过程中遇到不少问题，发觉了官网文档中许多的不足。所以产生了写一个实践教程的想法，最终有了这么一篇文章。&lt;/p&gt;
&lt;p&gt;整篇文章主要以编写一个原生模块为例子，来讲述了我们在编写原生模块所用到的一些知识，并且在整个例子中，配有了完整的实践代码，方便大家理解并调试。除了这些内容，文章还讲述了我们如何将自己编写的原生模块发布到npm上分享给别人使用。希望能够给大家带来帮助，也希望大家将自己编写的原生模块分享出来。&lt;/p&gt;
&lt;p&gt;示例代码github地址：&lt;a href=&quot;https://github.com/liuchungui/react-native-BGNativeModuleExample&quot;&gt;https://github.com/liuchungui/react-native-BGNativeModuleExample&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编写android原生模块，请看&lt;a href=&quot;http://www.liuchungui.com/blog/2016/05/08/reactnativezhi-yuan-sheng-mo-kuai-kai-fa-bing-fa-bu-androidpian/&quot;&gt;ReactNative之原生模块开发并发布——android篇&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative, 原生模块, react native, ReactNative原生模块, react native 原生模块, react native 原生模块发布,reactNative原生模块ios" scheme="http://www.liuchungui.com/tags/ReactNative-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-ReactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97-react-native-%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97%E5%8F%91%E5%B8%83-reactNative%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97ios/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu下搭建vpn历程</title>
    <link href="http://www.liuchungui.com/2016/04/23/ubuntuxia-da-jian-vpn/"/>
    <id>http://www.liuchungui.com/2016/04/23/ubuntuxia-da-jian-vpn/</id>
    <published>2016-04-23T08:27:39.000Z</published>
    <updated>2016-08-06T05:44:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>去年四月份的时候，和同学一起买了一个香港的服务器，准备搭建一个vpn给自己翻墙用。当时，vpn搭建成功了，但是连上去之后，根本连不了google。后来，去咨询了一下盼哥，盼哥给我介绍了一款很出名的翻墙工具Shadowsocks。于是，到网上搜了一个教程，apt-get install安装，稍微配置一下，在本地电脑下载一个客户端，填写服务器和密码，在浏览器中输入google.com立马就出现了心动的页面，顿时整个人感觉神清气爽，觉得Shadowsocks真是个好东西。于是，使用Shadowsocks翻墙，用到了现在，一直感觉不错。不过，在使用途中，它也存在一定的不足，那就是命令行下无法翻墙，手机上体验不太好（我使用一次就不再使用了）。前几天，由于使用ReactNative开发安卓，在命令行下一定需要翻墙下载google的东西。于是乎，重整了一下vpn，最终还是以失败告终。后来，准备曲线救国，使用Shadowsocks和一些辅助工具进行全局翻墙，查找了网上的教程，搭建后都失败了。最终，在网上下载了一个vpn翻墙工具<code>VPN Unlimited</code>，搞定了自己的问题，但是有时间限制。</p>
<p>今天，按照同学发的一个链接教程重新整一下vpn，又以失败告终，而且VPN启动都启动不起来了，于是乎google到上面继续找教程，找到了一篇<a href="http://my.oschina.net/mn1127/blog/380941" target="_blank" rel="external">vps ubuntu上搭建pptp服务</a>，按照上面搭建，没想到成功了。<br>鉴于以上搭建的不容易，特此记录一下搭建步骤。<br><a id="more"></a></p>
<h2 id="1、卸载pptpd和iptables，重新安装pptpd"><a href="#1、卸载pptpd和iptables，重新安装pptpd" class="headerlink" title="1、卸载pptpd和iptables，重新安装pptpd"></a>1、卸载pptpd和iptables，重新安装pptpd</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#卸载pptpd</div><div class="line">$ apt-get autoremove pptpd</div><div class="line">$ apt-get purge pptpd</div><div class="line"></div><div class="line">#卸载iptables</div><div class="line">$ apt-get autoremove iptables*</div><div class="line">$ apt-get purge iptables*</div><div class="line"></div><div class="line">#安装pptpd</div><div class="line">$ apt-get install pptpd</div></pre></td></tr></table></figure>
<h2 id="2、配置pptpd"><a href="#2、配置pptpd" class="headerlink" title="2、配置pptpd"></a>2、配置pptpd</h2><h4 id="（1）首先，编辑pptpd-conf文件，设置localip和remoteip"><a href="#（1）首先，编辑pptpd-conf文件，设置localip和remoteip" class="headerlink" title="（1）首先，编辑pptpd.conf文件，设置localip和remoteip"></a>（1）首先，编辑pptpd.conf文件，设置localip和remoteip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/pptpd.conf</div></pre></td></tr></table></figure>
<p>查找到localip和remoteip，打开注释进行设置。将localip设置为你的vps的服务器公网ip，不知道可以通过ifconfig查看。remoteip是设置给VPN用户分配的IP段，我这里设置为10.100.0.2-100。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localip VPS_IP</div><div class="line">remoteip 10.100.0.2-100</div></pre></td></tr></table></figure>
<h4 id="（2）修改dns设置，设置为google的DNS"><a href="#（2）修改dns设置，设置为google的DNS" class="headerlink" title="（2）修改dns设置，设置为google的DNS"></a>（2）修改dns设置，设置为google的DNS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ppp/pptpd-options</div></pre></td></tr></table></figure>
<p>查找到ms-dns，配置dns如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure>
<h4 id="（3）设置VPN的账号密码"><a href="#（3）设置VPN的账号密码" class="headerlink" title="（3）设置VPN的账号密码"></a>（3）设置VPN的账号密码</h4><p>编辑chap-secrets文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ppp/chap-secrets</div></pre></td></tr></table></figure>
<p>在chap-secrets文件中添加一行配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#client           server       secret      IP address</div><div class="line"> liuchungui       pptpd        123456          *</div></pre></td></tr></table></figure>
<p>其中，liuchungui是VPN的用户名，使用的VPN服务类型是pptpd，密码是123456，*代表不限制IP</p>
<h2 id="3、启动pptpd服务"><a href="#3、启动pptpd服务" class="headerlink" title="3、启动pptpd服务"></a>3、启动pptpd服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/pptpd restart</div></pre></td></tr></table></figure>
<p> 输入上面命令，如果提示`</p>
<ul>
<li>Restarting PoPToP Point to Point Tunneling Server pptpd               [ OK ] `<br>就说明启动成功了</li>
</ul>
<h2 id="4、设置系统的ipv4的转发开关"><a href="#4、设置系统的ipv4的转发开关" class="headerlink" title="4、设置系统的ipv4的转发开关"></a>4、设置系统的ipv4的转发开关</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>编辑<code>/etc/sysctl.conf</code>文件，找到<code>net.ipv4.ip_forward=1</code>，把这行的注释打开并保存。<br>运行：<code>sysctl -p</code> 让上面的修改立即生效。</p>
<h2 id="5、配置iptables"><a href="#5、配置iptables" class="headerlink" title="5、配置iptables"></a>5、配置iptables</h2><h4 id="（1）安装iptables"><a href="#（1）安装iptables" class="headerlink" title="（1）安装iptables"></a>（1）安装iptables</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install iptables</div></pre></td></tr></table></figure>
<h4 id="（2）添加一个NAT，这里特别注意：eth1是vps的ip网卡接口，可以通过ifconfig查看"><a href="#（2）添加一个NAT，这里特别注意：eth1是vps的ip网卡接口，可以通过ifconfig查看" class="headerlink" title="（2）添加一个NAT，这里特别注意：eth1是vps的ip网卡接口，可以通过ifconfig查看"></a>（2）添加一个NAT，这里特别注意：<code>eth1</code>是vps的ip网卡接口，可以通过ifconfig查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -t nat -A POSTROUTING -s 10.100.0.0/24 -o eth1 -j MASQUERADE</div></pre></td></tr></table></figure>
<h4 id="（3）设置MTU，防止包过大"><a href="#（3）设置MTU，防止包过大" class="headerlink" title="（3）设置MTU，防止包过大"></a>（3）设置MTU，防止包过大</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -A FORWARD -s 10.100.0.0/24 -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --set-mss 1200</div></pre></td></tr></table></figure>
<h4 id="（4）再添加一个NAT，45-62-119-172就是你的vps的公网ip"><a href="#（4）再添加一个NAT，45-62-119-172就是你的vps的公网ip" class="headerlink" title="（4）再添加一个NAT，45.62.119.172就是你的vps的公网ip"></a>（4）再添加一个NAT，<code>45.62.119.172</code>就是你的vps的公网ip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables -t nat -A POSTROUTING -s 10.100.0.0/24 -j SNAT --to-source 45.62.119.172</div></pre></td></tr></table></figure>
<h4 id="（5）将iptables规则保存，令重启后规则不丢失："><a href="#（5）将iptables规则保存，令重启后规则不丢失：" class="headerlink" title="（5）将iptables规则保存，令重启后规则不丢失："></a>（5）将iptables规则保存，令重启后规则不丢失：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ iptables-save &gt; /etc/iptables-rules</div></pre></td></tr></table></figure>
<h4 id="（6）编辑网卡文件，加载网卡时自动加载规则"><a href="#（6）编辑网卡文件，加载网卡时自动加载规则" class="headerlink" title="（6）编辑网卡文件，加载网卡时自动加载规则"></a>（6）编辑网卡文件，加载网卡时自动加载规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/network/interfaces</div></pre></td></tr></table></figure>
<p>在<code>interfaces</code>文件末尾加上：<code>pre-up iptables-restore &lt; /etc/iptables-rules</code></p>
<h4 id="（7）安装iptables配置持久化"><a href="#（7）安装iptables配置持久化" class="headerlink" title="（7）安装iptables配置持久化"></a>（7）安装iptables配置持久化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install iptables-persistent</div></pre></td></tr></table></figure>
<h4 id="（8）运行保存配置命令"><a href="#（8）运行保存配置命令" class="headerlink" title="（8）运行保存配置命令"></a>（8）运行保存配置命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service iptables-persistent start</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://my.oschina.net/mn1127/blog/380941" target="_blank" rel="external">vps ubuntu上搭建pptp服务</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年四月份的时候，和同学一起买了一个香港的服务器，准备搭建一个vpn给自己翻墙用。当时，vpn搭建成功了，但是连上去之后，根本连不了google。后来，去咨询了一下盼哥，盼哥给我介绍了一款很出名的翻墙工具Shadowsocks。于是，到网上搜了一个教程，apt-get install安装，稍微配置一下，在本地电脑下载一个客户端，填写服务器和密码，在浏览器中输入google.com立马就出现了心动的页面，顿时整个人感觉神清气爽，觉得Shadowsocks真是个好东西。于是，使用Shadowsocks翻墙，用到了现在，一直感觉不错。不过，在使用途中，它也存在一定的不足，那就是命令行下无法翻墙，手机上体验不太好（我使用一次就不再使用了）。前几天，由于使用ReactNative开发安卓，在命令行下一定需要翻墙下载google的东西。于是乎，重整了一下vpn，最终还是以失败告终。后来，准备曲线救国，使用Shadowsocks和一些辅助工具进行全局翻墙，查找了网上的教程，搭建后都失败了。最终，在网上下载了一个vpn翻墙工具&lt;code&gt;VPN Unlimited&lt;/code&gt;，搞定了自己的问题，但是有时间限制。&lt;/p&gt;
&lt;p&gt;今天，按照同学发的一个链接教程重新整一下vpn，又以失败告终，而且VPN启动都启动不起来了，于是乎google到上面继续找教程，找到了一篇&lt;a href=&quot;http://my.oschina.net/mn1127/blog/380941&quot;&gt;vps ubuntu上搭建pptp服务&lt;/a&gt;，按照上面搭建，没想到成功了。&lt;br&gt;鉴于以上搭建的不容易，特此记录一下搭建步骤。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="vpn" scheme="http://www.liuchungui.com/tags/vpn/"/>
    
      <category term="ubuntu搭建vpn" scheme="http://www.liuchungui.com/tags/ubuntu%E6%90%AD%E5%BB%BAvpn/"/>
    
      <category term="unbutn" scheme="http://www.liuchungui.com/tags/unbutn/"/>
    
  </entry>
  
  <entry>
    <title>GCD总结</title>
    <link href="http://www.liuchungui.com/2016/04/04/gcdzong-jie/"/>
    <id>http://www.liuchungui.com/2016/04/04/gcdzong-jie/</id>
    <published>2016-04-04T11:13:33.000Z</published>
    <updated>2016-08-06T05:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GCD的知识点："><a href="#GCD的知识点：" class="headerlink" title="GCD的知识点："></a>GCD的知识点：</h3><ol>
<li>queue分成两种，分别是串行队列(Serial Dispatch Queue)和并行队列（Concurrent Dispatch Queue)。</li>
<li>串行队列只会创建一个线程，而各个串行队列之间是并行的。</li>
<li>串行队列个数创建不受限制，也就是通过串行队列创建的线程可以有很多个，但是这样会存在消耗大量内存的问题；而并行队列不会，不管创建多少个并行队列，XNU内核只使用有效管理的线程。</li>
<li>在iOS6以后，ARC已经实现了GCD的内存管理，所以不用我们去管理它的内存了。</li>
<li>系统已经为我们提供了两个queue，分别是main queue和global queue，其中main queue是串行队列，global queue是并行队列。</li>
</ol>
<a id="more"></a>
<h2 id="GCD的API："><a href="#GCD的API：" class="headerlink" title="GCD的API："></a>GCD的API：</h2><h3 id="1、dispatch-set-target-queue"><a href="#1、dispatch-set-target-queue" class="headerlink" title="1、dispatch_set_target_queue"></a>1、dispatch_set_target_queue</h3><p>这个api有两个功能，一是设置dispatch_queue_create创建队列的优先级，二是建立队列的执行阶层。</p>
<p>（1）当使用dispatch_queue_create创建队列的时候，不管是串行还是并行，它们的优先级都是<code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code>级别，而这个API就是可以设置队列的优先级。</p>
<p>如下，将serailQueue设置成<code>DISPATCH_QUEUE_PRIORITY_HIGH</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_queue_t</span> serialQueue = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_SERIAL);</div><div class="line">    <span class="built_in">dispatch_queue_t</span> globalQueue = </div><div class="line">dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>);</div><div class="line"><span class="comment">//注意：被设置优先级的队列是第一个参数。</span></div><div class="line">dispatch_set_target_queue(serialQueue, globalQueue);</div></pre></td></tr></table></figure>
<p>（2）使用这个API可以设置队列执行阶层，例如<code>dispatch_set_target_queue(queue1, targetQueue);</code>这样设置时，相当于将queue1指派给targetQueue，如果targetQueue是串行队列，则queue1是串行执行的；如果targetQueue是并行队列，那么queue1是并行的。</p>
<p>当targetQueue为串行队列时，代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">const char * kBGGCDTestIdentifier = &quot;kBGGCDTestIdentifier&quot;;</div><div class="line">void testTargetQueue() &#123;</div><div class="line">    dispatch_queue_t targetQueue = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">    dispatch_queue_t queue1 = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t queue2 = dispatch_queue_create(kBGGCDTestIdentifier, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    </div><div class="line">    dispatch_set_target_queue(queue1, targetQueue);</div><div class="line">    dispatch_set_target_queue(queue2, targetQueue);</div><div class="line">    </div><div class="line">    dispatch_async(queue1, ^&#123;</div><div class="line">        NSLog(@&quot;queue1 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(queue1, ^&#123;</div><div class="line">        NSLog(@&quot;queue1 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(queue2, ^&#123;</div><div class="line">        NSLog(@&quot;queue2 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(queue2, ^&#123;</div><div class="line">        NSLog(@&quot;queue2 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(targetQueue, ^&#123;</div><div class="line">        NSLog(@&quot;target queue&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-03-11 00:03:31.015 BGGCDDemo[23237:6187006] queue1 1</div><div class="line">2016-03-11 00:03:31.015 BGGCDDemo[23237:6187006] queue1 2</div><div class="line">2016-03-11 00:03:31.016 BGGCDDemo[23237:6187006] queue2 1</div><div class="line">2016-03-11 00:03:31.017 BGGCDDemo[23237:6187006] queue2 2</div><div class="line">2016-03-11 00:03:31.018 BGGCDDemo[23237:6187006] target queue</div></pre></td></tr></table></figure>
<p>当上面代码中targetQueue是并行队列时</p>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188776] queue2 1</div><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188777] queue1 1</div><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188780] queue2 2</div><div class="line">2016-03-11 00:04:48.234 BGGCDDemo[23331:6188786] target queue</div><div class="line">2016-03-11 00:04:48.235 BGGCDDemo[23331:6188777] queue1 2</div></pre></td></tr></table></figure>
<p>参考：<a href="http://justsee.iteye.com/blog/2233252" target="_blank" rel="external">http://justsee.iteye.com/blog/2233252</a></p>
<h3 id="2、dispatch-after"><a href="#2、dispatch-after" class="headerlink" title="2、dispatch_after"></a>2、dispatch_after</h3><p>指定时间执行某些内容，例如，下面一秒后执行打印信息.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">      NSLog(@&quot;test&quot;);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="3、dispatch-group"><a href="#3、dispatch-group" class="headerlink" title="3、dispatch_group"></a>3、dispatch_group</h3><p>经常会有这么个需求，就是多个queue中所有操作执行完之后，想再执行结束处理，而dispatch_group正是干这个的。它有两种操作可以做到，一种是使用dispatch_group_notify，另外一种是使用dispatch_group_wait。</p>
<p>它们区别是dispatch_group_notify是可以将结束追加到某个队列当中，不会阻塞当前执行的线程；而dispatch_group_wait会阻塞当前执行线程，直到group中所有处理全部执行结束或超过等待的指定时间。当然，可以使用<code>DISPATCH_TIME_NOW</code>就不用等待，然后在主线程的Runloop每次循环中，检查执行是否结束，这样就不会堵塞当前执行的线程了，不过这样实现起来就会麻烦很多。所以，推荐使用dispatch_group_notify。</p>
<p>使用dispatch_group_notify时，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">void testGroupNotification() &#123;</div><div class="line">    dispatch_queue_t serialQueue = dispatch_queue_create(&quot;BG.serailQueue.com&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrentQueue.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    </div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_notify(group, dispatch_get_main_queue(), ^&#123;</div><div class="line">        NSLog(@&quot;finish!&quot;);</div><div class="line">    &#125;);</div><div class="line">    NSLog(@&quot;testGroupNotification&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用dispatch_group_wait时，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void testGroupWait() &#123;</div><div class="line">    dispatch_queue_t serialQueue = dispatch_queue_create(&quot;BG.serailQueue.com&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrentQueue.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_group_t group = dispatch_group_create();</div><div class="line">    </div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;serailQueue 2&quot;);</div><div class="line">        sleep(1);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_async(group, concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;concurrentQueue 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_group_wait(group, DISPATCH_TIME_FOREVER);</div><div class="line">    NSLog(@&quot;testGroupNotification&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4、dispatch-barrier-async"><a href="#4、dispatch-barrier-async" class="headerlink" title="4、dispatch_barrier_async"></a>4、dispatch_barrier_async</h3><p>dispatch_barrier_async加入的处理，会等待队列中所有的处理结束后才执行barrier当中的处理，而且只有等待barrier执行完之后，才会继续执行后续处理。<strong>使用并行队列和dispatch_barrier_async可以做到很高效的数据库或文件访问</strong>。</p>
<p>测试代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">void testBarrier() &#123;</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrent.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 1&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 2&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 3&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_barrier_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;writing&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 4&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_async(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;reading 5&quot;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2016-03-11 10:31:47.980 BGGCDDemo[28694:6276100] reading 2</div><div class="line">2016-03-11 10:31:47.980 BGGCDDemo[28694:6276099] reading 1</div><div class="line">2016-03-11 10:31:47.981 BGGCDDemo[28694:6276102] reading 3</div><div class="line">2016-03-11 10:31:47.981 BGGCDDemo[28694:6276102] writing</div><div class="line">2016-03-11 10:31:47.982 BGGCDDemo[28694:6276102] reading 4</div><div class="line">2016-03-11 10:31:47.982 BGGCDDemo[28694:6276099] reading 5</div></pre></td></tr></table></figure>
<h3 id="5、dispatch-sync"><a href="#5、dispatch-sync" class="headerlink" title="5、dispatch_sync"></a>5、dispatch_sync</h3><p>与dispatch_async异步不同的是dispatch_sync会等待当前处理结束之后有返回结果时才会继续往下走。与dispatch_group_wait有点类似，当使用dispatch_sync时，当前线程会被阻塞，直到它有返回结果为止。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void testSync() &#123;</div><div class="line">    dispatch_queue_t serialQueue = dispatch_queue_create(&quot;BG.serailQueue.com&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrent.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_sync(serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;test&quot;);</div><div class="line">    &#125;);</div><div class="line">    dispatch_sync(concurrentQueue, ^&#123;</div><div class="line">        NSLog(@&quot;test2&quot;);</div><div class="line">    &#125;);</div><div class="line">    NSLog(@&quot;finish&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2016-03-11 10:35:43.166 BGGCDDemo[28912:6278490] test</div><div class="line">2016-03-11 10:35:43.167 BGGCDDemo[28912:6278490] test2</div><div class="line">2016-03-11 10:35:43.167 BGGCDDemo[28912:6278490] finish</div></pre></td></tr></table></figure>
<p>使用dispatch_sync很容易造成死锁，如下代码在主线程中运行就会造成死锁：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">    NSLog(@&quot;test&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>分析：主线程会等待dispatch_sync函数返回，而dispatch_sync要等block执行完才会返回。而主线程是串行队列，采用FIFO队列执行任务，dispatch_sync加入的block是后加入的，这样的话这个block是得不到执行的，从而产生了死锁。</p>
<p><strong>官方文档指出：dispatch_sync的当前执行队列与提交block执行的目标队列相同时并且是串行队列时将造成死锁。</strong></p>
<p>参考：<br><a href="http://www.jianshu.com/p/44369c02b62a" target="_blank" rel="external">dispatch_sync死锁问题研究</a><br><a href="http://www.cnblogs.com/tangbinblog/p/4133481.html" target="_blank" rel="external">GCD 之线程死锁</a></p>
<h3 id="6、dispatch-apply"><a href="#6、dispatch-apply" class="headerlink" title="6、dispatch_apply"></a>6、dispatch_apply</h3><p>dispatch_apply函数是dispatch_sync和DISPATCH Group的关联API。该函数按指定的次数将指定的Block追加到指定的队列当中，并等待全部处理执行结束。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void testApply() &#123;</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrent.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_apply(5, concurrentQueue, ^(size_t index) &#123;</div><div class="line">        NSLog(@&quot;%zd&quot;, index);</div><div class="line">    &#125;);</div><div class="line">    NSLog(@&quot;done!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6331022] 0</div><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6331025] 2</div><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6330953] 1</div><div class="line">2016-03-11 12:08:35.524 BGGCDDemo[32542:6331023] 3</div><div class="line">2016-03-11 12:08:35.525 BGGCDDemo[32542:6331022] 4</div><div class="line">2016-03-11 12:08:35.525 BGGCDDemo[32542:6330953] done!</div></pre></td></tr></table></figure>
<p><strong>注意：因为dispatch_apply会让当前执行的线程等待，阻塞线程，因此最好将它放在dispatch_async中执行。</strong></p>
<h3 id="7、dispatch-suspend-dispatch-resume"><a href="#7、dispatch-suspend-dispatch-resume" class="headerlink" title="7、dispatch_suspend/dispatch_resume"></a>7、dispatch_suspend/dispatch_resume</h3><p>dispatch_suspend可以暂停当前队列的执行，dispatch_resume恢复当前队列的执行。<br>这两个函数都已经执行的处理没有影响。挂起后，追加到queue中但尚未执行的处理在此之后停止执行。而恢复则使得这些处理能够继续执行。</p>
<h3 id="8、Dispatch-Semaphore"><a href="#8、Dispatch-Semaphore" class="headerlink" title="8、Dispatch Semaphore"></a>8、Dispatch Semaphore</h3><p>信号量，更细粒度的处理资源竞争的方案。<br>主要用到三个方法dispatch_semaphore_create、dispatch_semaphore_wait、dispatch_semaphore_signal。</p>
<ul>
<li>dispatch_semaphore_create：创建一个dispatch_semaphore_t，并且初始化Dispatch Semaphore的计数值；</li>
<li>dispatch_semaphore_wait：等待Dispatch Semaphore的计数值大于等于1，如果大于等于1，则计数值减1并且往下继续执行；如果等于0，则一直等待计数值增加。</li>
<li>dispatch_semaphore_sigal：将Dispatch Semaphore的计数值加1</li>
</ul>
<p>这三个方法配合使用，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void testSemaphore() &#123;</div><div class="line">    dispatch_queue_t concurrentQueue = dispatch_queue_create(&quot;BG.concurrentQueue.com&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(1);</div><div class="line">    NSMutableArray *array = [NSMutableArray array];</div><div class="line">    for (NSInteger i = 0; i &lt; 10000; i++) &#123;</div><div class="line">        dispatch_async(concurrentQueue, ^&#123;</div><div class="line">            dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">            [array addObject:[NSNumber numberWithInteger:i]];</div><div class="line">            dispatch_semaphore_signal(semaphore);</div><div class="line">            NSLog(@&quot;%zd&quot;, i);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="9、dispatch-once"><a href="#9、dispatch-once" class="headerlink" title="9、dispatch_once"></a>9、dispatch_once</h3><p>保证在应用程序中只执行一次指定的处理，一般应用场景就是单例了。</p>
<h3 id="10、dispatch-source"><a href="#10、dispatch-source" class="headerlink" title="10、dispatch_source"></a>10、dispatch_source</h3><p>与Dispatch Queue不同的是，dispatch_source是可以进行取消的，而且可以添加取消的block回调；dispatch_source可以做异步读取文件映像、定时器、监听文件目录变化等等，具体请见下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_DATA_ADD</td>
<td style="text-align:left">数据增加</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_DATA_OR</td>
<td style="text-align:left">数据OR</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_MACH_SEND</td>
<td style="text-align:left">Mach端口发送</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_MACH_RECV</td>
<td style="text-align:left">Mach端口接收</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_MEMORYPRESSURE</td>
<td style="text-align:left">内存情况</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_PROC</td>
<td style="text-align:left">进程事件</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_READ</td>
<td style="text-align:left">读数据</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_SIGNAL</td>
<td style="text-align:left">信号</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_TIMER</td>
<td style="text-align:left">定时器</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_VNODE</td>
<td style="text-align:left">文件系统变化</td>
</tr>
<tr>
<td style="text-align:left">DISPATCH_SOURCE_TYPE_WRITE</td>
<td style="text-align:left">文件写入</td>
</tr>
</tbody>
</table>
<p>定时器代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (void)testSourceTimer &#123;</div><div class="line">    //定时器在主线程运行</div><div class="line">    dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, dispatch_get_main_queue());</div><div class="line">    //设置定时器每隔2秒调用一次，允许延迟1秒</div><div class="line">    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 2.0 * NSEC_PER_SEC, 1.0 * NSEC_PER_SEC);</div><div class="line">    //定时器执行的处理</div><div class="line">    dispatch_source_set_event_handler(timer, ^&#123;</div><div class="line">        NSLog(@&quot;timer work&quot;);</div><div class="line">//        dispatch_source_cancel(timer);</div><div class="line">    &#125;);</div><div class="line">    //定时器取消所做的处理</div><div class="line">    dispatch_source_set_cancel_handler(timer, ^&#123;</div><div class="line">        NSLog(@&quot;timer cancel!&quot;);</div><div class="line">    &#125;);</div><div class="line">    //需要将定时器设置为全局变量，否则就会被提前释放</div><div class="line">    self.timer = timer;</div><div class="line">    //启动定时器</div><div class="line">    dispatch_resume(timer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>监听文件夹变化代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (void)testSourceForObservFile &#123;</div><div class="line">    //创建文件夹，写入文件，用来进行测试</div><div class="line">    NSString *cacheDirectory = [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject];</div><div class="line">    NSString *directory = [NSString stringWithFormat:@&quot;%@/test&quot;, cacheDirectory];</div><div class="line">    if(![[NSFileManager defaultManager] fileExistsAtPath:directory isDirectory:nil]) &#123;</div><div class="line">        [[NSFileManager defaultManager] createDirectoryAtPath:directory withIntermediateDirectories:YES attributes:nil error:nil];</div><div class="line">    &#125;</div><div class="line">    NSString *filePath = [NSString stringWithFormat:@&quot;%@/test.txt&quot;, directory];</div><div class="line">    if(![[NSFileManager defaultManager] fileExistsAtPath:filePath]) &#123;</div><div class="line">        [@&quot;hello&quot; writeToFile:filePath atomically:YES encoding:NSUTF8StringEncoding error:nil];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    NSURL *directoryURL = [NSURL URLWithString:directory]; // assume this is set to a directory</div><div class="line">    int const fd = open([[directoryURL path] fileSystemRepresentation], O_EVTONLY);</div><div class="line">    if (fd &lt; 0) &#123;</div><div class="line">        char buffer[80];</div><div class="line">        strerror_r(errno, buffer, sizeof(buffer));</div><div class="line">        NSLog(@&quot;Unable to open \&quot;%@\&quot;: %s (%d)&quot;, [directoryURL path], buffer, errno);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    //设置源监听文件夹的变化，其中监听的是写入、删除、更改名字</div><div class="line">    dispatch_source_t source = dispatch_source_create(DISPATCH_SOURCE_TYPE_VNODE, fd,</div><div class="line">                                                      DISPATCH_VNODE_WRITE | DISPATCH_VNODE_DELETE | DISPATCH_VNODE_RENAME, DISPATCH_TARGET_QUEUE_DEFAULT);</div><div class="line">    dispatch_source_set_event_handler(source, ^()&#123;</div><div class="line">        //获取源变化的具体标志</div><div class="line">        unsigned long const data = dispatch_source_get_data(source);</div><div class="line">        if (data &amp; DISPATCH_VNODE_WRITE) &#123;</div><div class="line">            NSLog(@&quot;The directory changed.&quot;);</div><div class="line">        &#125;</div><div class="line">        if (data &amp; DISPATCH_VNODE_DELETE) &#123;</div><div class="line">            NSLog(@&quot;The directory has been deleted.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    dispatch_source_set_cancel_handler(source, ^()&#123;</div><div class="line">        close(fd);</div><div class="line">    &#125;);</div><div class="line">    self.source = source;</div><div class="line">    dispatch_resume(self.source);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考：<a href="https://github.com/ming1016/study/wiki/%E7%BB%86%E8%AF%B4GCD%EF%BC%88Grand-Central-Dispatch%EF%BC%89%E5%A6%82%E4%BD%95%E7%94%A8" target="_blank" rel="external">细说GCD如何使用</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GCD的知识点：&quot;&gt;&lt;a href=&quot;#GCD的知识点：&quot; class=&quot;headerlink&quot; title=&quot;GCD的知识点：&quot;&gt;&lt;/a&gt;GCD的知识点：&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;queue分成两种，分别是串行队列(Serial Dispatch Queue)和并行队列（Concurrent Dispatch Queue)。&lt;/li&gt;
&lt;li&gt;串行队列只会创建一个线程，而各个串行队列之间是并行的。&lt;/li&gt;
&lt;li&gt;串行队列个数创建不受限制，也就是通过串行队列创建的线程可以有很多个，但是这样会存在消耗大量内存的问题；而并行队列不会，不管创建多少个并行队列，XNU内核只使用有效管理的线程。&lt;/li&gt;
&lt;li&gt;在iOS6以后，ARC已经实现了GCD的内存管理，所以不用我们去管理它的内存了。&lt;/li&gt;
&lt;li&gt;系统已经为我们提供了两个queue，分别是main queue和global queue，其中main queue是串行队列，global queue是并行队列。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="Runtime" scheme="http://www.liuchungui.com/tags/Runtime/"/>
    
      <category term="Runtime总结" scheme="http://www.liuchungui.com/tags/Runtime%E6%80%BB%E7%BB%93/"/>
    
      <category term="Runtime调用代码" scheme="http://www.liuchungui.com/tags/Runtime%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative之Flex布局总结</title>
    <link href="http://www.liuchungui.com/2016/04/04/reactnativezhi-flexbu-ju-zong-jie/"/>
    <id>http://www.liuchungui.com/2016/04/04/reactnativezhi-flexbu-ju-zong-jie/</id>
    <published>2016-04-04T10:35:53.000Z</published>
    <updated>2016-08-06T05:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>从二月份开始学习ReactNative到现在已经有两个月了，零碎的记录了很多笔记，一直想写一些ReactNative相关的东西，奈何感觉自己学习的还比较浅陋，而且笔记比较杂乱，不知从何而起，所以迟迟没有动笔。清明三天假，决定无论如何都得整一篇出来。本来是想整一篇ReactNative布局篇的，但是看看那么多布局属性，自己对CSS又不是特别熟悉，布局篇从何谈起？所以，专门拿出ReactNative中布局比较重要的一个点Flex布局来做下总结，算是开启ReactNative篇章。</p>
<p>Flex是Flexible Box的缩写，意为“弹性布局”，2009年它由W3C提出了一种新的网页布局方案。而FaceBook将这个布局也应用到React和ReactNative两个项目当中。而在ReactNative当中，网页的有些属性和属性的值并不支持，下面来看看ReactNative当中支持的属性。（如果对于Flex布局不太了解的同学，可以看看<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a>）</p>
<a id="more"></a>
<h2 id="一、容器属性："><a href="#一、容器属性：" class="headerlink" title="一、容器属性："></a>一、容器属性：</h2><p>ReactNative支持的容器属性有flexDirection、flexWrap、justifyContent和alignItems。</p>
<h4 id="1、-flexDirection属性"><a href="#1、-flexDirection属性" class="headerlink" title="1、 flexDirection属性"></a>1、 flexDirection属性</h4><p>flexDirection属性决定了主轴的方向，它有两个值：</p>
<ul>
<li>row: 主轴为水平方向，起点在左端</li>
<li>column:  主轴为垂直方向，起点在顶部</li>
</ul>
<h4 id="2、flexWrap属性"><a href="#2、flexWrap属性" class="headerlink" title="2、flexWrap属性"></a>2、flexWrap属性</h4><p>flexWrap属性定义一条轴线排不下时是否折行。它有两个值，分别是’wrap’和’nowrap’，分别代表支持换行和不支持换行，默认是’nowrap’。</p>
<h4 id="3、justifyContent属性"><a href="#3、justifyContent属性" class="headerlink" title="3、justifyContent属性"></a>3、justifyContent属性</h4><p>主轴的对齐方式，默认为’flex-start’，它的值有五个：</p>
<ul>
<li>flex-start：主轴起点对齐</li>
<li>flex-end：主轴终点</li>
<li>center：居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等</li>
<li>space-around: 每个项目两侧的间隔相等。项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h4 id="4、alignItems属性"><a href="#4、alignItems属性" class="headerlink" title="4、alignItems属性"></a>4、alignItems属性</h4><p>交叉轴的对齐方式，默认为’stretch’，它有四个值：</p>
<ul>
<li>flex-start: 交叉轴的起点对齐</li>
<li>flex-end: 交叉轴的终点对齐</li>
<li>center: 交叉轴的中心对齐</li>
<li>stretch: 容器中的所有项目拉伸填满整个容器</li>
</ul>
<h2 id="二、项目属性"><a href="#二、项目属性" class="headerlink" title="二、项目属性"></a>二、项目属性</h2><h4 id="1、flex属性"><a href="#1、flex属性" class="headerlink" title="1、flex属性"></a>1、flex属性</h4><p>是否让当前的视图尽量占用更大的空间，这个属性可能使项目属性justifyContent失效。有两个值0和1，0代表否，1代表是，默认为0。</p>
<h3 id="2、alignSelf属性"><a href="#2、alignSelf属性" class="headerlink" title="2、alignSelf属性"></a>2、alignSelf属性</h3><p>允许单个项目在交叉轴方向上与其他项目不一样的对齐方式，可覆盖alignItems属性，它的值有五个，除了’auto’，其他都与alignItem属性完全一致，默认为’auto’。</p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>在刚开始接触ReactNative的时候，对于我这么一个从未有过前端开发的iOS开发程序员，两个地方直接让我懵了，一是里面的语法，另外一个就是Flex布局。布局当中其它例如bottom、left、margin等等属性都能从字面意思理解，而Flex布局，确实是从没见过的东西，不理解里面的概念根本没法用。好在找到了阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a>的这篇文章，快速的掌握了Flex布局。<br>在这几天ReactNative的开发当中，越发觉得Flex布局的重要性，能将上面的属性全部理解清楚的话，并且灵活使用，必然会让ReactNative开发之旅更加得心应手。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex 布局教程：语法篇</a><br><a href="http://reactnative.cn/docs/flexbox.html#content" target="_blank" rel="external">弹性盒(Flexbox)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从二月份开始学习ReactNative到现在已经有两个月了，零碎的记录了很多笔记，一直想写一些ReactNative相关的东西，奈何感觉自己学习的还比较浅陋，而且笔记比较杂乱，不知从何而起，所以迟迟没有动笔。清明三天假，决定无论如何都得整一篇出来。本来是想整一篇ReactNative布局篇的，但是看看那么多布局属性，自己对CSS又不是特别熟悉，布局篇从何谈起？所以，专门拿出ReactNative中布局比较重要的一个点Flex布局来做下总结，算是开启ReactNative篇章。&lt;/p&gt;
&lt;p&gt;Flex是Flexible Box的缩写，意为“弹性布局”，2009年它由W3C提出了一种新的网页布局方案。而FaceBook将这个布局也应用到React和ReactNative两个项目当中。而在ReactNative当中，网页的有些属性和属性的值并不支持，下面来看看ReactNative当中支持的属性。（如果对于Flex布局不太了解的同学，可以看看&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot;&gt;Flex 布局教程：语法篇&lt;/a&gt;）&lt;/p&gt;
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.liuchungui.com/tags/ReactNative/"/>
    
      <category term="react-native" scheme="http://www.liuchungui.com/tags/react-native/"/>
    
      <category term="Flex布局" scheme="http://www.liuchungui.com/tags/Flex%E5%B8%83%E5%B1%80/"/>
    
      <category term="Flex" scheme="http://www.liuchungui.com/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>Runtime之类与对象总结</title>
    <link href="http://www.liuchungui.com/2016/03/14/runtimezhi-lei-yu-dui-xiang-zong-jie/"/>
    <id>http://www.liuchungui.com/2016/03/14/runtimezhi-lei-yu-dui-xiang-zong-jie/</id>
    <published>2016-03-14T15:30:27.000Z</published>
    <updated>2016-10-03T09:38:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前在使用<a href="https://github.com/elado/jastor" target="_blank" rel="external">jastor</a>解析Json成model的时候里面涉及到了Runtime里面的知识，所以专门看了<a href="http://blog.jobbole.com/79566/" target="_blank" rel="external">Objective-C Runtime 运行时之一到六</a>这一系列的文章，整个Jastor也就懂了，现在非常出名的框架<a href="https://github.com/Mantle/Mantle" target="_blank" rel="external">Mantle</a>，<a href="https://github.com/icanzilb/JSONModel" target="_blank" rel="external">JSONModel</a>也都是差不多的原理。但是，一年之后的今天重新再看的时候，发现大概思路知道，但是具体的一些细节实现需要写的时候，却一时上不了手，所以重新看了<a href="http://blog.jobbole.com/79566/" target="_blank" rel="external">Objective-C Runtime 运行时</a>一系列，然后整理了一下，细节部分附上一些代码，方便以后查找。<br><a id="more"></a></p>
<h2 id="一、对象、类、元类之间的关系"><a href="#一、对象、类、元类之间的关系" class="headerlink" title="一、对象、类、元类之间的关系"></a>一、对象、类、元类之间的关系</h2><ul>
<li>每个对象是一个objc_object结构体，此结构体只有一个元素即指向其类的isa指针，isa指针的类型为Class。(Class的结构体后面有）</li>
<li>每个类也是一个对象，它的isa指针指向它的元类(meta class)，一般元类都是唯一的。</li>
<li>每个元类也是一个对象，它的isa指针指向NSObject的元类，而NSObject的元类指向它本身（即NSObject元类）</li>
<li>而每个类的super class都指向它的父类，直至NSObject，NSObject的super class为null。</li>
<li>每个元类的super class都指向它的父元类，直至NSObject元类。NSObject元类的父元类是NSObject，NSObject的父类是nil。</li>
</ul>
<p>注：上面使用代码测试过，主要使用object_getClass、class_getSuperClass和objc_getMetaClass来获取类、父类、元类，然后打印指针进行查看。</p>
<h2 id="二、类与对象基础数据结构"><a href="#二、类与对象基础数据结构" class="headerlink" title="二、类与对象基础数据结构"></a>二、类与对象基础数据结构</h2><p>Objective-C类是由Class类型来表示的，它实际上是一个指向objc_class结构体的指针，它的定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div></pre></td></tr></table></figure>
<p>查看objc/runtime.h中objc_class结构体的定义如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct objc_class &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line"> </div><div class="line">#if !__OBJC2__</div><div class="line">    Class super_class                       OBJC2_UNAVAILABLE;  // 父类</div><div class="line">    const char *name                        OBJC2_UNAVAILABLE;  // 类名</div><div class="line">    long version                            OBJC2_UNAVAILABLE;  // 类的版本信息，默认为0</div><div class="line">    long info                               OBJC2_UNAVAILABLE;  // 类信息，供运行期使用的一些位标识</div><div class="line">    long instance_size                      OBJC2_UNAVAILABLE;  // 该类的实例变量大小</div><div class="line">    struct objc_ivar_list *ivars            OBJC2_UNAVAILABLE;  // 该类的成员变量链表</div><div class="line">    struct objc_method_list **methodLists   OBJC2_UNAVAILABLE;  // 方法定义的链表</div><div class="line">    struct objc_cache *cache                OBJC2_UNAVAILABLE;  // 方法缓存</div><div class="line">    struct objc_protocol_list *protocols    OBJC2_UNAVAILABLE;  // 协议链表</div><div class="line">#endif</div><div class="line"> </div><div class="line">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>
<h2 id="三、调用方法时的流程"><a href="#三、调用方法时的流程" class="headerlink" title="三、调用方法时的流程"></a>三、调用方法时的流程</h2><p>首先到当前对象所属的类中的方法缓存列表中查找这个方法，如果没有则到该类的方法定义链表中查找方法，如果查找到，则执行这个方法将返回值返回给原调用对象，并且将这个方法加入缓存cache当中；如果没有查找到则通过super_class找到它的父类，到它的父类中查找。</p>
<p>想了解更多Runtime方法调用知识，请看<a href="http://blog.jobbole.com/79574/" target="_blank" rel="external">Objective-C Runtime 运行时之三：方法与消息</a></p>
<h2 id="四、类与对象的操作函数"><a href="#四、类与对象的操作函数" class="headerlink" title="四、类与对象的操作函数"></a>四、类与对象的操作函数</h2><p>runtime提供了大量的函数来操作类与对象，操作类的函数一般前缀是class，而操作对象的函数一般前缀是objc。</p>
<h4 id="1、类相关操作函数"><a href="#1、类相关操作函数" class="headerlink" title="1、类相关操作函数"></a>1、类相关操作函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 获取类的类名</div><div class="line">const char * class_getName ( Class cls );</div><div class="line">// 获取类的父类</div><div class="line">Class class_getSuperclass ( Class cls );</div><div class="line"> </div><div class="line">// 判断给定的Class是否是一个元类</div><div class="line">BOOL class_isMetaClass ( Class cls );</div><div class="line">// 获取实例大小</div><div class="line">size_t class_getInstanceSize ( Class cls );</div></pre></td></tr></table></figure>
<h4 id="2、成员变量相关操作函数"><a href="#2、成员变量相关操作函数" class="headerlink" title="2、成员变量相关操作函数"></a>2、成员变量相关操作函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 获取类中指定名称实例成员变量的信息</div><div class="line">Ivar class_getInstanceVariable ( Class cls, const char *name );</div><div class="line"> </div><div class="line">// 获取类成员变量的信息</div><div class="line">Ivar class_getClassVariable ( Class cls, const char *name );</div><div class="line"> </div><div class="line">// 添加成员变量</div><div class="line">BOOL class_addIvar ( Class cls, const char *name, size_t size, uint8_t alignment, const char *types );</div><div class="line"> </div><div class="line">// 获取整个成员变量列表</div><div class="line">Ivar * class_copyIvarList ( Class cls, unsigned int *outCount );</div></pre></td></tr></table></figure>
<p>需要注意：</p>
<ul>
<li>class_copyIvarList：获取的是所有成员实例属性，与property获取不一样。</li>
<li>class_addIvar: <strong>OC不支持往已存在的类中添加实例变量</strong>，因此不管是系统库提供的类，还是我们自定义的类，都无法动态给它添加成员变量。<strong>但，如果是我们通过运行时来创建的类，我们可以使用class_addIvar来添加。不过，需要注意的是，这个方法只能在objc_allocateClassPair函数与objc_registerClassPair之间调用。</strong>另外，<strong>这个类也不能是元类</strong>。</li>
</ul>
<p>代码测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  测试成员变量</div><div class="line"> */</div><div class="line">- (void)testIvar &#123;</div><div class="line">    unsigned int outCount;</div><div class="line">    if(class_addIvar([Student class], &quot;_hell&quot;, sizeof(id), log2(sizeof(id)), &quot;@&quot;)) &#123;</div><div class="line">        NSLog(@&quot;Add Ivar Success!&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;Add Ivar failed!&quot;);</div><div class="line">    &#125;</div><div class="line">    Ivar *ivarList = class_copyIvarList([Student class], &amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        Ivar ivar = ivarList[i];</div><div class="line">        const char *ivarName = ivar_getName(ivar);</div><div class="line">        ptrdiff_t offset = ivar_getOffset(ivar);</div><div class="line">        const char *types = ivar_getTypeEncoding(ivar);</div><div class="line">        NSLog(@&quot;ivar:%s, offset:%zd, type:%s&quot;, ivarName, offset, types);</div><div class="line">    &#125;</div><div class="line">    free(ivarList);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：class_addIvar中第三个参数设置类型的大小，第四个参数设置对齐，对齐传递log2(size)，具体原因参考：<a href="http://stackoverflow.com/questions/33184826/what-does-class-addivars-alignment-do-in-objective-c" target="_blank" rel="external">http://stackoverflow.com/questions/33184826/what-does-class-addivars-alignment-do-in-objective-c</a></p>
<h4 id="3、属性操作函数"><a href="#3、属性操作函数" class="headerlink" title="3、属性操作函数"></a>3、属性操作函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 获取指定的属性</div><div class="line">objc_property_t class_getProperty ( Class cls, const char *name );</div><div class="line"> </div><div class="line">// 获取属性列表</div><div class="line">objc_property_t * class_copyPropertyList ( Class cls, unsigned int *outCount );</div><div class="line"> </div><div class="line">// 为类添加属性</div><div class="line">BOOL class_addProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</div><div class="line"> </div><div class="line">// 替换类的属性</div><div class="line">void class_replaceProperty ( Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount );</div></pre></td></tr></table></figure>
<p>这一种方法也是针对ivar来操作的，不过它只操作那些property的值，包括扩展中的property。</p>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">- (void)testProperty &#123;</div><div class="line">    /**</div><div class="line">     *  添加property</div><div class="line">     */</div><div class="line">    objc_property_attribute_t attribute1 = &#123;&quot;T&quot;, &quot;@\&quot;NSString\&quot;&quot;&#125;;</div><div class="line">    objc_property_attribute_t attribute2 = &#123;&quot;C&quot;, &quot;&quot;&#125;;</div><div class="line">    objc_property_attribute_t attribute3 = &#123;&quot;N&quot;, &quot;&quot;&#125;;</div><div class="line">    objc_property_attribute_t attribute4 = &#123;&quot;V&quot;, &quot;_lcg&quot;&#125;;</div><div class="line">    objc_property_attribute_t attributesList[] = &#123;attribute1, attribute2, attribute3, attribute4&#125;;</div><div class="line">    if(class_addProperty([Student class], &quot;lcg&quot;, attributesList, 4)) &#123;</div><div class="line">        NSLog(@&quot;add property success!&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;add property failure!&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  打印property的name和property_attribute_t</div><div class="line">     */</div><div class="line">    unsigned int outCount;</div><div class="line">    objc_property_t *propertyList = class_copyPropertyList([Student class], &amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        objc_property_t property = propertyList[i];</div><div class="line">        const char *propertyName = property_getName(property);</div><div class="line">        const char *attribute = property_getAttributes(property);</div><div class="line">        NSLog(@&quot;propertyName: %s, attribute: %s&quot;, propertyName, attribute);</div><div class="line">        </div><div class="line">        unsigned int attributeCount;</div><div class="line">        objc_property_attribute_t *attributeList = property_copyAttributeList(property, &amp;attributeCount);</div><div class="line">        for (unsigned int j = 0; j &lt; attributeCount; j++) &#123;</div><div class="line">            objc_property_attribute_t attribute = attributeList[j];</div><div class="line">            const char *name = attribute.name;</div><div class="line">            const char *value = attribute.value;</div><div class="line">            NSLog(@&quot;attribute name: %s, value: %s&quot;, name, value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码有几个知识点需要说一下： </p>
<p>(1) 其中property_attribute的相关内容需要说明下。   </p>
<p>   property_attribute为<strong>T@”NSString”,&amp;,N,V_exprice</strong>时：    </p>
<ul>
<li><strong>T</strong> 是固定的，放在第一个</li>
<li><strong>@”NSString”</strong> 代表这个property是一个字符串对象</li>
<li><strong>&amp;</strong> 代表强引用，其中与之并列的是：’C’代表Copy，’&amp;’代表强引用，’W’表示weak，assign为空，默认为assign。</li>
<li><strong>N</strong> 区分的nonatomic和atomic，默认为atomic，atomic为空，’N’代表是nonatomic</li>
<li><p><strong>V_exprice</strong> V代表变量，后面紧跟着的是成员变量名，代表这个property的成员变量名为_exprice。</p>
<p>property_attribute为<strong>T@”NSNumber”,R,N,V_yearsOld</strong>时：</p>
</li>
<li><p><strong>T</strong> 是固定的，放在第一个</p>
</li>
<li><strong>@”NSNumber”</strong> 代表这个property是一个NSNumber对象</li>
<li><strong>R</strong> 代表readOnly属性，readwrite时为空</li>
<li><strong>N</strong> 区分的nonatomic和atomic，默认为atomic，atomic为空，’N’代表是nonatomic</li>
<li><strong>V_yearsOld</strong> V代表变量，后面紧跟着的是成员变量名，代表这个property的成员变量名为_yearsOld。</li>
</ul>
<p>使用例子参考：<a href="http://www.tuicool.com/articles/aY3Ujii" target="_blank" rel="external">http://www.tuicool.com/articles/aY3Ujii</a><br>官方参考：<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW6" target="_blank" rel="external">Property Type</a></p>
<p>（2） 添加property，property_attribute_t是一个结构体，没有具体创建的方法，我们就只能使用{}这样结构体直接赋值过去。而且，添加property成功之后，它并不会生成<strong>实例属性、setter方法和getter方法</strong>。如果要真正调用的话，还需要我们自己添加对应的setter和getter方法。<br>详情使用请见：<a href="http://blog.csdn.net/meegomeego/article/details/18356169" target="_blank" rel="external">http://blog.csdn.net/meegomeego/article/details/18356169</a></p>
<h4 id="4、协议相关函数"><a href="#4、协议相关函数" class="headerlink" title="4、协议相关函数"></a>4、协议相关函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 添加协议</div><div class="line">BOOL class_addProtocol ( Class cls, Protocol *protocol );</div><div class="line"> </div><div class="line">// 返回类是否实现指定的协议</div><div class="line">BOOL class_conformsToProtocol ( Class cls, Protocol *protocol );</div><div class="line"> </div><div class="line">// 返回类实现的协议列表</div><div class="line">Protocol * class_copyProtocolList ( Class cls, unsigned int *outCount );</div></pre></td></tr></table></figure>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)testProtocolList &#123;</div><div class="line">    //添加协议</div><div class="line">    Protocol *p = @protocol(StudentDataSource);</div><div class="line">    if(class_addProtocol([Student class], p)) &#123;</div><div class="line">        NSLog(@&quot;添加协议成功!&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;添加协议失败!&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //判断是否实现了指定的协议</div><div class="line">    if(class_conformsToProtocol([Student class], p)) &#123;</div><div class="line">        NSLog(@&quot;遵循 %s协议&quot;, protocol_getName(p));</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;不遵循 %s协议&quot;, protocol_getName(p));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //获取类的协议列表</div><div class="line">    unsigned int outCount;</div><div class="line">    Protocol * __unsafe_unretained *protocolList = class_copyProtocolList([Student class], &amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        Protocol *protocol = protocolList[i];</div><div class="line">        const char *name = protocol_getName(protocol);</div><div class="line">        NSLog(@&quot;%s&quot;, name);</div><div class="line">    &#125;</div><div class="line">    free(protocolList);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意：可以使用runtime添加协议</strong></p>
<h4 id="6、版本号（Version"><a href="#6、版本号（Version" class="headerlink" title="6、版本号（Version)"></a>6、版本号（Version)</h4><p>版本的使用两个方法，获取版本和设置版本，请看代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)testVersion &#123;</div><div class="line">    int version = class_getVersion([Student class]);</div><div class="line">    NSLog(@&quot;%d&quot;, version);</div><div class="line">    class_setVersion([Student class], 100);</div><div class="line">    version = class_getVersion([Student class]);</div><div class="line">    NSLog(@&quot;%d&quot;, version);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="五、动态创建类和对象"><a href="#五、动态创建类和对象" class="headerlink" title="五、动态创建类和对象"></a>五、动态创建类和对象</h2><h4 id="1、动态创建类"><a href="#1、动态创建类" class="headerlink" title="1、动态创建类"></a>1、动态创建类</h4><p>涉及以下函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 创建一个新类和元类</div><div class="line">Class objc_allocateClassPair ( Class superclass, const char *name, size_t extraBytes );</div><div class="line"> </div><div class="line">// 销毁一个类及其相关联的类</div><div class="line">void objc_disposeClassPair ( Class cls );</div><div class="line"> </div><div class="line">// 在应用中注册由objc_allocateClassPair创建的类</div><div class="line">void objc_registerClassPair ( Class cls );</div></pre></td></tr></table></figure>
<p>注意：objc_disposeClassPair只能销毁由objc_allocateClassPair创建的类，当有实例存在或者它的子类存在时，调用这个函数会抛出异常。</p>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- (void)testCreateClass &#123;</div><div class="line">    Class cls = objc_allocateClassPair([Person class], &quot;Teacher&quot;, 0);</div><div class="line">    //添加成员变量，只能在运行时创建类添加，并且是在objc_allocateClassPair与objc_registerClassPair之间</div><div class="line">    if(class_addIvar(cls, &quot;_level&quot;, sizeof(id), log2(sizeof(id)), &quot;@\&quot;NSString\&quot;&quot;)) &#123;</div><div class="line">        NSLog(@&quot;添加_level成员变量成功&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;添加_level成员变量失败&quot;);</div><div class="line">    &#125;</div><div class="line">    objc_registerClassPair(cls);</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  当有实例存在不能销毁类，所以讲代码放到里面</div><div class="line">     */</div><div class="line">    &#123;</div><div class="line">        //创建对象</div><div class="line">        Person *p = [[cls alloc] init];</div><div class="line">        NSLog(@&quot;%@&quot;, [p class]);</div><div class="line">        [p printInfo];</div><div class="line">        //设置值</div><div class="line">        [p setValue:@&quot;高级讲师&quot; forKey:@&quot;level&quot;];</div><div class="line">        NSString *level = [p valueForKey:@&quot;level&quot;];</div><div class="line">        NSLog(@&quot;level: %@&quot;, level);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //销毁类，当有实例存在的时候是不能销毁类</div><div class="line">    objc_disposeClassPair(cls);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、实例操作函数"><a href="#六、实例操作函数" class="headerlink" title="六、实例操作函数"></a>六、实例操作函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 返回指定对象的一份拷贝</div><div class="line">id object_copy ( id obj, size_t size );</div><div class="line"> </div><div class="line">// 释放指定对象占用的内存</div><div class="line">id object_dispose ( id obj );</div><div class="line">// 修改类实例的实例变量的值</div><div class="line">Ivar object_setInstanceVariable ( id obj, const char *name, void *value );</div><div class="line"> </div><div class="line">// 获取对象实例变量的值</div><div class="line">Ivar object_getInstanceVariable ( id obj, const char *name, void **outValue );</div><div class="line"> </div><div class="line">// 返回指向给定对象分配的任何额外字节的指针</div><div class="line">void * object_getIndexedIvars ( id obj );</div><div class="line"> </div><div class="line">// 返回对象中实例变量的值</div><div class="line">id object_getIvar ( id obj, Ivar ivar );</div><div class="line"> </div><div class="line">// 设置对象中实例变量的值</div><div class="line">void object_setIvar ( id obj, Ivar ivar, id value );</div><div class="line">// 返回给定对象的类名</div><div class="line">const char * object_getClassName ( id obj );</div><div class="line"> </div><div class="line">// 返回对象的类</div><div class="line">Class object_getClass ( id obj );</div><div class="line"> </div><div class="line">// 设置对象的类</div><div class="line">Class object_setClass ( id obj, Class cls );</div></pre></td></tr></table></figure>
<p>实践代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)testInstance &#123;</div><div class="line">    Person *p = [Person new];</div><div class="line">    //object_copy在ARC下不能使用</div><div class="line">//    p = object_copy(p, class_getInstanceSize([Student class]));</div><div class="line">    //将p的isa指向Student</div><div class="line">    object_setClass(p, [Student class]);</div><div class="line">    [(Student *)p setName:@&quot;Jack&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是简单的将p这个对象的class设置为Student类，其实就是将p对象的isa指针指向Student类，KVO中的isa-swizzling其实就是这样干的。当调用setName:的方法的时候，就调用到了Student类中的setName。不过，这里调用Person类没有，而Student类有的方法会崩溃，报错Heap buffer overflow，就算是在非ARC下使用object_copy也是一样。</p>
<h2 id="七、获取类的定义"><a href="#七、获取类的定义" class="headerlink" title="七、获取类的定义"></a>七、获取类的定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 获取已注册的类定义的列表</div><div class="line">int objc_getClassList ( Class *buffer, int bufferCount );</div><div class="line"> </div><div class="line">// 创建并返回一个指向所有已注册类的指针列表</div><div class="line">Class * objc_copyClassList ( unsigned int *outCount );</div><div class="line"> </div><div class="line">// 返回指定类的类定义</div><div class="line">Class objc_lookUpClass ( const char *name );</div><div class="line">Class objc_getClass ( const char *name );</div><div class="line">Class objc_getRequiredClass ( const char *name );</div><div class="line"> </div><div class="line">// 返回指定类的元类</div><div class="line">Class objc_getMetaClass ( const char *name );</div></pre></td></tr></table></figure>
<p>objc_getClassList和objc_copyClassList都是获取所有已注册的类；而objc_lookUpClass获取指定的类，如果没有注册则返回nil；objc_getRequiredClass也是获取指定的类，不过如果这个类不存则，则会崩溃；objc_getMetaClass专门用来获取类的元类，每个类都有一个有效并且唯一的元类，如果这个类没有注册则返回nil。</p>
<p>代码实践：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (void)testGetClass &#123;</div><div class="line">    /**</div><div class="line">     *  第一种获取所有注册的类</div><div class="line">     */</div><div class="line">    Class *bufferClass;</div><div class="line">    int numClasses;</div><div class="line">    numClasses = objc_getClassList(NULL, 0);</div><div class="line">    if(numClasses &gt; 0) &#123;</div><div class="line">        bufferClass = (Class *)malloc(sizeof(Class)*numClasses);</div><div class="line">        numClasses = objc_getClassList(bufferClass, numClasses);</div><div class="line">        NSLog(@&quot;numer of classes: %d&quot;, numClasses);</div><div class="line">        for (int i = 0; i &lt; numClasses; i++) &#123;</div><div class="line">            Class cls = bufferClass[i];</div><div class="line">            NSLog(@&quot;class name: %s&quot;, class_getName(cls));</div><div class="line">        &#125;</div><div class="line">        free(bufferClass);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     *  第二种获取所有注册的类</div><div class="line">     */</div><div class="line">    unsigned int outCount;</div><div class="line">    Class *classLiset = objc_copyClassList(&amp;outCount);</div><div class="line">    for (unsigned int i = 0; i &lt; outCount; i++) &#123;</div><div class="line">        Class cls = classLiset[i];</div><div class="line">        NSLog(@&quot;class name: %s&quot;, class_getName(cls));</div><div class="line">    &#125;</div><div class="line">    free(classLiset);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种获取所有注册的类比第一种简单多了，建议使用第二种。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.jobbole.com/79566/" target="_blank" rel="external">Objective-C Runtime 运行时之一：类与对象</a>    </p>
<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100" target="_blank" rel="external">Type Encodings</a>    </p>
<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW6" target="_blank" rel="external">Property Type</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前在使用&lt;a href=&quot;https://github.com/elado/jastor&quot;&gt;jastor&lt;/a&gt;解析Json成model的时候里面涉及到了Runtime里面的知识，所以专门看了&lt;a href=&quot;http://blog.jobbole.com/79566/&quot;&gt;Objective-C Runtime 运行时之一到六&lt;/a&gt;这一系列的文章，整个Jastor也就懂了，现在非常出名的框架&lt;a href=&quot;https://github.com/Mantle/Mantle&quot;&gt;Mantle&lt;/a&gt;，&lt;a href=&quot;https://github.com/icanzilb/JSONModel&quot;&gt;JSONModel&lt;/a&gt;也都是差不多的原理。但是，一年之后的今天重新再看的时候，发现大概思路知道，但是具体的一些细节实现需要写的时候，却一时上不了手，所以重新看了&lt;a href=&quot;http://blog.jobbole.com/79566/&quot;&gt;Objective-C Runtime 运行时&lt;/a&gt;一系列，然后整理了一下，细节部分附上一些代码，方便以后查找。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="Runtime, Runtime总结, Runtime调用代码" scheme="http://www.liuchungui.com/tags/Runtime-Runtime%E6%80%BB%E7%BB%93-Runtime%E8%B0%83%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>BGSession一个基于NSUserDefaults实现的轻量级本地数据存储</title>
    <link href="http://www.liuchungui.com/2016/03/04/bgsession/"/>
    <id>http://www.liuchungui.com/2016/03/04/bgsession/</id>
    <published>2016-03-04T08:35:38.000Z</published>
    <updated>2016-10-03T09:37:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/liuchungui/BGSession" target="_blank" rel="external">BGSession</a>是一个基于NSUserDefaults实现的轻量级数据存储，你只需要简单的继承它，给它添加属性，设置属性的值，就能通过NSUserDefaults同步到本地。<br><a id="more"></a></p>
<h2 id="BGSession的由来"><a href="#BGSession的由来" class="headerlink" title="BGSession的由来"></a>BGSession的由来</h2><p>在昨天以前，对于一些轻量级数据，我一共使用过三种方案。</p>
<p>第一种，直接使用NSUserDefaults进行读取，代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写入</span></div><div class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] setValue:<span class="string">@"Jack"</span> forKey:<span class="string">@"UserDefaults_userName"</span>];</div><div class="line">[[<span class="built_in">NSUserDefaults</span> standardUserDefaults] synchronize];</div><div class="line"></div><div class="line"><span class="comment">//读取</span></div><div class="line"><span class="built_in">NSString</span> *userName = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] valueForKey:<span class="string">@"UserDefaults_userName"</span>];</div></pre></td></tr></table></figure>
<p>第二种，数据归档，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//使用归档写入</div><div class="line">NSString *userName = @&quot;Jack&quot;;</div><div class="line">NSString *filePath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject] stringByAppendingPathComponent:@&quot;UserNameFile&quot;];</div><div class="line">[NSKeyedArchiver archiveRootObject:userName toFile:filePath];</div><div class="line"></div><div class="line">//使用解归档读取</div><div class="line">userName = [NSKeyedUnarchiver unarchiveObjectWithFile:filePath];</div></pre></td></tr></table></figure>
<p>第三种，建立一个全局的单例，然后给定相应的属性值，存储时的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//写入</div><div class="line">   [BGGlobal sharedGlobal].userName = @&quot;Jack&quot;;</div><div class="line">   //写入文件，我使用的是将整个对象归档到一个文件当中</div><div class="line">   [BGGlobal writeToFile];</div><div class="line">   </div><div class="line">   //读取</div><div class="line">   NSString *userName = [BGGlobal sharedGlobal].userName;</div></pre></td></tr></table></figure>
<p> 比较上面三种方案：<br> 第一种我使用过之后就再也不怎么用了，有段时间几乎遗忘了它，因为使用它真的很麻烦，打出<code>[NSUserDefaults standardUserDefaults]</code>已经感觉很长了，后面还需要输入一个自己定义的key值，虽然可以全局定义常量，但是当常量够多的时候，也不能一时找到，而且设置值之后，如果要写入磁盘，还需要使用<code>[[NSUserDefaults standardUserDefaults] synchronize]</code>同步到本地；读取时和写入类似，需要一个key值。</p>
<p> 第二种，数据归档和第一种一样，存取时比较麻烦，而且因为归档的时候需要不停的读取文件，性能也不好。</p>
<p> 第三种，在全局单例实现<code>NSCoding</code>协议，只需要添加属性值，就可以使用点语法直接存取，存取非常的方便。存储本地时，和<code>[[NSUserDefaults standardUserDefaults] synchronize]</code>类似，使用<code>[BGGlobal writeToFile]</code>全局归档写入文件。</p>
<p> 比较这三种方案，我选择了第三种。第二种，直接舍弃；第一种虽然在性能比第二种更优，但是使用不是很方便，况且我们这是存储轻量级数据，性能差异根本看不出来什么。</p>
<p> 但，在使用过程中，我们遇到了一些问题，就是<code>[BGGlobal writeToFile]</code>会忘记写，从而造成了bug。而且，在整个工程项目中<code>[BGGlobal writeToFile]</code>出现的次数特别的多，这一步是否可以优化掉？</p>
<p> 后来，一致商议，我们项目中将全局单例的global中归档写入文件的方式替换成NSUserDefaults的存储方式，然后在内部实现了同步本地的操作。这样只要我们在外面使用设置新的值时，它会自动同步到本地，而且性能方面更佳。</p>
<p> 但是，在使用过一段时间之后，我发现并不是很方便，因为在使用的时候，<strong>每添加一个字段都需要做如下两步</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//1、定义一个常量来作为NSUserDefaults的key</div><div class="line">static NSString *const kSessionUserName = @&quot;kSessionUserName&quot;;</div><div class="line">//2、在全局单例内部实现getter和setter方法</div><div class="line">- (void)setUserName:(NSString *)userName&#123;</div><div class="line">   [self setValue:userName forKey:kSessionUserName];</div><div class="line">&#125;</div><div class="line">- (NSString *)userName&#123;</div><div class="line">   return [self getValueForKey:kSessionUserName];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这些步骤我们是否可以完全省略呢？    </p>
<p> 在一次我自己做项目的时候，我使用全局单例舍弃NSUserDefaults进行存储，仍然使用的是归档的形式，而且那个全局单例继承的是<a href="https://github.com/elado/jastor" target="_blank" rel="external">jastor</a>，它内部自己实现了归档协议，我只需要每次使用的时候，多添加<code>[BGGlobal writeToFile]</code>同步到本地就行了，比前面使用NSUserDefaults方便很多。</p>
<p> 但是，我一直都认为有更好的实现方案，终于在看runtime和KVO东西的时候想到了一种方案。于是，立马回家写了一个实现了<a href="https://github.com/liuchungui/BGSession" target="_blank" rel="external">BGSession</a>。</p>
<h2 id="BGSession实现原理"><a href="#BGSession实现原理" class="headerlink" title="BGSession实现原理"></a>BGSession实现原理</h2><p> BGSession是一个全局单例，主要采用的是KVC/KVO和Runtime进行实现的。使用BGSession作为轻量级数据存储时，只需要继承BGSession，然后在BGSession的派生类添加相关的属性。当给这些属性设置新的值后，BGSession会监听到属性值的变化，然后使用KVC自动将它同步到NSUserDefaults。这样，存取时，我们就可以当做使用单例一样使用，简单方便。</p>
<h2 id="Github地址"><a href="#Github地址" class="headerlink" title="Github地址"></a>Github地址</h2><p><a href="https://github.com/liuchungui/BGSession" target="_blank" rel="external">https://github.com/liuchungui/BGSession</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/liuchungui/BGSession&quot;&gt;BGSession&lt;/a&gt;是一个基于NSUserDefaults实现的轻量级数据存储，你只需要简单的继承它，给它添加属性，设置属性的值，就能通过NSUserDefaults同步到本地。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="BGSession" scheme="http://www.liuchungui.com/tags/BGSession/"/>
    
      <category term="NSUserDefaults" scheme="http://www.liuchungui.com/tags/NSUserDefaults/"/>
    
      <category term="轻量级数据存储" scheme="http://www.liuchungui.com/tags/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>2015年总结</title>
    <link href="http://www.liuchungui.com/2016/01/01/2015nian-zong-jie/"/>
    <id>http://www.liuchungui.com/2016/01/01/2015nian-zong-jie/</id>
    <published>2015-12-31T17:22:29.000Z</published>
    <updated>2016-08-06T05:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在已经2016年1点了，去年这个时候看到别人都纷纷写着一年的总结，那个时候顿生崇拜。今年，我也来个简短的总结吧！</p>
<a id="more"></a>
<p>2015这一年，换了一家公司，而就是从这个时候，我感觉我整个写代码的思想发生了不小的变化，事情就从这里开始吧。</p>
<p>五月份的时候，跟着领导一起来到了一家新的公司。新的公司团队正在建立，由于领导的器重，我参与了项目重构前的框架设计。</p>
<p>在这其中，我最主要的是重构网络框架这一块。网络框架是基于AF第二次开发的，并且最初版本是我们在上一个公司一起讨论，然后由我们一个同事李鹏总理设计实现的。而重构网络框架这一块，经过多次讨论之后，我们的想法其实可以归纳成两点：第一个是移植性，不需像以前一样，每做个项目都需要修改网络框架内部的底层，而我们总体框架也是非常强调移植性；第二个就是业务层使用上体验更好，最初版本是发送一个请求调回一个成功和一个失败的block，成功的block里面只返回了一个request，取数据的时候需要从当前这个request当中获取，这样具有迷惑性；而且我们不但要在processResultWithDic:这个处理数据的方法当中判断是否是业务层成功，还需要在成功调回的block当中进行判断，这样相当于进行了两次判断。</p>
<h5 id="针对这两点，我重新设计了一下。"><a href="#针对这两点，我重新设计了一下。" class="headerlink" title="针对这两点，我重新设计了一下。"></a>针对这两点，我重新设计了一下。</h5><ul>
<li>解决移植性，我在原来的基础上增加了一个NetworkHelper类，这个类是一个单例，它的作用主要是提供BaseURL、成功的返回码、取返回码的key值、请求的缓存码、处理请求参数、处理请求头、处理返回的数据，而且上面如果还满足不了，这个Helper还可以返回AF的requestSerializer和responseSerializer。而在项目当中，只需要继承这个类，实现里面的方法就可以配置整个网络框架，这就解决了移植性的问题。</li>
<li>使业务层使用体验更好，为了做到这个，我做了两点。一是在原来的基础上增加一个block，那就是一共三个分别是业务成功、业务失败、网络失败；二是每个block调回，不但调回request，而且返回response或者NSError。</li>
</ul>
<p>网络这样重构之后，我们放到了一个整体的工程中PublicProject，项目引入的时候导入整个工程，引用其中静态包文件就行了。这个框架，在公司当中我们多个项目都在使用，建立项目时，给我们使用起来带来不小的便利。后来，我们研究了一下私有的CocoaPods，使用起来更方便，后期新项目我们可以使用这个来进行管理，具体使用可以参照我的另外一篇博客<a href="http://www.liuchungui.com/blog/2015/10/19/cocoapodschuang-jian-si-you-pods/">CocoaPods创建私有Pods</a>。之后，参照了<a href="http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html" target="_blank" rel="external">iOS应用架构谈 网络层设计方案</a>的思想，重新架构了下，自己重写了一遍网络框架<a href="https://github.com/liuchungui/BGNetwork" target="_blank" rel="external">BGNetwork</a>，放在了github上面。相比以前的网络框架，主要增加了缓存机制，扩展了可配置性的功能。之后，也许是用惯了block回调的方式，反而觉得block回调更好，又在此基础上重新开了一个<a href="https://github.com/liuchungui/BGNetwork/tree/dev" target="_blank" rel="external">dev分支</a>。参照<a href="https://github.com/yuantiku/YTKNetwork" target="_blank" rel="external">YTKNetwork</a>，在dev分支上更是添加了批量处理请求、上传请求和下载请求。后来陆陆续续整了下<a href="https://travis-ci.org/liuchungui/BGNetwork" target="_blank" rel="external">travis-ci</a>和<a href="https://codecov.io/github/liuchungui/BGNetwork" target="_blank" rel="external">codecov</a>。</p>
<p>整个网络封装之后，收获还是挺多的。不过，特别遗憾的是没有好好的写使用教程和宣传下，带动更多的人参与进来，star少的可怜。</p>
<p>2015年还有个重要的事情就是使用了git，真正参与进了github，真正的为github的世界向往和激动。在之前，git对我来说也就是和svn一样的工具，github就是一个下载开源代码的网站。而在同学说git怎么怎么好的时候，我终于使用了git，立马就感觉使用git原来这么爽。后来，进入github在某个项目里面问了个问题，发现有很多很多人来回答，大家就像一个大家庭一样，为整个开源项目发展的更好而努力。所以，我有什么想法的时候，也会自己创建项目放在上面。</p>
<p>2015年，还有一件事情不得不提，就是和我一个室友在一起做了一个项目，做得项目是一个为群众提供法律服务的平台，做了客户端和律师端。当时，我还专门针对一个网站用php写了一个抓取数据的代码，最后花了将近一个月的时间抓取了七百多万条数据。他更是写了一段代码分析出其中的案件类型、律师名、律师下所打的官司等有价值的数据，还做了一个小网站。后来，我们做APP，我写服务器接口，写了几个之后，他参照着写了许多。iOS客户端有两个，是我和另外一个同学一块写的。当时我这个室友特别有激情，专门花了三天的功夫做了一个特别棒的PPT，在他导师的牵头下，邀请了法律界的律师、法院的人和北大的教授在国家会议中心做了一次演讲。本来是打算激情四射的准备搞起，融资创建公司，最后专业人士提出了各种各样的问题，最后没有搞起来。</p>
<p>不过，这也成为了我们一个重要的经验。对我来说，我经历了抓取数据，专门实践了一番正则表达式，而且我当时是自己整了一个简单的php框架，然后就写起了服务器端的接口。</p>
<p>后来，他们公司要做一个项目，服务器接口是由我一个人写的，iOS客户端是由我和另外一个同学写的。这一次，我使用了在<a href="https://github.com/bcit-ci/CodeIgniter" target="_blank" rel="external">CI</a>基础封装的Resetful API框架<a href="https://github.com/chriskacerguis/codeigniter-restserver" target="_blank" rel="external">codeigniter-restserver</a>，接口文档专门由<a href="https://tower.im/" target="_blank" rel="external">Tower</a>管理。</p>
<p>总结写的有点啰嗦，大概就一些这样的事情，也算是对2015年的记录吧！</p>
<p>2016年计划：<br>其实想过各种各样的计划，想做的事情也特别特别多，但是说多了，肯定又实现不了，还是来点实际的吧！</p>
<ol>
<li>2016年要学习一门新的技术，暂时选定的是H5。</li>
<li>github上好好维护自己的项目，做出一个有点名气的项目来。</li>
<li>做一个自己的网站和App，越炫酷越好。</li>
<li>好好维护自己的博客，每个月至少一篇博客。</li>
<li>带着女朋友好好去旅游一次</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在已经2016年1点了，去年这个时候看到别人都纷纷写着一年的总结，那个时候顿生崇拜。今年，我也来个简短的总结吧！&lt;/p&gt;
    
    </summary>
    
      <category term="年度总结" scheme="http://www.liuchungui.com/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Gitbook安装使用</title>
    <link href="http://www.liuchungui.com/2015/12/26/gitbookan-zhuang-shi-yong/"/>
    <id>http://www.liuchungui.com/2015/12/26/gitbookan-zhuang-shi-yong/</id>
    <published>2015-12-26T09:15:07.000Z</published>
    <updated>2016-08-06T05:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书。</p>
</blockquote>
<p>在这篇博客中，记录了一下gitbook的安装使用，更详细的使用请查看下面内容：<br>gitbook详细使用文档：<a href="help.gitbook.com">help.gitbook.com</a><br>gitbook官网:<a href="https://www.gitbook.com" target="_blank" rel="external">https://www.gitbook.com</a><br>github地址:<a href="https://github.com/GitbookIO/gitbook" target="_blank" rel="external">https://github.com/GitbookIO/gitbook</a></p>
<h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>首先到<a href="http://nodejs.cn/" target="_blank" rel="external">nodejs</a>下载，安装Node.js的包管理器npm。<br>然后，通过<code>sudo npm install -g gitbook-cli</code>命令安装gitbook<br><a id="more"></a></p>
<h3 id="2、初始化gitbook"><a href="#2、初始化gitbook" class="headerlink" title="2、初始化gitbook"></a>2、初始化gitbook</h3><p>创建一个文件夹，然后初始化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir test</div><div class="line">gitbook init</div></pre></td></tr></table></figure>
<p>初始化之后会有两个文件README.md和SUMMARY.md,README.md 是作品的介绍，SUMMARY.md 是作品的目录结构，里面要包含一个章节标题和文件索引的列表。</p>
<p>下面是一个SUMMARY.md文件的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Summary</div><div class="line"></div><div class="line">This is the summary of my book.</div><div class="line"></div><div class="line">* [section 1](section1/README.md)</div><div class="line">    * [example 1](section1/example1.md)</div><div class="line">    * [example 2](section1/example2.md)</div><div class="line">* [section 2](section2/README.md)</div><div class="line">    * [example 1](section2/example1.md)</div></pre></td></tr></table></figure>
<p>在这里，我们可以先创建对应的文件夹，然后在里面编辑对应的内容，之后更新SUMMARY.md这个目录文件；如果在编辑之前我们已经确定好了内容标题和目录，也可以先编辑SUMMARY.md文件，然后通过<code>gitbook init</code>来初始化一遍，它会自动创建文件目录和对应的md文件。</p>
<h3 id="3、编辑内容，并查看"><a href="#3、编辑内容，并查看" class="headerlink" title="3、编辑内容，并查看"></a>3、编辑内容，并查看</h3><p>初始化书以后，我们就可以对我们的内容进行编辑了。<br>例如：<br>我要将本篇博客放入目录为gitbook下，首先在test目录建立一个gitbook文件夹，然后建立一个<code>gitbook安装使用.md</code>文件，目录如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">|____gitbook</div><div class="line">| |____gitbook安装使用.md</div><div class="line">|____README.md</div><div class="line">|____section1</div><div class="line">| |____example1.md</div><div class="line">| |____example2.md</div><div class="line">| |____README.md</div><div class="line">| |____test.md</div><div class="line">|____section2</div><div class="line">| |____example1.md</div><div class="line">| |____README.md</div><div class="line">|____SUMMARY.md</div></pre></td></tr></table></figure>
<p>之后，我们像写博客一样，使用markdown语言编辑<code>gitbook安装使用.md</code>中的内容。<br>编辑完之后，需要将<code>gitbook安装使用.md</code>这篇文章放入SUMMARY.md目录中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># Summary</div><div class="line">* [gitbook]</div><div class="line">    * [gitbook安装使用](gitbook/gitbook安装使用.md)</div><div class="line">* [section 1](section1/README.md)</div><div class="line">    * [example 1](section1/example1.md)</div><div class="line">    * [example 2](section1/example2.md)</div><div class="line">* [section 2](section2/README.md)</div></pre></td></tr></table></figure>
<p>这样，就加入了<code>gitbook安装使用.md</code>这篇文章。之后，可以使用下面命令启动一个本地web服务，来预览本地的内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gitbook serve</div></pre></td></tr></table></figure>
<p>这个时候，简洁、优雅的界面就出来了。<br><img src="http://ww1.sinaimg.cn/large/7746cd07gw1eynt17tm6yj20zh0ey0ua.jpg" alt=""></p>
<p>注意：</p>
<ul>
<li>在查看的时候没有看到刚刚加入的文章，查看一下<code>SUMMARY.md</code>是否添加</li>
<li>在预览的时候能看到文章，但是点击不起作用，查看是否目录正确 </li>
</ul>
<p><strong>如果想将gitbook放到web服务器作为网站浏览，先使用gitbook build命令，之后会生成静态网页到_book目录下，只要将_book目录copy到web服务器上就行了。</strong></p>
<h3 id="4、发布电子书gitbook官网"><a href="#4、发布电子书gitbook官网" class="headerlink" title="4、发布电子书gitbook官网"></a>4、发布电子书gitbook官网</h3><p>到<a href="https://www.gitbook.com/" target="_blank" rel="external">gitbook官网</a>创建一个账号，创建一本<code>test</code>电子书，创建电子书的时候，gitbook会创建git仓库<a href="https://git.gitbook.liuchungui/test.git。" target="_blank" rel="external">https://git.gitbook.liuchungui/test.git。</a></p>
<p>然后下载<a href="https://www.gitbook.com/editor" target="_blank" rel="external">gitbook editor</a>，登陆账号，将电子书clone一份下来，将前面新建电子书将前面编辑的内容拖到这个电子书下，然后同步到官网就可以看到内容了，例如我的<a href="https://liuchungui.gitbooks.io/test/content/" target="_blank" rel="external">test</a>。</p>
<p>上面的操作我们也可以用命令行进行操作。先在官网建立一个电子书，然后clone下来，之后编写我们的电子书内容和目录，然后使用<a href="http://www.liuchungui.com/blog/2015/10/23/gitzong-jie/">git命令</a>将内容Push到git仓库就行了。</p>
<h3 id="5、导出电子书"><a href="#5、导出电子书" class="headerlink" title="5、导出电子书"></a>5、导出电子书</h3><p>其实，上面建立的<code>test</code>已经在官网上可以进行电子书下载了，有三种格式<code>PDF</code>、<code>EPUB</code>、<code>MOBI</code>。<br>而在本地，使用下面命令导出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pdf [options] [source_dir] 构建 pdf 格式的电子书</div><div class="line">epub [options] [source_dir] 构建 ePub 格式的电子书</div><div class="line">mobi [options] [source_dir] 构建 mobi 格式的电子书</div></pre></td></tr></table></figure>
<p>如果导出失败，需要我们下载<a href="http://calibre-ebook.com/" target="_blank" rel="external">Calibre</a>进行电子书转换。</p>
<h3 id="gitbook的相关命令"><a href="#gitbook的相关命令" class="headerlink" title="gitbook的相关命令"></a>gitbook的相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">build [options] [source_dir] 根据文档目录构建书籍</div><div class="line">serve [options] [source_dir] 构建并且提供书籍的 web 托管</div><div class="line">install [options] [source_dir] 安装 GitBook 插件</div><div class="line">pdf [options] [source_dir] 构建 pdf 格式的电子书</div><div class="line">epub [options] [source_dir] 构建 ePub 格式的电子书</div><div class="line">mobi [options] [source_dir] 构建 mobi 格式的电子书</div><div class="line">init [source_dir]      根据 SUMARRY.md 文件的内容生成相应的目录和文件</div><div class="line">publish [source_dir]   如果已绑定 GitBook.io，该命令可以直接发布书籍</div><div class="line"></div><div class="line">-h, --help     输出命令的使用说明</div><div class="line">-V, --version  输出程序的版本号</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>gitbook操作其实就分为两个方面内容，一个是建立git仓库对内容进行管理，另外一个就是使用markdown对内容进行编辑，然后使用SUMARRY.md生成书的目录。<br>而gitbook这么优雅大方的页面，我们喜欢的话，完全可以将它做成我们的技术博客。而它还具有简单标题检索功能，我甚至想过将它做成一个api接口管理页面。</p>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="http://zhaoda.net/2015/11/09/gitbook-plugins/" target="_blank" rel="external">Gitbook 的使用和常用插件</a><br><a href="http://liaoer.net/2015/04/30/Mac%E4%B8%8BGitBook%E5%88%B6%E4%BD%9C%E7%94%B5%E5%AD%90%E4%B9%A6/" target="_blank" rel="external">Mac下GitBook制作电子书</a><br><a href="http://blog.windrunner.info/app/gitbook-tutorial.html" target="_blank" rel="external">使用GitBook</a>    </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这篇博客中，记录了一下gitbook的安装使用，更详细的使用请查看下面内容：&lt;br&gt;gitbook详细使用文档：&lt;a href=&quot;help.gitbook.com&quot;&gt;help.gitbook.com&lt;/a&gt;&lt;br&gt;gitbook官网:&lt;a href=&quot;https://www.gitbook.com&quot;&gt;https://www.gitbook.com&lt;/a&gt;&lt;br&gt;github地址:&lt;a href=&quot;https://github.com/GitbookIO/gitbook&quot;&gt;https://github.com/GitbookIO/gitbook&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、安装&quot;&gt;&lt;a href=&quot;#1、安装&quot; class=&quot;headerlink&quot; title=&quot;1、安装&quot;&gt;&lt;/a&gt;1、安装&lt;/h3&gt;&lt;p&gt;首先到&lt;a href=&quot;http://nodejs.cn/&quot;&gt;nodejs&lt;/a&gt;下载，安装Node.js的包管理器npm。&lt;br&gt;然后，通过&lt;code&gt;sudo npm install -g gitbook-cli&lt;/code&gt;命令安装gitbook&lt;br&gt;
    
    </summary>
    
      <category term="Gitbook" scheme="http://www.liuchungui.com/categories/Gitbook/"/>
    
    
      <category term="Gitbook" scheme="http://www.liuchungui.com/tags/Gitbook/"/>
    
      <category term="Gitbook安装使用" scheme="http://www.liuchungui.com/tags/Gitbook%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>UICollectionView动画</title>
    <link href="http://www.liuchungui.com/2015/11/24/uicollectionviewdong-hua/"/>
    <id>http://www.liuchungui.com/2015/11/24/uicollectionviewdong-hua/</id>
    <published>2015-11-23T16:00:26.000Z</published>
    <updated>2016-08-06T05:53:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简单使用"><a href="#一、简单使用" class="headerlink" title="一、简单使用"></a>一、简单使用</h2><p>UICollectionView更新事件有四种分别是<code>插入</code>、<code>删除</code>、<code>刷新</code>、<code>移动</code>，<br>api使用起来和UITableView类似，具体可以自己在代码中找，如果需要执行多个更新事件，可以放到performBatchUpdates中的updates闭包中作为一组动画，然后全部执行完之后通过completion调回。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">collectionView.performBatchUpdates(&#123; () -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">            collectionView.insertItemsAtIndexPaths(insertIndexPaths)</div><div class="line">            collectionView.moveItemAtIndexPath(currentIndexPath, toIndexPath: toIndexPath)</div><div class="line">            &#125;, completion: &#123; (isFinish) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
<h2 id="二、UICollectionView动画"><a href="#二、UICollectionView动画" class="headerlink" title="二、UICollectionView动画"></a>二、UICollectionView动画</h2><p>四种不同的更新事件，系统默认会带有动画，不过是比较简单的。我们可以自定义layout或者继承flowLayout，在内部实现我们自己想要的动画。下面，我们来说说动画的流程，以及系统默认的四种动画内部是如何的，并且通过代码来修改达到自己想要的动画。<br><a id="more"></a></p>
<h4 id="CollectionView动画流程"><a href="#CollectionView动画流程" class="headerlink" title="CollectionView动画流程"></a>CollectionView动画流程</h4><p>当我们在外部调用CollectionView相关的api去<code>插入</code>、<code>删除</code>、<code>刷新</code>、<code>移动</code>cell时，首先会通过layout中的<code>layoutAttributesForElementsInRect</code>方法获取更新以后的布局信息，然后通过<code>prepareForCollectionViewUpdates</code>方法来通知layout哪些内容将会发生改变。之后，通过调用layout中的<code>initialLayoutAttributesForAppearingItemAtIndexPath</code>、<code>finalLayoutAttributesForDisappearingItemAtIndexPath</code>方法获取对应indexPath的<code>刚出现时最初布局属性</code>和<code>消失时最终布局属性</code>。而后形成两个动画过程分别是<code>刚出现时最初布局-&gt;更新后布局的出现动画</code>和<code>更新前布局-&gt;消失时最终布局的消失动画</code>，而collectionView中’插入’、’删除’、’刷新’和’移动’动画都是基于这两个动画组合形成的。最后，等这一系列动画执行完之后，最后会调用layout中<code>finalizeCollectionViewUpdates</code>方法，这个方法仍然放在动画块中，我们可以在这个方法当中添加额外的动画。</p>
<p>从上面流程可以看出，在更新的时候，由于<code>更新前布局</code>和<code>更新后布局</code>都是在更新动画前已经设置好了，我们不能去胡乱更改布局，所以我们只能通过<code>initialLayoutAttributesForAppearingItemAtIndexPath</code>和<code>finalLayoutAttributesForDisappearingItemAtIndexPath</code>两个方法来更改<code>刚出现时最初布局属性</code>和<code>消失时最终布局属性</code>，即我们只能更改<code>出现动画的起点</code>和<code>消失动画的终点</code>。</p>
<p>为了更方面的下面说明，引申出两个名词：</p>
<ul>
<li>出现动画：initialLayoutAttributesForAppearingItemAtIndexPath获取对应indexPath的<code>刚出现时最初布局</code>-&gt;更新后布局变化过程</li>
<li>消失动画：更新之前的布局-&gt;finalLayoutAttributesForDisappearingItemAtIndexPath方法获取对应indexPath的<code>消失时最终布局</code>的变化过程</li>
</ul>
<p>注意，出现动画和消失动画针对的是一个cell单元。</p>
<p>下面我们通过代码示例来实现插入、删除、刷新、移动动画。<br>代码示例工程：<a href="https://github.com/liuchungui/UICollectionViewAnimationDemo" target="_blank" rel="external">UICollectionViewAnimationDemo</a></p>
<p>在这个Demo工程中有一个<code>BGSelectImageLayout</code>，它是CollectionView的layout，它的布局方式是水平横向滑动，并且只有一组，每一个普通的cell大小都是<code>itemSize</code>，而选中的cell则宽度是<code>itemSize*2</code>。</p>
<h4 id="插入动画："><a href="#插入动画：" class="headerlink" title="插入动画："></a>插入动画：</h4><p>在当前的布局下，每插入一个cell时，都会影响它后面所有cell布局变化。<br>例如CollectionView有一行三个cell，为了更好的说明将indexPath是(0,0),(0,1),(0,2)标记为0，1，2。当在第1个位置插入一个cell时，如下图</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1eyba1ih4nvj20re0fs75l.jpg" alt=""></p>
<p>而在这个插入过程中，视觉上会有三个动画过程。new插入到位置1为<code>过程1</code>，1移动一个单位到2为<code>过程2</code>，2移动一个单位到一个新的位置3为<code>过程3</code>，如下图：</p>
<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1eyba58t45gj20yc0g6760.jpg" alt=""></p>
<p>虽然视觉上只有三个动画过程，但其实有五个动画。其中，过程1是1位置的<code>出现动画</code>；过程2是1位置的<code>消失动画</code>和2位置的<code>出现动画</code>重合而成；过程3是2位置的<code>消失动画</code>和3位置的<code>出现动画</code>。</p>
<p>其中值得注意的三点，一是除了最后一个，前面的cell消失动画与它后面cell出现动画重合，这样看起来就是当前位置的cell向后平移了一个位置；二是最后一个cell只有出现动画，没有消失动画，整个过程<code>出现动画会多一个</code>；三是插入的cell的出现动画是默认是alpha从0到1的淡入效果。</p>
<p>在代码中，想获得一个插入的cell从小变大的出现效果和其它cell整体向后移动一个位置的动画效果，可以如下实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    override func initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">        let attributes = super.initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">        if self.insertIndexPathArr.contains(itemIndexPath) &#123;</div><div class="line">            attributes?.transform = CGAffineTransformMakeScale(0.0, 0.0)</div><div class="line">            attributes?.alpha = 0</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            //设置为前一个item的frame</div><div class="line">            attributes?.frame = self.currentFrameWithIndexPath(NSIndexPath(forRow: itemIndexPath.row-1, inSection: itemIndexPath.section))</div><div class="line">        &#125;</div><div class="line">        return attributes</div><div class="line">&#125;</div><div class="line">override func finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">    	 let attributes = super.finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">         attributes?.frame = self.currentFrameWithIndexPath(NSIndexPath(forRow: itemIndexPath.row+1, inSection: itemIndexPath.section))</div><div class="line">         return attributes</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里为了看到效果，我在模拟器的Debug模式下勾选了Slow Animations调慢了动画:<br><img src="http://ww3.sinaimg.cn/large/7746cd07jw1eyaa2ommv4g208j0frab5.gif" alt=""></p>
<h4 id="删除动画："><a href="#删除动画：" class="headerlink" title="删除动画："></a>删除动画：</h4><p>在上面的位置1插入一个cell后，cell的数量变成了4个，分别是0、1、2、3，它们对应的indexPath为(0,0)、(0,1)、(0,2)、(0,3)。当要删除位置1的cell时，与插入类似，系统默认也会有三个动画过程，如下图：</p>
<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1eybbqnkm4cj20xo0dita5.jpg" alt=""></p>
<p>其中，动画过程1是在位置1执行一个消失动画；过程2是位置1的出现动画和位置2的消失动画重合而成；过程3是位置2的出现动画和位置3的消失动画重合而成。     </p>
<p><strong>需要注意的是</strong>，一是与插入不同，重合后的效果是cell向前平移了一个位置；二是最后一个位置只有消失动画没有出现动画，整个过程消失动画数会多一个；三是删除的cell的出现动画默认是从1到0的淡出效果。</p>
<p>在代码中，实现一个与插入相对应的动画，即删除的cell从大到小的淡出效果和其它cell整体向前移动一个位置的效果，可以如下实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">override func initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">    let attributes = super.initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">    attributes?.frame = self.currentFrameWithIndexPath(NSIndexPath(forRow: itemIndexPath.row+1, inSection: itemIndexPath.section))</div><div class="line">    return attributes</div><div class="line">&#125;</div><div class="line">override func finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">        let attributes = super.finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">    if self.deleteIndexPathArr.contains(itemIndexPath) &#123;</div><div class="line">        //这里写成缩放成(0，0)直接就不见了</div><div class="line">        attributes?.transform = CGAffineTransformMakeScale(0.1, 0.1)</div><div class="line">        attributes?.alpha = 0.0</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        attributes?.frame = self.currentFrameWithIndexPath(NSIndexPath(forRow: itemIndexPath.row-1, inSection: itemIndexPath.section))</div><div class="line">    &#125;</div><div class="line">    return attributes</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1eyaqorep4rg208j0g9wgw.gif" alt=""></p>
<h4 id="刷新动画："><a href="#刷新动画：" class="headerlink" title="刷新动画："></a>刷新动画：</h4><p>在官方的解释中，刷新是先删除然后插入。其实它就是先执行所有cell的消失动画；在此之后，它又会执行所有cell的出现动画。<br>在系统当中，需要注意的是默认出现动画是一个alpha从0到1的淡入效果，而消失动画则是alpha从1到0的淡入效果；与插入动画和删除动画不同的是，刷新动画会成对存在，即消失动画与出现动画数量相等。</p>
<p>在这里，实现一个点击某个cell时，当前选中的cell变大的效果，而它旁边的cell被推开的动画效果。在这里我不需要淡入和淡出效果，所以修改了消失时alpha为1.0，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">override func initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">    let attributes = super.initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">    attributes?.frame = self.lastFrameWithIndexPath(itemIndexPath)</div><div class="line">    return attributes</div><div class="line">&#125;</div><div class="line">override func finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">    let attributes = super.finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">    //注意，这里alpha设置为不透明，系统默认返回是0，即一个淡出的效果</div><div class="line">    attributes?.alpha = 1.0</div><div class="line">    attributes?.frame = self.currentFrameWithIndexPath(itemIndexPath)</div><div class="line">    return attributes</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1eyb04xye32g208j0g9755.gif" alt=""></p>
<h4 id="移动动画："><a href="#移动动画：" class="headerlink" title="移动动画："></a>移动动画：</h4><p>移动一个cell到另一个位置时，会引起当前cell到目标位置之间所有cell布局发生变化，从而形成一系列的动画。在这个动画过程中，每个indexPath都会有一个出现动画和一个消失动画。</p>
<p>例如，在系统默认情况下，0位置cell移动到2位置cell的时候，我们会看到三个动画过程，如下图：</p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07jw1eyazemzgkzj20qa0bqt9u.jpg" alt=""></p>
<p>但是，其实它内部执行了六个动画，只是其中两两之间动画重合了而已。其中动画过程1是1位置的消失动画和0位置出现动画重合；动画过程2是0位置的消失动画和2位置的出现动画重合；动画过程3是2位置的消失动画和1位置的出现动画重合。</p>
<p><strong>其中值得注意的有两点：</strong><br>1、消失动画和出现动画数量相等<br>2、动画的重合与刷新动画不同，与插入和删除动画类似，它们不同位置之间的消失动画与出现动画重合。</p>
<p>在这里，实现一个移动cell时旋转180°到目标位置效果，实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> override func initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">    let attributes = super.initialLayoutAttributesForAppearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">    if itemIndexPath == self.afterMoveIndexPath &#123;</div><div class="line">        //afterMoveIndexPath的消失动画和beforeMoveIndexPath的出现动画重合</div><div class="line">        //init是设置起点，而final设置终点，理论是不重合的</div><div class="line">        attributes?.transform3D = CATransform3DMakeRotation(-1*CGFloat(M_PI), 0, 0, -1)</div><div class="line">    &#125;</div><div class="line">    return attributes</div><div class="line">&#125;</div><div class="line">override func finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath: NSIndexPath) -&gt; UICollectionViewLayoutAttributes? &#123;</div><div class="line">    let attributes = super.finalLayoutAttributesForDisappearingItemAtIndexPath(itemIndexPath)?.copy() as? UICollectionViewLayoutAttributes</div><div class="line">    if self.beforeMoveIndexPath == itemIndexPath &#123;</div><div class="line">        //afterMoveIndexPath的消失动画和beforeMoveIndexPath的出现动画重合，设置他们旋转的角度一样，方向相反</div><div class="line">        attributes?.transform3D = CATransform3DMakeRotation(-1*CGFloat(M_PI), 0, 0, -1)</div><div class="line">    &#125;</div><div class="line">    return attributes</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ww1.sinaimg.cn/large/7746cd07jw1eyb0375fz7g208j0g9go4.gif" alt=""></p>
<p>上面都是纯颜色，在示例工程<a href="https://github.com/liuchungui/UICollectionViewAnimationDemo" target="_blank" rel="external">UICollectionViewAnimationDemo</a>中，我还添加了一个图片的<code>BGSimpleImageSelectCollectionViewDemo2</code>。布局基本上相同，唯一不同的是图片因为上下不可以倒转，没办法做到统一的旋转180°。</p>
<p>效果如下：</p>
<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1eybewu3qyxg208j0g9k2r.gif" alt=""></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>1、CollectionView更新时，执行动画的时候会访问layout中哪些api，整个流程是如何形成的<br>2、修改CollectionView动画就是修改出现动画的起点和消失动画的终点，即layout当中的initialLayoutAttributesForAppearingItemAtIndexPath和finalLayoutAttributesForDisappearingItemAtIndexPath方法进行修改。<br>3、插入、删除、刷新、移动内部执行哪些动画，我们如何去修改。    </p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://objccn.io/issue-12-5/" target="_blank" rel="external">Collection View 动画</a>   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简单使用&quot;&gt;&lt;a href=&quot;#一、简单使用&quot; class=&quot;headerlink&quot; title=&quot;一、简单使用&quot;&gt;&lt;/a&gt;一、简单使用&lt;/h2&gt;&lt;p&gt;UICollectionView更新事件有四种分别是&lt;code&gt;插入&lt;/code&gt;、&lt;code&gt;删除&lt;/code&gt;、&lt;code&gt;刷新&lt;/code&gt;、&lt;code&gt;移动&lt;/code&gt;，&lt;br&gt;api使用起来和UITableView类似，具体可以自己在代码中找，如果需要执行多个更新事件，可以放到performBatchUpdates中的updates闭包中作为一组动画，然后全部执行完之后通过completion调回。&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;collectionView.performBatchUpdates(&amp;#123; () -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            collectionView.insertItemsAtIndexPaths(insertIndexPaths)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            collectionView.moveItemAtIndexPath(currentIndexPath, toIndexPath: toIndexPath)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;, completion: &amp;#123; (isFinish) -&amp;gt; &lt;span class=&quot;type&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二、UICollectionView动画&quot;&gt;&lt;a href=&quot;#二、UICollectionView动画&quot; class=&quot;headerlink&quot; title=&quot;二、UICollectionView动画&quot;&gt;&lt;/a&gt;二、UICollectionView动画&lt;/h2&gt;&lt;p&gt;四种不同的更新事件，系统默认会带有动画，不过是比较简单的。我们可以自定义layout或者继承flowLayout，在内部实现我们自己想要的动画。下面，我们来说说动画的流程，以及系统默认的四种动画内部是如何的，并且通过代码来修改达到自己想要的动画。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="UICollectionView" scheme="http://www.liuchungui.com/tags/UICollectionView/"/>
    
      <category term="UICollectionViewLayout" scheme="http://www.liuchungui.com/tags/UICollectionViewLayout/"/>
    
      <category term="CustomLayout，CollectionView" scheme="http://www.liuchungui.com/tags/CustomLayout%EF%BC%8CCollectionView/"/>
    
      <category term="CollectionView动画" scheme="http://www.liuchungui.com/tags/CollectionView%E5%8A%A8%E7%94%BB/"/>
    
      <category term="动画" scheme="http://www.liuchungui.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>UICollectionView之自定义Layout</title>
    <link href="http://www.liuchungui.com/2015/11/06/uicollectionviewzhi-zi-ding-yi-layout/"/>
    <id>http://www.liuchungui.com/2015/11/06/uicollectionviewzhi-zi-ding-yi-layout/</id>
    <published>2015-11-05T16:00:26.000Z</published>
    <updated>2016-08-06T05:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们使用系统自带的UICollectionViewFlowLayout无法实现我们的布局时，我们就可以考虑自定义layout。<br>所以，了解并学习一下自定义Layout是很有必要。<br>其实可以分三个步骤：</p>
<ol>
<li>覆写prepareLayout方法，并在里面事先就计算好必要的布局信息并存储起来。</li>
<li>基于prepareLayout方法中的布局信息，使用collectionViewContentSize方法返回UICollectionView的内容尺寸。</li>
<li>使用layoutAttributesForElementsInRect:方法返回指定区域cell、Supplementary View和Decoration View的布局属性。<a id="more"></a>
</li>
</ol>
<p>了解了自定义布局的三个主要步骤，我们来通过自定义布局的方式用UICollectionView实现grideView。当然，grideView使用<code>UICollectionViewFlowLayout</code>就可以轻易实现，这里我们只是学习了解一下自定义布局的过程，所以拿grideView这个经常用的来作为例子。</p>
<p>我们创建一个新的工程<a href="https://github.com/liuchungui/BGCustomLayoutCollectionViewDemo" target="_blank" rel="external">BGCustomLayoutCollectionViewDemo</a>。然后创建一个UICollectionViewLayout的子类对象<code>BGGrideLayout</code>，它就是我们自定义layout对象。</p>
<h3 id="在BGGrideLayout里面，我们首先覆写prepareLayout方法。"><a href="#在BGGrideLayout里面，我们首先覆写prepareLayout方法。" class="headerlink" title="在BGGrideLayout里面，我们首先覆写prepareLayout方法。"></a>在BGGrideLayout里面，我们首先覆写prepareLayout方法。</h3><p>prepareLayout是专门用来准备布局的，在<code>prepareLayout</code>方法里面我们可以事先就计算后面要用到的布局信息并存储起来，防止后面方法多次计算，提高性能。例如，我们可以在此方法就计算好每个cell的属性、整个CollectionView的内容尺寸等等。此方法在布局之前会调用一次，之后只有在调用<code>invalidateLayout</code>、<code>shouldInvalidateLayoutForBoundsChange:</code>返回<code>YES</code>和<code>UICollectionView刷新</code>的时候才会调用。</p>
<p>而在BGGrideLayout的prepareLayout方法中，我们有两个目的：<br>一是获取对应indexPath的<code>UICollectionViewLayoutAttributes</code>对象，并存储到二维数组<code>layoutInfoArr</code>当中；<br>二是计算出内容尺寸并保存到全局变量<code>contentSize</code>当中。<br>代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)prepareLayout&#123;</div><div class="line">    [<span class="keyword">super</span> prepareLayout];</div><div class="line">    <span class="built_in">NSMutableArray</span> *layoutInfoArr = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    <span class="built_in">NSInteger</span> maxNumberOfItems = <span class="number">0</span>;</div><div class="line">    <span class="comment">//获取布局信息</span></div><div class="line">    <span class="built_in">NSInteger</span> numberOfSections = [<span class="keyword">self</span>.collectionView numberOfSections];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> section = <span class="number">0</span>; section &lt; numberOfSections; section++)&#123;</div><div class="line">        <span class="built_in">NSInteger</span> numberOfItems = [<span class="keyword">self</span>.collectionView numberOfItemsInSection:section];</div><div class="line">        <span class="built_in">NSMutableArray</span> *subArr = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:numberOfItems];</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSInteger</span> item = <span class="number">0</span>; item &lt; numberOfItems; item++)&#123;</div><div class="line">            <span class="built_in">NSIndexPath</span> *indexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:item inSection:section];</div><div class="line">            <span class="built_in">UICollectionViewLayoutAttributes</span> *attributes = [<span class="keyword">self</span> layoutAttributesForItemAtIndexPath:indexPath];</div><div class="line">            [subArr addObject:attributes];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(maxNumberOfItems &lt; numberOfItems)&#123;</div><div class="line">            maxNumberOfItems = numberOfItems;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//添加到二维数组</span></div><div class="line">        [layoutInfoArr addObject:[subArr <span class="keyword">copy</span>]];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//存储布局信息</span></div><div class="line">    <span class="keyword">self</span>.layoutInfoArr = [layoutInfoArr <span class="keyword">copy</span>];</div><div class="line">    <span class="comment">//保存内容尺寸</span></div><div class="line">    <span class="keyword">self</span>.contentSize = <span class="built_in">CGSizeMake</span>(maxNumberOfItems*(<span class="keyword">self</span>.itemSize.width+<span class="keyword">self</span>.interitemSpacing)+<span class="keyword">self</span>.interitemSpacing, numberOfSections*(<span class="keyword">self</span>.itemSize.height+<span class="keyword">self</span>.lineSpacing)+<span class="keyword">self</span>.lineSpacing);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，我们看到了<code>UICollectionViewLayoutAttributes</code>这个类，这个类其实专门用来存储视图的内容，例如frame、size、apha、hiden等等，layout最后会拿着这些frame设置给对应的视图。<br>而上面代码中，获取<code>UICollectionViewLayoutAttributes</code>是通过<code>layoutAttributesForItemAtIndexPath:</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    UICollectionViewLayoutAttributes *attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:indexPath];</div><div class="line">    //每一组cell为一行</div><div class="line">    attributes.frame = CGRectMake((self.itemSize.width+self.interitemSpacing)*indexPath.row+self.interitemSpacing, (self.itemSize.height+self.lineSpacing)*indexPath.section+self.lineSpacing, self.itemSize.width, self.itemSize.height);</div><div class="line">    return attributes;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个方法中，<code>itemSize</code>是cell的大小，<code>interitemSpacing</code>是cell与cell之间的间距，<code>lineSpacing</code>是行距。</p>
<h3 id="随后，覆写collectionViewContentSize"><a href="#随后，覆写collectionViewContentSize" class="headerlink" title="随后，覆写collectionViewContentSize"></a>随后，覆写collectionViewContentSize</h3><p>collectionViewContentSize返回内容尺寸给UICollectionView。注意这个方法返回的尺寸是给UICollectionView这个继承于<code>UIScrollView</code>的视图作为<code>contentSize</code>，不是UICollectionView的视图尺寸。正是因为这一点，我们自定义layout如果想让它只能横向滑动，只需要将这个<code>size.height</code>设置成<code>collectionView.height</code>就行了。<br>这个方法会多次调用，所以最好是在prepareLayout里就计算好。<br>在BGGrideLayout类中，我们只需要返回前面计算好的内容尺寸就行了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (CGSize)collectionViewContentSize&#123;</div><div class="line">    return self.contentSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="最后，覆写layoutAttributesForElementsInRect-方法"><a href="#最后，覆写layoutAttributesForElementsInRect-方法" class="headerlink" title="最后，覆写layoutAttributesForElementsInRect:方法"></a>最后，覆写layoutAttributesForElementsInRect:方法</h3><p>此方法需要返回一组UICollectionViewLayoutAttributes类型对象。它代表着在这个指定的区域中，我们需要显示<code>cell</code>、<code>Supplementary View</code>和<code>Decoration View</code>中哪些视图，而这些视图的属性则保存UICollectionViewLayoutAttributes中。<br>此方法会多次调用，为了更好的性能，在这个方法当中，我们使用的UICollectionViewLayoutAttributes最好是在prepareLayout已经布局好的信息。</p>
<p>在BGGrideLayout中，我们遍历二维数组，找出了与指定区域有交接的UICollectionViewLayoutAttributes对象放到一个数组中，然后返回。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect&#123;</div><div class="line">    NSMutableArray *layoutAttributesArr = [NSMutableArray array];</div><div class="line">    [self.layoutInfoArr enumerateObjectsUsingBlock:^(NSArray *array, NSUInteger i, BOOL * _Nonnull stop) &#123;</div><div class="line">        [array enumerateObjectsUsingBlock:^(UICollectionViewLayoutAttributes *obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;</div><div class="line">            if(CGRectIntersectsRect(obj.frame, rect)) &#123;</div><div class="line">                [layoutAttributesArr addObject:obj];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    return layoutAttributesArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里，我们的BGGrideLayout已经写好了，使用部分的代码，请直接查看<a href="https://github.com/liuchungui/BGCustomLayoutCollectionViewDemo" target="_blank" rel="external">BGCustomLayoutCollectionViewDemo</a>中ViewController里面的代码就行了。</p>
<p>效果：</p>
<p><img src="http://ww4.sinaimg.cn/large/7746cd07jw1exqk0a7ofyg208j0fr7wh.gif" alt="Demo"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/Introduction/Introduction.html" target="_blank" rel="external">Collection View Programming Guide for iOS</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们使用系统自带的UICollectionViewFlowLayout无法实现我们的布局时，我们就可以考虑自定义layout。&lt;br&gt;所以，了解并学习一下自定义Layout是很有必要。&lt;br&gt;其实可以分三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;覆写prepareLayout方法，并在里面事先就计算好必要的布局信息并存储起来。&lt;/li&gt;
&lt;li&gt;基于prepareLayout方法中的布局信息，使用collectionViewContentSize方法返回UICollectionView的内容尺寸。&lt;/li&gt;
&lt;li&gt;使用layoutAttributesForElementsInRect:方法返回指定区域cell、Supplementary View和Decoration View的布局属性。
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="UICollectionView" scheme="http://www.liuchungui.com/tags/UICollectionView/"/>
    
      <category term="UICollectionViewLayout" scheme="http://www.liuchungui.com/tags/UICollectionViewLayout/"/>
    
      <category term="CustomLayout，CollectionView" scheme="http://www.liuchungui.com/tags/CustomLayout%EF%BC%8CCollectionView/"/>
    
      <category term="CollectionView自定义Layout" scheme="http://www.liuchungui.com/tags/CollectionView%E8%87%AA%E5%AE%9A%E4%B9%89Layout/"/>
    
      <category term="UICollectionView自定义Layout" scheme="http://www.liuchungui.com/tags/UICollectionView%E8%87%AA%E5%AE%9A%E4%B9%89Layout/"/>
    
  </entry>
  
  <entry>
    <title>UICollectionView之介绍使用篇</title>
    <link href="http://www.liuchungui.com/2015/11/02/uicollectionviewzhi-jie-shao-shi-yong-pian/"/>
    <id>http://www.liuchungui.com/2015/11/02/uicollectionviewzhi-jie-shao-shi-yong-pian/</id>
    <published>2015-11-01T16:29:12.000Z</published>
    <updated>2016-08-06T05:56:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>实现垂直方向的单列表来说，使用UITableView足以；若是需要构建横向滑动列表、gridView等直线型布局，则使用UICollectionView+UICollectionViewFlowLayout搭建最合适；更复杂的布局，则可以使用UICollectionView+自定义Layout来实现。</p>
<p>而这篇博客就来介绍一下UICollectionView。</p>
<p>首先，来了解一下UICollectionView工作流程：</p>
<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1exjnjqrju5j20x00qk76h.jpg" alt=""></p>
<p>当UICollectionView显示内容时，先从数据源获取cell，然后交给UICollectionView。再从UICollectionViewLayout获取对应的layout attributes(布局属性)。最后，根据每个cell对应的layout attributes(布局属性)来对cell进行布局，生成了最终的界面。而用户交互的时候，都是通过Delegate来进行交互。当然，上面只是布局cell，但是UICollectionView内部还有Supplementary View和Decoration View，也可以对其进行布局。</p>
<p>上面，我们了解了UICollectionView的工作流程，我们将UICollectionView分成视图、数据源和代理方法、UICollectionViewLayout三块来介绍。<br><a id="more"></a></p>
<h2 id="一、视图"><a href="#一、视图" class="headerlink" title="一、视图"></a>一、视图</h2><p>UICollectionView上面显示内容的视图有三种Cell视图、Supplementary View和Decoration View。</p>
<h4 id="Cell视图"><a href="#Cell视图" class="headerlink" title="Cell视图"></a>Cell视图</h4><p>CollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。</p>
<h4 id="Supplementary-View"><a href="#Supplementary-View" class="headerlink" title="Supplementary View"></a>Supplementary View</h4><p>它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。例如flow layout当中的headers和footers就是可选的Supplementary View。</p>
<h4 id="Decoration-View"><a href="#Decoration-View" class="headerlink" title="Decoration View"></a>Decoration View</h4><p>这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。</p>
<h2 id="二、数据源和代理方法"><a href="#二、数据源和代理方法" class="headerlink" title="二、数据源和代理方法"></a>二、数据源和代理方法</h2><h4 id="1、注册cell或者Supplementary-View使其重用"><a href="#1、注册cell或者Supplementary-View使其重用" class="headerlink" title="1、注册cell或者Supplementary View使其重用"></a>1、注册cell或者Supplementary View使其重用</h4><p>在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册，用来进行重用。     </p>
<ul>
<li>registerClass: forCellWithReuseIdentifier:</li>
<li>registerNib: forCellWithReuseIdentifier:</li>
<li>registerClass: forSupplementaryViewOfKind: withReuseIdentifier:</li>
<li><p>registerNib: forSupplementaryViewOfKind: withReuseIdentifier:</p>
<p>显而易见，前面两个方法是注册cell，后两个方法注册Supplementary View。其中，注册的方式有两种，第一种是直接注册class，它重用的时候会调用[[UICollectionView alloc] init]这样的初始化方法创建cell；另外一种是注册nib，它会自动加载nib文件。</p>
<p>注册的之后，我们如何重用？<br>在数据源方法当中返回<code>cell</code>或者<code>Supplementary view</code>的方法当中通过<code>dequeueReusableCellWithReuseIdentifier:forIndexPath:</code> 或者 <code>dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:</code>方法获取cell或者Supplementary View。 </p>
</li>
</ul>
<p>示例代码：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">UICollectionViewCell</span> *)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView cellForItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    CollectionViewCell *cell = (CollectionViewCell *)[collectionView dequeueReusableCellWithReuseIdentifier:CellReuseIdentify forIndexPath:indexPath];</div><div class="line">    cell.backgroundColor = [<span class="built_in">UIColor</span> lightGrayColor];</div><div class="line">    cell.textLabel.text = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"(%zd,%zd)"</span>, indexPath.section, indexPath.row];</div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="2、数据源方法"><a href="#2、数据源方法" class="headerlink" title="2、数据源方法"></a>2、数据源方法</h4><p> 数据源方法与UITableView类似，主要有：</p>
<ul>
<li>numberOfSectionsInCollectionView:</li>
<li>collectionView: numberOfItemsInSection:<ul>
<li>collectionView: cellForItemAtIndexPath:</li>
<li>collectionView: viewForSupplementaryElementOfKind: atIndexPath:</li>
</ul>
</li>
</ul>
<p>与UITableView不同的是多加了返回Supplementary view数据源方法。</p>
<h4 id="3、代理方法"><a href="#3、代理方法" class="headerlink" title="3、代理方法"></a>3、代理方法</h4><p>数据源为UICollectionView提供数据相关的内容，而代理则主要负责用户交互、与数据无关的视图外形。主要分成两部分：</p>
<p>1、通过调用代理方法，管理视图的选中、高亮</p>
<ul>
<li>collectionView:shouldDeselectItemAtIndexPath:</li>
<li>collectionView:didSelectItemAtIndexPath:</li>
<li>collectionView:didDeselectItemAtIndexPath:</li>
<li>collectionView:shouldHighlightItemAtIndexPath:</li>
<li>collectionView:didHighlightItemAtIndexPath:</li>
<li><p>collectionView:didUnhighlightItemAtIndexPath:</p>
<p>2、长按cell，显示编辑菜单<br>与UITableView不同，用户长按cell时，UICollectionView可以显示编辑菜单。这个编辑菜单可以用来剪切、复制和粘贴cell。不过，要显示这个编辑菜单需要满足下面几个条件：</p>
<ul>
<li>代理对象必须实现下面三个方法：<br><code>collectionView:shouldShowMenuForItemAtIndexPath:</code><br><code>collectionView:canPerformAction:forItemAtIndexPath:withSender:</code><br><code>collectionView:performAction:forItemAtIndexPath:withSender:</code></li>
</ul>
</li>
<li>对于指定要编辑的cell，<code>collectionView:shouldShowMenuForItemAtIndexPath:</code>方法需要返回<code>YES</code></li>
<li><p><code>collectionView:canPerformAction:forItemAtIndexPath:withSender:</code> 方法中，对于剪切、复制、粘贴三种action至少有一个返回YES。其实，编辑菜单是有很多种action的，但是对于UICollectionView来说，它仅仅支持的剪切、复制、粘贴三个，所以说这个代理方法至少支持这三种的一种。<br>剪切、复制、粘贴的方法名是：<br><code>cut:</code><br><code>copy:</code><br><code>paste:</code>    </p>
<p>当上面的条件都满足了，用户就可以长按cell显示出编辑菜单，然后选择对应的action，从而就会回调delegate的collectionView:performAction:forItemAtIndexPath:withSender: 方法去做对应的事情。</p>
</li>
</ul>
<p>当我们想控制编辑菜单仅仅显示复制和粘贴时，我们就可以在<code>collectionView:canPerformAction:forItemAtIndexPath:withSender:</code>方法中进行操作，具体请见下面代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)collectionView:(<span class="built_in">UICollectionView</span> *)collectionView canPerformAction:(SEL)action forItemAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath withSender:(<span class="keyword">id</span>)sender&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSStringFromSelector</span>(action) isEqualToString:<span class="string">@"copy:"</span>]        || [<span class="built_in">NSStringFromSelector</span>(action) isEqualToString:<span class="string">@"paste:"</span>])        <span class="keyword">return</span> <span class="literal">YES</span>;    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三、UICollectionViewLayout"><a href="#三、UICollectionViewLayout" class="headerlink" title="三、UICollectionViewLayout"></a>三、UICollectionViewLayout</h2><p><code>UICollectionViewLayout</code>是通过<code>UICollectionViewLayoutAttributes</code>类来管理<code>cell</code>、<code>Supplementary View</code>和<code>Decoration View</code>的<code>位置</code>、<code>transform</code>、<code>alpha</code>、<code>hidden</code>等等。<br>UICollectionViewLayout这个类只是一个基类，我们给UICollectionView使用的都是它的<code>子类</code>。系统为我们提供了一个最常用的layout为<code>UICollectionViewFlowLayout</code>，我们可以使用它制作<code>grid view</code>。当UICollectionViewLayout满足不了我们的需求时，我们可以<code>子类化UICollectionViewLayout</code>或者<code>自定义layout</code>，这个内容放到我下一篇当中。</p>
<h4 id="UICollectionViewFlowLayout"><a href="#UICollectionViewFlowLayout" class="headerlink" title="UICollectionViewFlowLayout"></a>UICollectionViewFlowLayout</h4><p>使用UICollectionViewFlowLayout之前，我们来了解它内部常用的属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//同一组当中，垂直方向：行与行之间的间距；水平方向：列与列之间的间距</div><div class="line">@property (nonatomic) CGFloat minimumLineSpacing; </div><div class="line">//垂直方向：同一行中的cell之间的间距；水平方向：同一列中，cell与cell之间的间距</div><div class="line">@property (nonatomic) CGFloat minimumInteritemSpacing;</div><div class="line">//每个cell统一尺寸</div><div class="line">@property (nonatomic) CGSize itemSize;</div><div class="line">//滑动反向，默认滑动方向是垂直方向滑动</div><div class="line">@property (nonatomic) UICollectionViewScrollDirection scrollDirection; </div><div class="line">//每一组头视图的尺寸。如果是垂直方向滑动，则只有高起作用；如果是水平方向滑动，则只有宽起作用。</div><div class="line">@property (nonatomic) CGSize headerReferenceSize;</div><div class="line">//每一组尾部视图的尺寸。如果是垂直方向滑动，则只有高起作用；如果是水平方向滑动，则只有宽起作用。</div><div class="line">@property (nonatomic) CGSize footerReferenceSize;</div><div class="line">//每一组的内容缩进</div><div class="line">@property (nonatomic) UIEdgeInsets sectionInset;</div></pre></td></tr></table></figure>
<p>注意：UICollectionViewFlowLayout内部的属性都是用来统一设置，若是统一设置无法满足需求，可以实现<code>UICollectionViewDelegateFlowLayout</code>代理方法，进行对应的设置。而后面内容我都以UICollectionViewFlowLayout的属性来叙述，请自行参照修改。</p>
<p>UICollectionViewFlowLayout在纵向滑动与横向滑动时，布局是不太一样的。</p>
<p align="center"><br>  <img src="http://ww1.sinaimg.cn/large/7746cd07jw1exmpk8hs66j20ea0fcabe.jpg" width="257" height="274"><br>  <img src="http://ww3.sinaimg.cn/large/7746cd07jw1exmq7ebjo2j20es0cujsp.jpg" width="266" height="231"><br></p>

<p>由上图就可以看出来，UICollectionViewFlowLayout在布局时，会根据scrollDirection的值不同而产生不同的布局。</p>
<ul>
<li><p>垂直方向滑动：</p>
<ul>
<li>Cell布局：UICollectionView的内容宽度与本身视图的宽度相等，并且是固定的。会根据<code>sectionInset左右缩进</code>、<code>itemSize的宽度</code>、<code>minimumInteritemSpacing</code>三个值来计算每一行cell数量。<br>具体计算公式是:<br><code>cellCount = (CollectionViewContentWidth-sectionInset.left-sectionInset.right+minimumInteritemSpacing)/(itemSize.width+minimumInteritemSpacing)</code><br><code>CollectionViewContentWidth</code>是UICollectionView的内容宽度，计算出来的<code>cellCount</code>进行四舍五入成一个整数就是<code>每一行cell的数量</code>。<br>而每个cell之间实际的间隔值则是:<br><code>realInteritemSpacing = (CollectionViewContentWidth-sectionInset.left-sectionInset.right-cellCount*itemSize.width)/(cellCount-1)</code><br>当每个cell大小确定、每一行cell的个数确定、每个cell之间的间距确定之后，UICollectionViewFlowLayout就可以计算出每一行cell的frame了。<br>而如果同一组cell的个数，在水平方向的一行放不下去，则就会放入第二行，而这第二行的cell在垂直方向与第一行的cell相隔<code>minimumLineSpacing</code>。这样又确定了行与行之间的间距，那么这一组cell的布局就可以确定了。             </li>
<li>头视图与尾部视图：根据headerReferenceSize和footerReferenceSize中的高来确定头部和尾部视图的高，它其实就是两个不同类型的Supplementary View。</li>
</ul>
</li>
<li><p>水平方向滑动：</p>
<ul>
<li>Cell布局：水平方向的滑动内容的高与本身视图的高是相等的，并且是固定的。它的cell是从<code>上到下进行布局</code>的。会根据<code>sectionInset上下缩进</code>、<code>itemSize的高度</code>、<code>minimumInteritemSpacing</code>三个值来计算每一列放多少个cell，具体计算公式可以参照垂直方向滑动的公式。之后的逻辑和垂直方向滑动时一样，只是minimumLineSpacing现在是代表列与列之间的间距。     </li>
<li>头视图与尾部视图：根据headerReferenceSize和footerReferenceSize中的宽来确定头部和尾部视图的宽。</li>
</ul>
</li>
</ul>
<p>相关使用UICollectionViewFlowLayout代码:<a href="https://github.com/liuchungui/UICollectionViewDemo" target="_blank" rel="external">UICollectionViewDemo</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.apple.com/library/prerelease/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/Introduction/Introduction.html" target="_blank" rel="external">Collection View Programming Guide for iOS</a><br><a href="http://www.onevcat.com/2012/06/introducing-collection-views/" target="_blank" rel="external">WWDC 2012 Session笔记——205 Introducing Collection Views</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实现垂直方向的单列表来说，使用UITableView足以；若是需要构建横向滑动列表、gridView等直线型布局，则使用UICollectionView+UICollectionViewFlowLayout搭建最合适；更复杂的布局，则可以使用UICollectionView+自定义Layout来实现。&lt;/p&gt;
&lt;p&gt;而这篇博客就来介绍一下UICollectionView。&lt;/p&gt;
&lt;p&gt;首先，来了解一下UICollectionView工作流程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/7746cd07jw1exjnjqrju5j20x00qk76h.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当UICollectionView显示内容时，先从数据源获取cell，然后交给UICollectionView。再从UICollectionViewLayout获取对应的layout attributes(布局属性)。最后，根据每个cell对应的layout attributes(布局属性)来对cell进行布局，生成了最终的界面。而用户交互的时候，都是通过Delegate来进行交互。当然，上面只是布局cell，但是UICollectionView内部还有Supplementary View和Decoration View，也可以对其进行布局。&lt;/p&gt;
&lt;p&gt;上面，我们了解了UICollectionView的工作流程，我们将UICollectionView分成视图、数据源和代理方法、UICollectionViewLayout三块来介绍。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="UICollectionView" scheme="http://www.liuchungui.com/tags/UICollectionView/"/>
    
      <category term="UICollectionViewLayout" scheme="http://www.liuchungui.com/tags/UICollectionViewLayout/"/>
    
  </entry>
  
  <entry>
    <title>Git简单总结</title>
    <link href="http://www.liuchungui.com/2015/10/23/gitzong-jie/"/>
    <id>http://www.liuchungui.com/2015/10/23/gitzong-jie/</id>
    <published>2015-10-23T06:45:46.000Z</published>
    <updated>2016-08-06T05:58:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章分为两部分，一是搭建git服务器，二是git命令，主要是记录了一下我搭建git服务器流程和用到的相关命令。</p>
<h2 id="一、Mac环境下搭建Git服务器"><a href="#一、Mac环境下搭建Git服务器" class="headerlink" title="一、Mac环境下搭建Git服务器"></a>一、Mac环境下搭建Git服务器</h2><p>这里简单说一下Mac环境下通过git+ssh搭建服务器的流程。     </p>
<h4 id="1、打开远程登陆"><a href="#1、打开远程登陆" class="headerlink" title="1、打开远程登陆"></a>1、打开远程登陆</h4><p>系统偏好设置 -&gt; 共享 -&gt; 远程登陆</p>
<h4 id="2、添加git用户"><a href="#2、添加git用户" class="headerlink" title="2、添加git用户"></a>2、添加git用户</h4><p>这一步不加上也可以，但是为了更好的管理和安全着想，最好加上一个git用户<br>系统偏好设置 -&gt; 用户与群组 -&gt; 添加名为git的用户</p>
<h4 id="3、初始化一个空仓库"><a href="#3、初始化一个空仓库" class="headerlink" title="3、初始化一个空仓库"></a>3、初始化一个空仓库</h4><p>在git用户目录下创建一个repos文件夹专门用来管理仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ mkdir repos</div><div class="line">$ cd repos</div><div class="line"># 初始化一个空仓库</div><div class="line">$ git init --bare test.git</div></pre></td></tr></table></figure>
<h4 id="4、添加密钥"><a href="#4、添加密钥" class="headerlink" title="4、添加密钥"></a>4、添加密钥</h4><p>在git服务端添加客户端的公钥后，以后git访问不需要密码了，下面是客户端与服务端的操作。<br>客户端：<br>使用<code>ssh-keygen</code>命令生成密钥，执行完后会生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，其中<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥。客户端将<code>id_rsa.pub</code>文件交给git服务端就行了。<br>服务端：<br>将客户端的<code>id_rsa.pub</code>中的内容放到<code>/Users/git/.ssh/authorized_keys</code>文件中。主要，客户端每个公钥占用独立的一行，有时复制会出现问题，可以使用<code>cat id_rsa.pub &gt;&gt; /Users/git/.ssh/authorized_keys</code>命令。<br><a id="more"></a></p>
<h4 id="5、客户端使用"><a href="#5、客户端使用" class="headerlink" title="5、客户端使用"></a>5、客户端使用</h4><p>到这一步，我们的git服务环境其实已经搭建好了，下面来使用。<br>首先，我们需要知道服务端的用户和git项目的路径    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ whoami</div><div class="line">git</div><div class="line">$ pwd</div><div class="line">/Users/git/repos</div></pre></td></tr></table></figure>
<p>这里用户是git，路径是<code>/Users/git/repos/test.git</code><br>下面，我们就可以在客户端clone项目了。这里因为我是在本机测试，所以用的是localhost，一般都是用<code>服务器的ip或者域名</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git clone user@localhost:/Users/user/repos/test.git</div><div class="line">Cloning into &apos;test&apos;...</div><div class="line">warning: You appear to have cloned an empty repository.</div><div class="line">Checking connectivity... done.</div></pre></td></tr></table></figure>
<p>这里就说明服务器已经搭建好了。</p>
<p>遇到问题(这里是我在linux系统搭建时遇到的问题)：<br><code>remote: error: insufficient permission for adding an object to repository database ./objects</code><br>权限的问题，查看服务器对应的仓库的父文件夹是否属于git用户，git是否拥有可写权限</p>
<p><strong>linux系统搭建git服务器，请参考</strong><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="external">搭建Git服务器</a></p>
<h2 id="二、Git命令"><a href="#二、Git命令" class="headerlink" title="二、Git命令"></a>二、Git命令</h2><p>1、下面是git操作的简单流程，里面的命令都是经常用到的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#克隆某个仓库的代码</div><div class="line">git clone https://github.com/chunguiLiu/TestLCGCocoapods.git</div><div class="line">#进入TestLCGCocoapods，添加文件</div><div class="line">cd TestLCGCocoapods</div><div class="line">echo &quot;test&quot; &gt; test.txt</div><div class="line">git add test.txt</div><div class="line">#提交文件，并添加日志为&apos;add test.txt file&apos;</div><div class="line">git commit -m &apos;add test.txt file&apos;</div><div class="line">#推送到远程服务器</div><div class="line">git push origin master</div><div class="line">#修改文件，并推送到服务器</div><div class="line">echo &apos;add test&apos; &gt;&gt; test.txt</div><div class="line">git add -update</div><div class="line">git commit -m &apos;update file&apos;</div><div class="line">git push origin master</div><div class="line">#打上版本号，其中-m参数后面是日志，&apos;0.1.0&apos;是版本号</div><div class="line">git tag -m &apos;first tag&apos; &apos;0.1.0&apos;</div><div class="line">#将版本号推送到服务器</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<p>2、分支是git中一个很强大的功能，这里列出我曾经使用过的相关分支命令，也许你会用到，想了解更多分支的知识请进入<a href="http://www.open-open.com/lib/view/open1328069889514.html" target="_blank" rel="external">Git详解之三 Git分支</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#创建test分支</div><div class="line">git branch test</div><div class="line">#切换到test分支</div><div class="line">git checkout test</div><div class="line">#比较master和test两个分支</div><div class="line">git diff master test</div><div class="line">#查看当前分支</div><div class="line">git branch</div><div class="line">#删除分支</div><div class="line">git branch -d test</div><div class="line">#删除远程服务器的分支</div><div class="line">git push --delete origin testBranch</div></pre></td></tr></table></figure>
<p>3、查看git某个版本的内容<br>当我添加Cocoapods私有库的时候，想查看从pod某个版本下来的内容与我对应版本内容是否相同，这个时候，我怎么操作git？<br>其实，git克隆下来的内容拥有所有版本内容，我们如果想查看某个tag版本的内容，可以使用<code>git checkout tag-version</code>命令，将这个版本当做一个分支来查看，只是这个时候它只是一个快照，我们不能修改代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#跳转到0.0.1版本</div><div class="line">git checkout 0.0.1</div></pre></td></tr></table></figure>
<p>如果我们想修改这个版本的内容时，那么我们可以通过创建一个新的分支，这个新的分支是以某个tag版本为准，可以在新的分支下修改代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#以0.0.1版本创建一个分支newBranch</div><div class="line">git checkout -b newBranch 0.0.1</div></pre></td></tr></table></figure>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="external">搭建Git服务器</a><br><a href="http://blog.jobbole.com/54184/" target="_blank" rel="external">开发者日常使用的 Git 命令</a><br><a href="http://www.cnblogs.com/lee0oo0/archive/2013/06/28/3161829.html" target="_blank" rel="external">Git基本命令行操作</a><br><a href="http://www.cnblogs.com/winterIce/archive/2012/07/22/2603488.html" target="_blank" rel="external">github常用命令</a><br><a href="http://www.open-open.com/lib/view/open1328069889514.html" target="_blank" rel="external">Git详解之三 Git分支</a>    </p>
]]></content>
    
    <summary type="html">
    
      Mac环境下搭建git服务器，git命令总结
    
    </summary>
    
      <category term="git" scheme="http://www.liuchungui.com/categories/git/"/>
    
    
      <category term="git" scheme="http://www.liuchungui.com/tags/git/"/>
    
      <category term="git总结" scheme="http://www.liuchungui.com/tags/git%E6%80%BB%E7%BB%93/"/>
    
      <category term="git命令" scheme="http://www.liuchungui.com/tags/git%E5%91%BD%E4%BB%A4/"/>
    
      <category term="搭建git服务器" scheme="http://www.liuchungui.com/tags/%E6%90%AD%E5%BB%BAgit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Mac环境下搭建Git服务器" scheme="http://www.liuchungui.com/tags/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Mac环境下Nginx实现反向代理</title>
    <link href="http://www.liuchungui.com/2015/10/21/mhuan-jing-xia-nginxshi-xian-fan-xiang-dai-li/"/>
    <id>http://www.liuchungui.com/2015/10/21/mhuan-jing-xia-nginxshi-xian-fan-xiang-dai-li/</id>
    <published>2015-10-21T02:16:01.000Z</published>
    <updated>2016-08-06T06:01:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p>首先，我们需要搭建Nginx环境，我这里是通过homebrew一键式搭建，步骤如下：<br>1、安装homebrew</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>以<a href="brew.sh">官网homebrew</a>为准</p>
<p>2、安装nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install nginx</div></pre></td></tr></table></figure>
<p>查看Nginx安装的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ nginx -v</div></pre></td></tr></table></figure></p>
<p>Nginx常用的命令有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#查看版本，以及配置文件地址</div><div class="line">nginx -V</div><div class="line">#查看版本 </div><div class="line">nginx -v</div><div class="line">#指定配置文件</div><div class="line">nginx -c filename</div><div class="line">#帮助</div><div class="line">nginx -h</div><div class="line">#重新加载配置|重启|停止|退出 nginx</div><div class="line">nginx -s reload|reopen|stop|quit</div><div class="line">#打开 nginx</div><div class="line">sudo nginx</div><div class="line">#测试配置是否有语法错误</div><div class="line">sudo nginx -t</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2、Nginx配置WEB服务器"><a href="#2、Nginx配置WEB服务器" class="headerlink" title="2、Nginx配置WEB服务器"></a>2、Nginx配置WEB服务器</h2><p>使用Nginx做反向代理，我们需要了解一下Nginx中http模块的配置。     </p>
<h4 id="编辑Nginx配置文件"><a href="#编辑Nginx配置文件" class="headerlink" title="编辑Nginx配置文件"></a>编辑Nginx配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /usr/local/etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>找到http模块，修改http模块中的listen为80，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">http &#123;</div><div class="line">    #导入类型配置文件</div><div class="line">    include       mime.types;</div><div class="line">    #设定默认类型为二进制流</div><div class="line">    default_type  application/octet-stream;</div><div class="line">    #启用sendfile()函数</div><div class="line">    sendfile        on;</div><div class="line">    #客户端与服务器连接的超时时间为65秒，超过65秒，服务器关闭连接</div><div class="line">    keepalive_timeout  65;</div><div class="line">    #是否开启gzip，默认关闭</div><div class="line">    #gzip  on;</div><div class="line">    #一个server块</div><div class="line">    server &#123;</div><div class="line">        #服务器监听的端口为80</div><div class="line">        listen       80;</div><div class="line">        #服务器名称为localhost，我们可以通过localhost来访问这个server块的服务</div><div class="line">        server_name  localhost;</div><div class="line">        #location块，它存放在server块当中，location会尝试根据用户请求中的URI来匹配上面的/uri表达式，如果可以匹配，就选择location &#123;&#125;块中的配置来处理用户请求。</div><div class="line">        location / &#123;</div><div class="line">            #以root方式设置资源路径，它与alias的不同请见下面的 http模块中文件路径定义</div><div class="line">            root   html;</div><div class="line">            #默认访问的页面，从左依次找到右，直到找到这个文件，然后返回结束请求</div><div class="line">            index  index.html index.htm;</div><div class="line">            #设置错误页面，对应的错误码是404，错误页面是/Users/user/Sites/404.html</div><div class="line">            error_page 404  /404.html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    include servers/*;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="http模块中文件路径定义："><a href="#http模块中文件路径定义：" class="headerlink" title="http模块中文件路径定义："></a>http模块中文件路径定义：</h4><p>1、以<strong>root</strong>方式设置资源路径<br>语法: root path;<br>默认: root html;<br>配置块: http, server, location, if<br>例如，定义资源文件相对于HTTP请求的根目录。    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /download/ &#123;</div><div class="line">	root /opt/web/html;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的配置中，如果有一个请求的URI是/download/index/test.html，那么Web服务器将会返回服务器上/opt/web/html/download/index/test.html文件的内容。</p>
<p>2、以<strong>alias</strong>方式设置资源路径<br>语法：alias path;<br>配置块：location<br>alias也是用来设置文件资源路径的，它与root的不同点主要在于如何解读紧跟location后面的uri参数，这将会致使alias与root以不同的方式将用户请求映射到真正的磁盘文件上。<br>例如，如果有一个请求的URI是/conf/nginx.conf，而用户实际想访问的文件在/usr/local/nginx/conf/nginx.conf，那么想要使用alias来进行设置的话，可以采用如下方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /conf &#123;</div><div class="line">	alias /usr/local/nginx/conf/;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果用root设置，那么语句如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /conf &#123;</div><div class="line">	alias /usr/local/nginx/;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用alias时，在URI向实际文件路径的映射过程中，已经把location后配置的/conf这部分字符串丢弃掉，因此，/conf/nginx.conf请求将根据alias path映射为path/nginx.conf。root则不然，它会根据完整的URI请求来映射，因此/conf/nginx.conf请求会根据root path映射为path/conf/nginx.conf。这也是root可以放置到http、server、location或if块中，而alias只能放置到location块中的原因。<br>alias后面还可以添加正则表达式，例如：     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location ~ ^/test/(\w+)\.(\w+)$ &#123;</div><div class="line">	alias /usr/local/nginx/$2/$1.$2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，请求在访问/test/nginx.conf时，Nginx会返回/usr/local/nginx/conf/nginx.conf文件中的内容。</p>
<h4 id="开启Nginx的Web服务"><a href="#开启Nginx的Web服务" class="headerlink" title="开启Nginx的Web服务"></a>开启Nginx的Web服务</h4><p>开启Nginx服务之前，如果我们开启了Apache服务，那么我需要先关闭Apache服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#开启Nginx</div><div class="line">$ sudo nginx</div></pre></td></tr></table></figure>
<p>使用localhost来访问，若是出现nginx欢迎页，说明成功。</p>
<h2 id="3、使用Nginx做反向代理"><a href="#3、使用Nginx做反向代理" class="headerlink" title="3、使用Nginx做反向代理"></a>3、使用Nginx做反向代理</h2><p>反向代理（reverse proxy）方式是指用代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络中的上游服务器，并将从上游服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外的表现就是一个Web服务器。<br>这里，我是在本机搭建，通过修改host来模拟多个域名访问本机的nginx。</p>
<h4 id="1、修改hosts文件"><a href="#1、修改hosts文件" class="headerlink" title="1、修改hosts文件"></a>1、修改hosts文件</h4><p>$ vim /etc/hosts<br>在内部添加域名解析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 pinger.com www.pinger.com</div><div class="line">127.0.0.1 test.com www.test.com</div><div class="line">127.0.0.1 chungui.com www.chungui.com</div></pre></td></tr></table></figure>
<h4 id="2、修改nginx配置文件"><a href="#2、修改nginx配置文件" class="headerlink" title="2、修改nginx配置文件"></a>2、修改nginx配置文件</h4><p>$ sudo vim /usr/local/etc/nginx/nginx.conf<br>在后面添加server模块，内部通过<code>proxy_pass</code>设置反向代理</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen  80;</div><div class="line">    server_name  *.pinger.com pinger.com;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://www.baidu.com;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name *.chungui.com chungui.com;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://www.renren.com;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name test.com;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://www.zhihu.com;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，server_name可以指向多个域名值</p>
<h4 id="3、重启nginx服务"><a href="#3、重启nginx服务" class="headerlink" title="3、重启nginx服务"></a>3、重启nginx服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#重启服务</div><div class="line">$ sudo nginx -s reload</div></pre></td></tr></table></figure>
<p>这时，反向代理已经搭建成功。你可以在本地通过<code>chungui.com</code>访问到人人网，<code>test.com</code>访问到知乎。不过，设置<code>pinger.com</code>访问的<code>http://www.baidu.com</code>站点，而百度服务器内部会自动跳转到<code>https://www.baidu.com</code>站点，所以我们通过<code>pinger.com</code>会跳转到<code>https://www.baidu.com</code>，这个时候我们可以将百度的替换成https就行了，修改配置如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  *.pinger.com pinger.com;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass https://www.baidu.com;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候，再使用<code>pinger.com</code>在浏览器里访问时就不会出现跳转的问题了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://manual.51yip.com/nginx/" target="_blank" rel="external">Nginx中文参考手册,教程</a><br><a href="http://blog.csdn.net/dracotianlong/article/details/21817097" target="_blank" rel="external">mac 安装 nginx 环境</a><br><a href="http://segmentfault.com/a/1190000002963355" target="_blank" rel="external">Mac OS使用brew安装Nginx、MySQL、PHP-FPM的LAMP开发环境</a>     </p>
]]></content>
    
    <summary type="html">
    
      Mac环境下Nginx实现反向代理
    
    </summary>
    
      <category term="web" scheme="http://www.liuchungui.com/categories/web/"/>
    
    
      <category term="Mac环境下安装Nginx" scheme="http://www.liuchungui.com/tags/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85Nginx/"/>
    
      <category term="Nginx" scheme="http://www.liuchungui.com/tags/Nginx/"/>
    
      <category term="反向代理" scheme="http://www.liuchungui.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="Nginx反向代理" scheme="http://www.liuchungui.com/tags/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="Mac" scheme="http://www.liuchungui.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods创建私有Pods</title>
    <link href="http://www.liuchungui.com/2015/10/19/cocoapodschuang-jian-si-you-pods/"/>
    <id>http://www.liuchungui.com/2015/10/19/cocoapodschuang-jian-si-you-pods/</id>
    <published>2015-10-19T13:54:54.000Z</published>
    <updated>2016-10-03T09:37:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>创建Pod私有源步骤：<br>1、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件<br>2、添加私有的repo到CocoaPods<br>3、制作Podspec，并且推送到你创建的私有repo<br>4、使用Pod，在Podfile添加私有源来搭建项目<br><a id="more"></a> </p>
<h2 id="一、创建两个git仓库，一个用来做私有的Spec-Repo，一个是我们自己的公共组件"><a href="#一、创建两个git仓库，一个用来做私有的Spec-Repo，一个是我们自己的公共组件" class="headerlink" title="一、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件"></a>一、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件</h2><p>在这一步当中需要git服务器用来创建仓库，我这里只是作为一个例子，所以直接使用github来当做我的服务器，我创建的这些项目都是public的。你如果是练手的话，也可以仿照我一样在github上面创建仓库。如果是为公司建立私有的公共组件库，你可以在github等平台上面创建私有仓库，或者直接搭建一个git服务器来创建仓库。搭建服务器可以参考<a href="http://www.liuchungui.com/blog/2015/10/23/gitzong-jie/">Git简单总结</a>的第一部分，里面有Mac搭建也有Linux搭建的链接。<br>在这里，我们需要搭建两个git仓库。<br>第一个仓库名称是<a href="https://github.com/liuchungui/first.git" target="_blank" rel="external">first</a>，专门用来做私有Spec Repo。<br>第二个仓库名称是<a href="https://github.com/liuchungui/BGNetwork" target="_blank" rel="external">BGNetwork</a>，这个就是我们公共组件库。<br>在这里，我们来说一下什么是Spec Repo?</p>
<blockquote>
<p>他是所有的Pods的一个索引，就是一个容器，所有公开的Pods都在这个里面，他实际是一个Git仓库remote端。<br>在GitHub上，当你使用了Cocoapods后他会被clone到本地的~/.cocoapods/repos目录下，可以进入到这个目录看到master文件夹就是这个官方的Spec Repo了。</p>
</blockquote>
<p>这里引用了<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/" target="_blank" rel="external">使用Cocoapods创建私有podspec</a>的内容。</p>
<h2 id="二、添加私有的repo到CocoaPods"><a href="#二、添加私有的repo到CocoaPods" class="headerlink" title="二、添加私有的repo到CocoaPods"></a>二、添加私有的repo到CocoaPods</h2><p>主要命令是<code>pod repo add REPO_NAME SOURCE_URL</code>。其中，REPO_NAME是私有repo的名字，取一个容易记住的名字，后面还会用到，以后公司内部的组件对应的podspec都可以推送到这个repo中；SOURCE_URL就是刚刚我们创建的<code>first</code>仓库链接。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pod repo add liuchungui https://github.com/liuchungui/first.git</div><div class="line">$ ls ~/.cocoapods/repos  </div><div class="line">liuchungui	master</div></pre></td></tr></table></figure>
<p>这时，你会发现有两个文件夹<code>liuchungui</code>和<code>master</code>，master是Cocoapods官方的repo，而liuchungui就是我刚刚创建的。进入liuchungui文件夹查看，你会发现它是clone了一份<code>https://github.com/liuchungui/first.git</code>。<br>在这里，我们是一个空的仓库，可以不检查，但是你的仓库如果有什么其他东西的话，可以检查一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.cocoapods/repos/liuchungui</div><div class="line">$ pod repo lint .</div></pre></td></tr></table></figure>
<h2 id="三、制作Podspec，并且推送到你创建的私有repo"><a href="#三、制作Podspec，并且推送到你创建的私有repo" class="headerlink" title="三、制作Podspec，并且推送到你创建的私有repo"></a>三、制作Podspec，并且推送到你创建的私有repo</h2><h4 id="1、将我们前面创建的BGNetwork项目克隆到本地"><a href="#1、将我们前面创建的BGNetwork项目克隆到本地" class="headerlink" title="1、将我们前面创建的BGNetwork项目克隆到本地"></a>1、将我们前面创建的BGNetwork项目克隆到本地</h4><p><code>git clone https://github.com/liuchungui/BGNetwork.git</code>     </p>
<h4 id="2、在本地我们使用了xcode创建了项目，并且写了一个网络框架，运行没有问题，我们准备提交到github，并打上版本号。"><a href="#2、在本地我们使用了xcode创建了项目，并且写了一个网络框架，运行没有问题，我们准备提交到github，并打上版本号。" class="headerlink" title="2、在本地我们使用了xcode创建了项目，并且写了一个网络框架，运行没有问题，我们准备提交到github，并打上版本号。"></a>2、在本地我们使用了xcode创建了项目，并且写了一个网络框架，运行没有问题，我们准备提交到github，并打上版本号。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &apos;add file&apos;</div><div class="line">git push origin master</div><div class="line">git tag -m &apos;add tag&apos; &apos;0.1.1&apos;</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<h4 id="3、我们开始制作Podspec文件。"><a href="#3、我们开始制作Podspec文件。" class="headerlink" title="3、我们开始制作Podspec文件。"></a>3、我们开始制作Podspec文件。</h4><p><code>BGNetwork</code>是一个基于<code>AFNetworking</code>而封装的网络框架，它主要的源文件都在<code>BGNetwork/BGNetwork</code>路径下。我们将它放在CocoaPods给第三方使用，主要是将这个文件夹下的源文件加载到第三方的项目中以供使用。<br>下面是供第三方使用的源文件结构，具体可以下载<a href="https://github.com/liuchungui/BGNetwork" target="_blank" rel="external">BGNetwork</a>代码查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">____BGNetwork</div><div class="line">| |____BGAFHTTPClient.h</div><div class="line">| |____BGAFHTTPClient.m</div><div class="line">| |____BGAFRequestSerializer.h</div><div class="line">| |____BGAFRequestSerializer.m</div><div class="line">| |____BGAFResponseSerializer.h</div><div class="line">| |____BGAFResponseSerializer.m</div><div class="line">| |____BGNetworkCache.h</div><div class="line">| |____BGNetworkCache.m</div><div class="line">| |____BGNetworkConfiguration.h</div><div class="line">| |____BGNetworkConfiguration.m</div><div class="line">| |____BGNetworkConnector.h</div><div class="line">| |____BGNetworkConnector.m</div><div class="line">| |____BGNetworkManager.h</div><div class="line">| |____BGNetworkManager.m</div><div class="line">| |____BGNetworkRequest.h</div><div class="line">| |____BGNetworkRequest.m</div><div class="line">| |____BGNetworkUtil.h</div><div class="line">| |____BGNetworkUtil.m</div></pre></td></tr></table></figure>
<p>在BGNetwork项目的根目录下创建一个BGNetwork.podspec文件，对应上面的需求，我们的podspec可以这么写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |spec|</div><div class="line">  #项目名称</div><div class="line">  spec.name         = &apos;BGNetwork&apos;</div><div class="line">  #版本号</div><div class="line">  spec.version      = &apos;0.1.1&apos;</div><div class="line">  #开源协议</div><div class="line">  spec.license      = &apos;MIT&apos;</div><div class="line">  #对开源项目的描述</div><div class="line">  spec.summary      = &apos;BGNetwork is a request util based on AFNetworking&apos;</div><div class="line">  #开源项目的首页</div><div class="line">  spec.homepage     = &apos;https://github.com/chunguiLiu/BGNetwork&apos;</div><div class="line">  #作者信息</div><div class="line">  spec.author       = &#123;&apos;chunguiLiu&apos; =&gt; &apos;chunguiLiu@126.com&apos;&#125;</div><div class="line">  #项目的源和版本号</div><div class="line">  spec.source       = &#123; :git =&gt; &apos;https://github.com/chunguiLiu/BGNetwork.git&apos;, :tag =&gt; &apos;0.1.1&apos; &#125;</div><div class="line">  #源文件，这个就是供第三方使用的源文件</div><div class="line">  spec.source_files = &quot;BGNetwork/*&quot;</div><div class="line">  #适用于ios7及以上版本</div><div class="line">  spec.platform     = :ios, &apos;7.0&apos;</div><div class="line">  #使用的是ARC</div><div class="line">  spec.requires_arc = true</div><div class="line">  #依赖AFNetworking2.0</div><div class="line">  spec.dependency &apos;AFNetworking&apos;, &apos;~&gt; 2.0&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>spec.source源是<code>BGNetwork</code>的git仓库，版本号是我们上一步打上的版本号0.1.1。</p>
<h4 id="4、验证并推送到服务器"><a href="#4、验证并推送到服务器" class="headerlink" title="4、验证并推送到服务器"></a>4、验证并推送到服务器</h4><p>在推送前，我们先验证Podspec，验证的时候是验证BGNetwork.podspec文件，所以我们需要保证进入的目录和BGNetwork.podspec同级的，验证命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib lint</div></pre></td></tr></table></figure></p>
<p>注意：验证的时候，会获取<code>BGNetwork.podspec</code>文件中的<code>spec.source</code>来获取git服务器上面对应版本的代码，然后再找到<code>spec.source_files</code>中的源代码，通过xcode命令行工具建立工程并且进行编译。所以这一步的过程会比较久，如果编译没有错误，就验证通过。    </p>
<p>如果没有错误和警告我们就可以推送到服务器了，推送使用的命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo push REPO_NAME SPEC_NAME.podspec</div></pre></td></tr></table></figure></p>
<p>它也会先验证，然后再推送。我这里推送BGNetwork命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo push liuchungui BGNetwork.podspec</div></pre></td></tr></table></figure></p>
<p>如果没有错误，但是有警告，我们就将警告解决，也可以加<code>--allow-warnings</code>来提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo push liuchungui BGNetwork.podspec --allow-warnings</div></pre></td></tr></table></figure></p>
<p>如果有错误，我们可以去查看错误信息对应下的Note信息并解决。在这错误当中，常常会遇到找不到对应文件的错误，这个时候你需要查看<code>BGNetwork.podspec</code>文件中<code>spec.source</code>下git仓库链接是否没问题，git仓库下对应的tag版本中<code>spec.source_files</code>路径下是否正确。   </p>
<p>如果查看Note信息看不出什么问题，可以加上<code>verbose</code>参数进行更详细的查看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod repo push liuchungui BGNetwork.podspec --allow-warnings --verbose</div></pre></td></tr></table></figure>
<p><strong>注意事项：碰到本地使用<code>pod lib lint</code>验证通过，但是push到服务器却失败了，这个时候很可能就是服务器tag版本不对，使用<code>--verbose</code>能查看详细的错误信息。</strong></p>
<h4 id="5、搜索我们的框架"><a href="#5、搜索我们的框架" class="headerlink" title="5、搜索我们的框架"></a>5、搜索我们的框架</h4><p>到这一步，我们就可以通过<code>pod search BGNetwork</code>来搜索了，搜索到了说明我们私有源建立成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ pod search BGNetwork</div><div class="line">-&gt; BGNetwork (0.1.2)</div><div class="line">   BGNetwork is a request util based on AFNetworking</div><div class="line">   pod &apos;BGNetwork&apos;, &apos;~&gt; 0.1.2&apos;</div><div class="line">   Homepage: https://github.com/chunguiLiu/BGNetwork</div><div class="line">   Source:   https://github.com/chunguiLiu/BGNetwork.git</div><div class="line">   Versions: 0.1.1, 0.1.0 [liuchungui repo] - 0.1.2, 0.1.1 [master repo]</div></pre></td></tr></table></figure>
<p>由上面的搜索知道，BGNetwork在liuchungui这个私有repo中存在0.1.1和0.1.0版本，在master中存在0.1.2和0.1.1版本。<br>搜索成功之后，我们将BGNetwork.podspec也推送到远程服务器。</p>
<h2 id="四、使用Pod，在Podfile添加私有源来搭建项目"><a href="#四、使用Pod，在Podfile添加私有源来搭建项目" class="headerlink" title="四、使用Pod，在Podfile添加私有源来搭建项目"></a>四、使用Pod，在Podfile添加私有源来搭建项目</h2><p>使用时，在Podfile文件中添加<strong>本地私有源和官方源</strong>。如果没有添加本地私有源，它默认是用官方的repo，这样找不到本地的Pod；如果只是设置了本地私有源，就不会再去官方源中查找。<br> 下面是Podfile内容</p>
   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#官方Cocoapods的源</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class="line">#本地私有源</div><div class="line">source &apos;https://github.com/liuchungui/first.git&apos;</div><div class="line">platform :ios, &apos;7.0&apos;</div><div class="line">pod &apos;BGNetwork&apos;, &apos;~&gt; 0.1.1&apos;</div></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、途中遇到了几次问题，就是<code>pod repo push</code>不上去，显示没有找到对应文件，后来发现是版本的问题，没有打上版本号或者<code>Podspec</code>中版本错了。所以我们在维护一个框架时，修改框架之后，push到git服务器之后先打上tag，然后再修改podspec文件中的版本，最后push到对应的pod repo中。如果你遇到这个问题，可以详细查看<strong>第三步中的验证并推送到服务器</strong>这一节。</p>
<p>2、若是在框架当中，存在不同的文件夹，请使用<code>subspec</code>。如果不同文件夹之间的文件有相互导入的情况，请将被导入的头文件设置为<code>public_header_files</code>，并且通过<code>dependency</code>设置依赖，具体可以参考<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec" target="_blank" rel="external">AFNetworking的podspec</a>文件。</p>
<p>3、若是需要提交给官方，请使用 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">pod trunk register youremail</div><div class="line">查看信息</div><div class="line">pod trunk me</div><div class="line">将对应的pod推送到服务器</div><div class="line">pod trunk push BGNetwork.podspec</div></pre></td></tr></table></figure>
<p>4、使用<code>pod install</code>时，它首先会更新整个官方的源，而Cocoapods每天都有很多人提交，所以更新比较慢。所以，建议每过一段时间更新一下官方库，平常的时候，咱们可以在<code>install</code>或<code>update</code>加一个参数<code>--no-repo-update</code>让它不用更新。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pod install --verbose --no-repo-update</div><div class="line">$ pod update --verbose --no-repo-update</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://guides.cocoapods.org/making/private-cocoapods.html" target="_blank" rel="external">Private Pods</a><br><a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/" target="_blank" rel="external">使用Cocoapods创建私有podspec</a><br><a href="http://blog.csdn.net/wzzvictory/article/details/18737437?utm_source=tuicool" target="_blank" rel="external">CocoaPods详解之—-使用篇</a>    </p>
<h2 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h2><ul>
<li>2015.10.19 发布，中途修改过几次</li>
<li>2016.4.11 修改了第三部中的验证并推送到服务器内容</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;创建Pod私有源步骤：&lt;br&gt;1、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件&lt;br&gt;2、添加私有的repo到CocoaPods&lt;br&gt;3、制作Podspec，并且推送到你创建的私有repo&lt;br&gt;4、使用Pod，在Podfile添加私有源来搭建项目&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://www.liuchungui.com/categories/iOS/"/>
    
    
      <category term="cocoapods" scheme="http://www.liuchungui.com/tags/cocoapods/"/>
    
      <category term="private pods" scheme="http://www.liuchungui.com/tags/private-pods/"/>
    
      <category term="cocoapods私有源" scheme="http://www.liuchungui.com/tags/cocoapods%E7%A7%81%E6%9C%89%E6%BA%90/"/>
    
  </entry>
  
</feed>
