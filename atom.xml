<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[liuchungui's Blog]]></title>
  <link href="http://www.liuchungui.com/atom.xml" rel="self"/>
  <link href="http://www.liuchungui.com/"/>
  <updated>2016-03-15T00:05:35+08:00</updated>
  <id>http://www.liuchungui.com/</id>
  <author>
    <name><![CDATA[刘春桂]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Runtime之类与对象总结]]></title>
    <link href="http://www.liuchungui.com/blog/2016/03/14/runtimezhi-lei-yu-dui-xiang-zong-jie/"/>
    <updated>2016-03-14T23:30:27+08:00</updated>
    <id>http://www.liuchungui.com/blog/2016/03/14/runtimezhi-lei-yu-dui-xiang-zong-jie</id>
    <content type="html"><![CDATA[<p>以前在使用<a href="https://github.com/elado/jastor">jastor</a>解析Json成model的时候里面涉及到了Runtime里面的知识，所以专门看了<a href="http://blog.jobbole.com/79566/">Objective-C Runtime 运行时之一到六</a>这一系列的文章，整个Jastor也就懂了，现在非常出名的框架<a href="https://github.com/Mantle/Mantle">Mantle</a>，<a href="https://github.com/icanzilb/JSONModel">JSONModel</a>也都是差不多的原理。但是，一年之后的今天重新再看的时候，发现大概思路知道，但是具体的一些细节实现需要写的时候，却一时上不了手，所以重新看了<a href="http://blog.jobbole.com/79566/">Objective-C Runtime 运行时</a>一系列，然后整理了一下，细节部分附上一些代码，方便以后查找。</p>

<!-- more -->


<h2>一、对象、类、元类之间的关系</h2>

<ul>
<li>每个对象是一个objc_object结构体，此结构体只有一个元素即指向其类的isa指针，isa指针的类型为Class。(Class的结构体后面有）</li>
<li>每个类也是一个对象，它的isa指针指向它的元类(meta class)，一般元类都是唯一的。</li>
<li>每个元类也是一个对象，它的isa指针指向NSObject的元类，而NSObject的元类指向它本身（即NSObject元类）</li>
<li>而每个类的super class都指向它的父类，直至NSObject，NSObject的super class为null。</li>
<li>每个元类的super class都指向它的父元类，直至NSObject元类。NSObject元类的父元类是NSObject，NSObject的父类是nil。</li>
</ul>


<p>注：上面使用代码测试过，主要使用object_getClass、class_getSuperClass和objc_getMetaClass来获取类、父类、元类，然后打印指针进行查看。</p>

<h2>二、类与对象基础数据结构</h2>

<p>Objective-C类是由Class类型来表示的，它实际上是一个指向objc_class结构体的指针，它的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">objc_class</span> <span class="o">*</span><span class="kt">Class</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看objc/runtime.h中objc_class结构体的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">struct</span> <span class="n">objc_class</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">isa</span>  <span class="n">OBJC_ISA_AVAILABILITY</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if !__OBJC2__</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">super_class</span>                       <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 父类</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span>                        <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 类名</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">version</span>                            <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 类的版本信息，默认为0</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">info</span>                               <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 类信息，供运行期使用的一些位标识</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">instance_size</span>                      <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 该类的实例变量大小</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">objc_ivar_list</span> <span class="o">*</span><span class="n">ivars</span>            <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 该类的成员变量链表</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">objc_method_list</span> <span class="o">**</span><span class="n">methodLists</span>   <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 方法定义的链表</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">objc_cache</span> <span class="o">*</span><span class="n">cache</span>                <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 方法缓存</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">objc_protocol_list</span> <span class="o">*</span><span class="n">protocols</span>    <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>  <span class="c1">// 协议链表</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="n">OBJC2_UNAVAILABLE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三、调用方法时的流程</h2>

<p>首先到当前对象所属的类中的方法缓存列表中查找这个方法，如果没有则到该类的方法定义链表中查找方法，如果查找到，则执行这个方法将返回值返回给原调用对象，并且将这个方法加入缓存cache当中；如果没有查找到则通过super_class找到它的父类，到它的父类中查找。</p>

<p>想了解更多Runtime方法调用知识，请看<a href="http://blog.jobbole.com/79574/">Objective-C Runtime 运行时之三：方法与消息</a></p>

<h2>四、类与对象的操作函数</h2>

<p>runtime提供了大量的函数来操作类与对象，操作类的函数一般前缀是class，而操作对象的函数一般前缀是objc。</p>

<h4>1、类相关操作函数</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取类的类名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">class_getName</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// 获取类的父类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">class_getSuperclass</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 判断给定的Class是否是一个元类</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="nf">class_isMetaClass</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// 获取实例大小</span>
</span><span class='line'><span class="kt">size_t</span> <span class="nf">class_getInstanceSize</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2、成员变量相关操作函数</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取类中指定名称实例成员变量的信息</span>
</span><span class='line'><span class="n">Ivar</span> <span class="nf">class_getInstanceVariable</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取类成员变量的信息</span>
</span><span class='line'><span class="n">Ivar</span> <span class="nf">class_getClassVariable</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 添加成员变量</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="nf">class_addIvar</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">alignment</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取整个成员变量列表</span>
</span><span class='line'><span class="n">Ivar</span> <span class="o">*</span> <span class="nf">class_copyIvarList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意：</p>

<ul>
<li>class_copyIvarList：获取的是所有成员实例属性，与property获取不一样。</li>
<li>class_addIvar: <strong>OC不支持往已存在的类中添加实例变量</strong>，因此不管是系统库提供的类，还是我们自定义的类，都无法动态给它添加成员变量。<strong>但，如果是我们通过运行时来创建的类，我们可以使用class_addIvar来添加。不过，需要注意的是，这个方法只能在objc_allocateClassPair函数与objc_registerClassPair之间调用。</strong>另外，<strong>这个类也不能是元类</strong>。</li>
</ul>


<p>代码测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> *  测试成员变量</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testIvar</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">outCount</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">class_addIvar</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="s">&quot;_hell&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">id</span><span class="p">),</span> <span class="n">log2</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">id</span><span class="p">)),</span> <span class="s">&quot;@&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Add Ivar Success!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Add Ivar failed!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">Ivar</span> <span class="o">*</span><span class="n">ivarList</span> <span class="o">=</span> <span class="n">class_copyIvarList</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Ivar</span> <span class="n">ivar</span> <span class="o">=</span> <span class="n">ivarList</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ivarName</span> <span class="o">=</span> <span class="n">ivar_getName</span><span class="p">(</span><span class="n">ivar</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">ptrdiff_t</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">ivar_getOffset</span><span class="p">(</span><span class="n">ivar</span><span class="p">);</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">types</span> <span class="o">=</span> <span class="n">ivar_getTypeEncoding</span><span class="p">(</span><span class="n">ivar</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;ivar:%s, offset:%zd, type:%s&quot;</span><span class="p">,</span> <span class="n">ivarName</span><span class="p">,</span> <span class="n">offset</span><span class="p">,</span> <span class="n">types</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">ivarList</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：class_addIvar中第三个参数设置类型的大小，第四个参数设置对齐，对齐传递log2(size)，具体原因参考：<a href="http://stackoverflow.com/questions/33184826/what-does-class-addivars-alignment-do-in-objective-c">http://stackoverflow.com/questions/33184826/what-does-class-addivars-alignment-do-in-objective-c</a></p>

<h4>3、属性操作函数</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取指定的属性</span>
</span><span class='line'><span class="kt">objc_property_t</span> <span class="nf">class_getProperty</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取属性列表</span>
</span><span class='line'><span class="kt">objc_property_t</span> <span class="o">*</span> <span class="nf">class_copyPropertyList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 为类添加属性</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="nf">class_addProperty</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">objc_property_attribute_t</span> <span class="o">*</span><span class="n">attributes</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">attributeCount</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 替换类的属性</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">class_replaceProperty</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="k">const</span> <span class="kt">objc_property_attribute_t</span> <span class="o">*</span><span class="n">attributes</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">attributeCount</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这一种方法也是针对ivar来操作的，不过它只操作那些property的值，包括扩展中的property。</p>

<p>代码实践：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testProperty</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *  添加property</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">objc_property_attribute_t</span> <span class="n">attribute1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;T&quot;</span><span class="p">,</span> <span class="s">&quot;@</span><span class="se">\&quot;</span><span class="s">NSString</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">objc_property_attribute_t</span> <span class="n">attribute2</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">objc_property_attribute_t</span> <span class="n">attribute3</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;N&quot;</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">objc_property_attribute_t</span> <span class="n">attribute4</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;V&quot;</span><span class="p">,</span> <span class="s">&quot;_lcg&quot;</span><span class="p">};</span>
</span><span class='line'>    <span class="kt">objc_property_attribute_t</span> <span class="n">attributesList</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="n">attribute1</span><span class="p">,</span> <span class="n">attribute2</span><span class="p">,</span> <span class="n">attribute3</span><span class="p">,</span> <span class="n">attribute4</span><span class="p">};</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">class_addProperty</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="s">&quot;lcg&quot;</span><span class="p">,</span> <span class="n">attributesList</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;add property success!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;add property failure!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *  打印property的name和property_attribute_t</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">outCount</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">objc_property_t</span> <span class="o">*</span><span class="n">propertyList</span> <span class="o">=</span> <span class="n">class_copyPropertyList</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">objc_property_t</span> <span class="n">property</span> <span class="o">=</span> <span class="n">propertyList</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">propertyName</span> <span class="o">=</span> <span class="n">property_getName</span><span class="p">(</span><span class="n">property</span><span class="p">);</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">attribute</span> <span class="o">=</span> <span class="n">property_getAttributes</span><span class="p">(</span><span class="n">property</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;propertyName: %s, attribute: %s&quot;</span><span class="p">,</span> <span class="n">propertyName</span><span class="p">,</span> <span class="n">attribute</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">attributeCount</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">objc_property_attribute_t</span> <span class="o">*</span><span class="n">attributeList</span> <span class="o">=</span> <span class="n">property_copyAttributeList</span><span class="p">(</span><span class="n">property</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">attributeCount</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">attributeCount</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">objc_property_attribute_t</span> <span class="n">attribute</span> <span class="o">=</span> <span class="n">attributeList</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>            <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">attribute</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span><span class='line'>            <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">attribute</span><span class="p">.</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;attribute name: %s, value: %s&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码有几个知识点需要说一下：</p>

<p>(1) 其中property_attribute的相关内容需要说明下。</p>

<p>   property_attribute为<strong>T@&ldquo;NSString&rdquo;,&amp;,N,V_exprice</strong>时：</p>

<ul>
<li><strong>T</strong> 是固定的，放在第一个</li>
<li><strong>@&ldquo;NSString&rdquo;</strong> 代表这个property是一个字符串对象</li>
<li><strong>&amp;</strong> 代表强引用，其中与之并列的是：'C'代表Copy，'&amp;&lsquo;代表强引用，'W'表示weak，assign为空，默认为assign。</li>
<li><strong>N</strong> 区分的nonatomic和atomic，默认为atomic，atomic为空，'N'代表是nonatomic</li>
<li><strong>V_exprice</strong> V代表变量，后面紧跟着的是成员变量名，代表这个property的成员变量名为_exprice。</li>
</ul>


<p> property_attribute为<strong>T@&ldquo;NSNumber&rdquo;,R,N,V_yearsOld</strong>时：</p>

<ul>
<li><strong>T</strong> 是固定的，放在第一个</li>
<li><strong>@&ldquo;NSNumber&rdquo;</strong> 代表这个property是一个NSNumber对象</li>
<li><strong>R</strong> 代表readOnly属性，readwrite时为空</li>
<li><strong>N</strong> 区分的nonatomic和atomic，默认为atomic，atomic为空，'N'代表是nonatomic</li>
<li><strong>V_yearsOld</strong> V代表变量，后面紧跟着的是成员变量名，代表这个property的成员变量名为_yearsOld。</li>
</ul>


<p>使用例子参考：<a href="http://www.tuicool.com/articles/aY3Ujii">http://www.tuicool.com/articles/aY3Ujii</a>  <br/>
官方参考：<a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW6">Property Type</a></p>

<p>（2） 添加property，property_attribute_t是一个结构体，没有具体创建的方法，我们就只能使用{}这样结构体直接赋值过去。而且，添加property成功之后，它并不会生成<strong>实例属性、setter方法和getter方法</strong>。如果要真正调用的话，还需要我们自己添加对应的setter和getter方法。  <br/>
详情使用请见：<a href="http://blog.csdn.net/meegomeego/article/details/18356169">http://blog.csdn.net/meegomeego/article/details/18356169</a></p>

<h4>4、协议相关函数</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 添加协议</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="nf">class_addProtocol</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="n">Protocol</span> <span class="o">*</span><span class="n">protocol</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回类是否实现指定的协议</span>
</span><span class='line'><span class="kt">BOOL</span> <span class="nf">class_conformsToProtocol</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="n">Protocol</span> <span class="o">*</span><span class="n">protocol</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回类实现的协议列表</span>
</span><span class='line'><span class="n">Protocol</span> <span class="o">*</span> <span class="nf">class_copyProtocolList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码实践：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testProtocolList</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//添加协议</span>
</span><span class='line'>    <span class="n">Protocol</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">@</span><span class="n">protocol</span><span class="p">(</span><span class="n">StudentDataSource</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">class_addProtocol</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;添加协议成功!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;添加协议失败!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//判断是否实现了指定的协议</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">class_conformsToProtocol</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="n">p</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;遵循 %s协议&quot;</span><span class="p">,</span> <span class="n">protocol_getName</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;不遵循 %s协议&quot;</span><span class="p">,</span> <span class="n">protocol_getName</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//获取类的协议列表</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">outCount</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Protocol</span> <span class="o">*</span> <span class="n">__unsafe_unretained</span> <span class="o">*</span><span class="n">protocolList</span> <span class="o">=</span> <span class="n">class_copyProtocolList</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Protocol</span> <span class="o">*</span><span class="n">protocol</span> <span class="o">=</span> <span class="n">protocolList</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">protocol_getName</span><span class="p">(</span><span class="n">protocol</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%s&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">protocolList</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：可以使用runtime添加协议</strong></p>

<h4>6、版本号（Version)</h4>

<p>版本的使用两个方法，获取版本和设置版本，请看代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testVersion</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">version</span> <span class="o">=</span> <span class="n">class_getVersion</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">);</span>
</span><span class='line'>    <span class="n">class_setVersion</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">],</span> <span class="mi">100</span><span class="p">);</span>
</span><span class='line'>    <span class="n">version</span> <span class="o">=</span> <span class="n">class_getVersion</span><span class="p">([</span><span class="n">Student</span> <span class="k">class</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="n">version</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>五、动态创建类和对象</h2>

<h4>1、动态创建类</h4>

<p>涉及以下函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 创建一个新类和元类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_allocateClassPair</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">superclass</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">extraBytes</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 销毁一个类及其相关联的类</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">objc_disposeClassPair</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在应用中注册由objc_allocateClassPair创建的类</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">objc_registerClassPair</span> <span class="p">(</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：objc_disposeClassPair只能销毁由objc_allocateClassPair创建的类，当有实例存在或者它的子类存在时，调用这个函数会抛出异常。</p>

<p>代码实践：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testCreateClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">objc_allocateClassPair</span><span class="p">([</span><span class="n">Person</span> <span class="k">class</span><span class="p">],</span> <span class="s">&quot;Teacher&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">//添加成员变量，只能在运行时创建类添加，并且是在objc_allocateClassPair与objc_registerClassPair之间</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">class_addIvar</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="s">&quot;_level&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">id</span><span class="p">),</span> <span class="n">log2</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">id</span><span class="p">)),</span> <span class="s">&quot;@</span><span class="se">\&quot;</span><span class="s">NSString</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;添加_level成员变量成功&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;添加_level成员变量失败&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">objc_registerClassPair</span><span class="p">(</span><span class="n">cls</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *  当有实例存在不能销毁类，所以讲代码放到里面</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">//创建对象</span>
</span><span class='line'>        <span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">cls</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="k">class</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p</span> <span class="n">printInfo</span><span class="p">];</span>
</span><span class='line'>        <span class="c1">//设置值</span>
</span><span class='line'>        <span class="p">[</span><span class="n">p</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;高级讲师&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;level&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSString</span> <span class="o">*</span><span class="n">level</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;level&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;level: %@&quot;</span><span class="p">,</span> <span class="n">level</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//销毁类，当有实例存在的时候是不能销毁类</span>
</span><span class='line'>    <span class="n">objc_disposeClassPair</span><span class="p">(</span><span class="n">cls</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>六、实例操作函数</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 返回指定对象的一份拷贝</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">object_copy</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 释放指定对象占用的内存</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">object_dispose</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// 修改类实例的实例变量的值</span>
</span><span class='line'><span class="n">Ivar</span> <span class="nf">object_setInstanceVariable</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">value</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 获取对象实例变量的值</span>
</span><span class='line'><span class="n">Ivar</span> <span class="nf">object_getInstanceVariable</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="kt">void</span> <span class="o">**</span><span class="n">outValue</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回指向给定对象分配的任何额外字节的指针</span>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span> <span class="nf">object_getIndexedIvars</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回对象中实例变量的值</span>
</span><span class='line'><span class="kt">id</span> <span class="nf">object_getIvar</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">Ivar</span> <span class="n">ivar</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置对象中实例变量的值</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">object_setIvar</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="n">Ivar</span> <span class="n">ivar</span><span class="p">,</span> <span class="kt">id</span> <span class="n">value</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// 返回给定对象的类名</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="nf">object_getClassName</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回对象的类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">object_getClass</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 设置对象的类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">object_setClass</span> <span class="p">(</span> <span class="kt">id</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">Class</span> <span class="n">cls</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>实践代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testInstance</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">Person</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">new</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//object_copy在ARC下不能使用</span>
</span><span class='line'><span class="c1">//    p = object_copy(p, class_getInstanceSize([Student class]));</span>
</span><span class='line'>    <span class="c1">//将p的isa指向Student</span>
</span><span class='line'>    <span class="n">object_setClass</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="p">[</span><span class="n">Student</span> <span class="k">class</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">[(</span><span class="n">Student</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span> <span class="nl">setName</span><span class="p">:</span><span class="s">@&quot;Jack&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里只是简单的将p这个对象的class设置为Student类，其实就是将p对象的isa指针指向Student类，KVO中的isa-swizzling其实就是这样干的。当调用setName:的方法的时候，就调用到了Student类中的setName。不过，这里调用Person类没有，而Student类有的方法会崩溃，报错Heap buffer overflow，就算是在非ARC下使用object_copy也是一样。</p>

<h2>七、获取类的定义</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 获取已注册的类定义的列表</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">objc_getClassList</span> <span class="p">(</span> <span class="kt">Class</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">bufferCount</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 创建并返回一个指向所有已注册类的指针列表</span>
</span><span class='line'><span class="kt">Class</span> <span class="o">*</span> <span class="nf">objc_copyClassList</span> <span class="p">(</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="o">*</span><span class="n">outCount</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回指定类的类定义</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_lookUpClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_getClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_getRequiredClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 返回指定类的元类</span>
</span><span class='line'><span class="kt">Class</span> <span class="nf">objc_getMetaClass</span> <span class="p">(</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>objc_getClassList和objc_copyClassList都是获取所有已注册的类；而objc_lookUpClass获取指定的类，如果没有注册则返回nil；objc_getRequiredClass也是获取指定的类，不过如果这个类不存则，则会崩溃；objc_getMetaClass专门用来获取类的元类，每个类都有一个有效并且唯一的元类，如果这个类没有注册则返回nil。</p>

<p>代码实践：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">testGetClass</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *  第一种获取所有注册的类</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="o">*</span><span class="n">bufferClass</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">numClasses</span><span class="p">;</span>
</span><span class='line'>    <span class="n">numClasses</span> <span class="o">=</span> <span class="n">objc_getClassList</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">numClasses</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">bufferClass</span> <span class="o">=</span> <span class="p">(</span><span class="kt">Class</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">Class</span><span class="p">)</span><span class="o">*</span><span class="n">numClasses</span><span class="p">);</span>
</span><span class='line'>        <span class="n">numClasses</span> <span class="o">=</span> <span class="n">objc_getClassList</span><span class="p">(</span><span class="n">bufferClass</span><span class="p">,</span> <span class="n">numClasses</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;numer of classes: %d&quot;</span><span class="p">,</span> <span class="n">numClasses</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">numClasses</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">bufferClass</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;class name: %s&quot;</span><span class="p">,</span> <span class="n">class_getName</span><span class="p">(</span><span class="n">cls</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">bufferClass</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     *  第二种获取所有注册的类</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">outCount</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">Class</span> <span class="o">*</span><span class="n">classLiset</span> <span class="o">=</span> <span class="n">objc_copyClassList</span><span class="p">(</span><span class="o">&amp;</span><span class="n">outCount</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">outCount</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">Class</span> <span class="n">cls</span> <span class="o">=</span> <span class="n">classLiset</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;class name: %s&quot;</span><span class="p">,</span> <span class="n">class_getName</span><span class="p">(</span><span class="n">cls</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">classLiset</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种获取所有注册的类比第一种简单多了，建议使用第二种。</p>

<h2>参考</h2>

<p><a href="http://blog.jobbole.com/79566/">Objective-C Runtime 运行时之一：类与对象</a></p>

<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Type Encodings</a></p>

<p><a href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtPropertyIntrospection.html#//apple_ref/doc/uid/TP40008048-CH101-SW6">Property Type</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BGSession一个基于NSUserDefaults实现的轻量级本地数据存储]]></title>
    <link href="http://www.liuchungui.com/blog/2016/03/04/bgsession/"/>
    <updated>2016-03-04T16:35:38+08:00</updated>
    <id>http://www.liuchungui.com/blog/2016/03/04/bgsession</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/liuchungui/BGSession">BGSession</a>是一个基于NSUserDefaults实现的轻量级数据存储，你只需要简单的继承它，给它添加属性，设置属性的值，就能通过NSUserDefaults同步到本地。</p>

<!-- more -->


<h2>BGSession的由来</h2>

<p>在昨天以前，对于一些轻量级数据，我一共使用过三种方案。</p>

<p>第一种，直接使用NSUserDefaults进行读取，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//写入</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setValue</span><span class="p">:</span><span class="s">@&quot;Jack&quot;</span> <span class="nl">forKey</span><span class="p">:</span><span class="s">@&quot;UserDefaults_userName&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="n">synchronize</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//读取</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">userName</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">valueForKey</span><span class="p">:</span><span class="s">@&quot;UserDefaults_userName&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种，数据归档，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//使用归档写入</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">userName</span> <span class="o">=</span> <span class="s">@&quot;Jack&quot;</span><span class="p">;</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">filePath</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="nb">YES</span><span class="p">)</span> <span class="n">lastObject</span><span class="p">]</span> <span class="nl">stringByAppendingPathComponent</span><span class="p">:</span><span class="s">@&quot;UserNameFile&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="bp">NSKeyedArchiver</span> <span class="nl">archiveRootObject</span><span class="p">:</span><span class="n">userName</span> <span class="nl">toFile</span><span class="p">:</span><span class="n">filePath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//使用解归档读取</span>
</span><span class='line'><span class="n">userName</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSKeyedUnarchiver</span> <span class="nl">unarchiveObjectWithFile</span><span class="p">:</span><span class="n">filePath</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>第三种，建立一个全局的单例，然后给定相应的属性值，存储时的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//写入</span>
</span><span class='line'><span class="p">[</span><span class="n">BGGlobal</span> <span class="n">sharedGlobal</span><span class="p">].</span><span class="n">userName</span> <span class="o">=</span> <span class="s">@&quot;Jack&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">//写入文件，我使用的是将整个对象归档到一个文件当中</span>
</span><span class='line'><span class="p">[</span><span class="n">BGGlobal</span> <span class="n">writeToFile</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//读取</span>
</span><span class='line'><span class="bp">NSString</span> <span class="o">*</span><span class="n">userName</span> <span class="o">=</span> <span class="p">[</span><span class="n">BGGlobal</span> <span class="n">sharedGlobal</span><span class="p">].</span><span class="n">userName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p> 比较上面三种方案：  <br/>
 第一种我使用过之后就再也不怎么用了，有段时间几乎遗忘了它，因为使用它真的很麻烦，打出<code>[NSUserDefaults standardUserDefaults]</code>已经感觉很长了，后面还需要输入一个自己定义的key值，虽然可以全局定义常量，但是当常量够多的时候，也不能一时找到，而且设置值之后，如果要写入磁盘，还需要使用<code>[[NSUserDefaults standardUserDefaults] synchronize]</code>同步到本地；读取时和写入类似，需要一个key值。</p>

<p> 第二种，数据归档和第一种一样，存取时比较麻烦，而且因为归档的时候需要不停的读取文件，性能也不好。</p>

<p> 第三种，在全局单例实现<code>NSCoding</code>协议，只需要添加属性值，就可以使用点语法直接存取，存取非常的方便。存储本地时，和<code>[[NSUserDefaults standardUserDefaults] synchronize]</code>类似，使用<code>[BGGlobal writeToFile]</code>全局归档写入文件。</p>

<p> 比较这三种方案，我选择了第三种。第二种，直接舍弃；第一种虽然在性能比第二种更优，但是使用不是很方便，况且我们这是存储轻量级数据，性能差异根本看不出来什么。</p>

<p> 但，在使用过程中，我们遇到了一些问题，就是<code>[BGGlobal writeToFile]</code>会忘记写，从而造成了bug。而且，在整个工程项目中<code>[BGGlobal writeToFile]</code>出现的次数特别的多，这一步是否可以优化掉？</p>

<p> 后来，一致商议，我们项目中将全局单例的global中归档写入文件的方式替换成NSUserDefaults的存储方式，然后在内部实现了同步本地的操作。这样只要我们在外面使用设置新的值时，它会自动同步到本地，而且性能方面更佳。</p>

<p> 但是，在使用过一段时间之后，我发现并不是很方便，因为在使用的时候，##每添加一个字段都需要做如下两步##。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="c1">//1、定义一个常量来作为NSUserDefaults的key</span>
</span><span class='line'> <span class="k">static</span> <span class="bp">NSString</span> <span class="o">*</span><span class="k">const</span> <span class="n">kSessionUserName</span> <span class="o">=</span> <span class="s">@&quot;kSessionUserName&quot;</span><span class="p">;</span>
</span><span class='line'> <span class="c1">//2、在全局单例内部实现getter和setter方法</span>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setUserName</span><span class="p">:(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">userName</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">setValue</span><span class="p">:</span><span class="n">userName</span> <span class="nl">forKey</span><span class="p">:</span><span class="n">kSessionUserName</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="o">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">userName</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">getValueForKey</span><span class="p">:</span><span class="n">kSessionUserName</span><span class="p">];</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> 这些步骤我们是否可以完全省略呢？</p>

<p> 在一次我自己做项目的时候，我使用全局单例舍弃NSUserDefaults进行存储，仍然使用的是归档的形式，而且那个全局单例继承的是<a href="https://github.com/elado/jastor">jastor</a>，它内部自己实现了归档协议，我只需要每次使用的时候，多添加<code>[BGGlobal writeToFile]</code>同步到本地就行了，比前面使用NSUserDefaults方便很多。</p>

<p> 但是，我一直都认为有更好的实现方案，终于在看runtime和KVO东西的时候想到了一种方案。于是，立马回家写了一个实现了<a href="https://github.com/liuchungui/BGSession">BGSession</a>。</p>

<h2>BGSession实现原理</h2>

<p> BGSession是一个全局单例，主要采用的是KVC/KVO和Runtime进行实现的。使用BGSession作为轻量级数据存储时，只需要继承BGSession，然后在BGSession的派生类添加相关的属性。当给这些属性设置新的值后，BGSession会监听到属性值的变化，然后使用KVC自动将它同步到NSUserDefaults。这样，存取时，我们就可以当做使用单例一样使用，简单方便。</p>

<h2>Github地址</h2>

<p><a href="https://github.com/liuchungui/BGSession">https://github.com/liuchungui/BGSession</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年总结]]></title>
    <link href="http://www.liuchungui.com/blog/2016/01/01/2015nian-zong-jie/"/>
    <updated>2016-01-01T01:22:29+08:00</updated>
    <id>http://www.liuchungui.com/blog/2016/01/01/2015nian-zong-jie</id>
    <content type="html"><![CDATA[<p>现在已经2016年1点了，去年这个时候看到别人都纷纷写着一年的总结，那个时候顿生崇拜。今年，我也来个简短的总结吧！</p>

<!-- more -->


<p>2015这一年，换了一家公司，而就是从这个时候，我感觉我整个写代码的思想发生了不小的变化，事情就从这里开始吧。</p>

<p>五月份的时候，跟着领导一起来到了一家新的公司。新的公司团队正在建立，由于领导的器重，我参与了项目重构前的框架设计。</p>

<p>在这其中，我最主要的是重构网络框架这一块。网络框架是基于AF第二次开发的，并且最初版本是我们在上一个公司一起讨论，然后由我们一个同事李鹏总理设计实现的。而重构网络框架这一块，经过多次讨论之后，我们的想法其实可以归纳成两点：第一个是移植性，不需像以前一样，每做个项目都需要修改网络框架内部的底层，而我们总体框架也是非常强调移植性；第二个就是业务层使用上体验更好，最初版本是发送一个请求调回一个成功和一个失败的block，成功的block里面只返回了一个request，取数据的时候需要从当前这个request当中获取，这样具有迷惑性；而且我们不但要在processResultWithDic:这个处理数据的方法当中判断是否是业务层成功，还需要在成功调回的block当中进行判断，这样相当于进行了两次判断。</p>

<h5>针对这两点，我重新设计了一下。</h5>

<ul>
<li>解决移植性，我在原来的基础上增加了一个NetworkHelper类，这个类是一个单例，它的作用主要是提供BaseURL、成功的返回码、取返回码的key值、请求的缓存码、处理请求参数、处理请求头、处理返回的数据，而且上面如果还满足不了，这个Helper还可以返回AF的requestSerializer和responseSerializer。而在项目当中，只需要继承这个类，实现里面的方法就可以配置整个网络框架，这就解决了移植性的问题。</li>
<li>使业务层使用体验更好，为了做到这个，我做了两点。一是在原来的基础上增加一个block，那就是一共三个分别是业务成功、业务失败、网络失败；二是每个block调回，不但调回request，而且返回response或者NSError。</li>
</ul>


<p>网络这样重构之后，我们放到了一个整体的工程中PublicProject，项目引入的时候导入整个工程，引用其中静态包文件就行了。这个框架，在公司当中我们多个项目都在使用，建立项目时，给我们使用起来带来不小的便利。后来，我们研究了一下私有的CocoaPods，使用起来更方便，后期新项目我们可以使用这个来进行管理，具体使用可以参照我的另外一篇博客<a href="http://www.liuchungui.com/blog/2015/10/19/cocoapodschuang-jian-si-you-pods/">CocoaPods创建私有Pods</a>。之后，参照了<a href="http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html">iOS应用架构谈 网络层设计方案</a>的思想，重新架构了下，自己重写了一遍网络框架<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>，放在了github上面。相比以前的网络框架，主要增加了缓存机制，扩展了可配置性的功能。之后，也许是用惯了block回调的方式，反而觉得block回调更好，又在此基础上重新开了一个<a href="https://github.com/liuchungui/BGNetwork/tree/dev">dev分支</a>。参照<a href="https://github.com/yuantiku/YTKNetwork">YTKNetwork</a>，在dev分支上更是添加了批量处理请求、上传请求和下载请求。后来陆陆续续整了下<a href="https://travis-ci.org/liuchungui/BGNetwork">travis-ci</a>和<a href="https://codecov.io/github/liuchungui/BGNetwork">codecov</a>。</p>

<p>整个网络封装之后，收获还是挺多的。不过，特别遗憾的是没有好好的写使用教程和宣传下，带动更多的人参与进来，star少的可怜。</p>

<p>2015年还有个重要的事情就是使用了git，真正参与进了github，真正的为github的世界向往和激动。在之前，git对我来说也就是和svn一样的工具，github就是一个下载开源代码的网站。而在同学说git怎么怎么好的时候，我终于使用了git，立马就感觉使用git原来这么爽。后来，进入github在某个项目里面问了个问题，发现有很多很多人来回答，大家就像一个大家庭一样，为整个开源项目发展的更好而努力。所以，我有什么想法的时候，也会自己创建项目放在上面。</p>

<p>2015年，还有一件事情不得不提，就是和我一个室友在一起做了一个项目，做得项目是一个为群众提供法律服务的平台，做了客户端和律师端。当时，我还专门针对一个网站用php写了一个抓取数据的代码，最后花了将近一个月的时间抓取了七百多万条数据。他更是写了一段代码分析出其中的案件类型、律师名、律师下所打的官司等有价值的数据，还做了一个小网站。后来，我们做APP，我写服务器接口，写了几个之后，他参照着写了许多。iOS客户端有两个，是我和另外一个同学一块写的。当时我这个室友特别有激情，专门花了三天的功夫做了一个特别棒的PPT，在他导师的牵头下，邀请了法律界的律师、法院的人和北大的教授在国家会议中心做了一次演讲。本来是打算激情四射的准备搞起，融资创建公司，最后专业人士提出了各种各样的问题，最后没有搞起来。</p>

<p>不过，这也成为了我们一个重要的经验。对我来说，我经历了抓取数据，专门实践了一番正则表达式，而且我当时是自己整了一个简单的php框架，然后就写起了服务器端的接口。</p>

<p>后来，他们公司要做一个项目，服务器接口是由我一个人写的，iOS客户端是由我和另外一个同学写的。这一次，我使用了在<a href="https://github.com/bcit-ci/CodeIgniter">CI</a>基础封装的Resetful API框架<a href="https://github.com/chriskacerguis/codeigniter-restserver">codeigniter-restserver</a>，接口文档专门由<a href="https://tower.im/">Tower</a>管理。</p>

<p>总结写的有点啰嗦，大概就一些这样的事情，也算是对2015年的记录吧！</p>

<p>2016年计划：
其实想过各种各样的计划，想做的事情也特别特别多，但是说多了，肯定又实现不了，还是来点实际的吧！</p>

<ol>
<li>2016年要学习一门新的技术，暂时选定的是H5。</li>
<li>github上好好维护自己的项目，做出一个有点名气的项目来。</li>
<li>做一个自己的网站和App，越炫酷越好。</li>
<li>好好维护自己的博客，每个月至少一篇博客。</li>
<li>带着女朋友好好去旅游一次</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gitbook安装使用]]></title>
    <link href="http://www.liuchungui.com/blog/2015/12/26/gitbookan-zhuang-shi-yong/"/>
    <updated>2015-12-26T17:15:07+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/12/26/gitbookan-zhuang-shi-yong</id>
    <content type="html"><![CDATA[<blockquote><p>GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书。</p></blockquote>

<p>在这篇博客中，记录了一下gitbook的安装使用，更详细的使用请查看下面内容：
gitbook详细使用文档：<a href="help.gitbook.com">help.gitbook.com</a>      <br/>
gitbook官网:<a href="https://www.gitbook.com">https://www.gitbook.com</a>  <br/>
github地址:<a href="https://github.com/GitbookIO/gitbook">https://github.com/GitbookIO/gitbook</a></p>

<h3>1、安装</h3>

<p>首先到<a href="http://nodejs.cn/">nodejs</a>下载，安装Node.js的包管理器npm。
然后，通过<code>sudo npm install -g gitbook-cli</code>命令安装gitbook</p>

<!-- more -->


<h3>2、初始化gitbook</h3>

<p>创建一个文件夹，然后初始化</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir test
</span><span class='line'>gitbook init</span></code></pre></td></tr></table></div></figure>


<p>初始化之后会有两个文件README.md和SUMMARY.md,README.md 是作品的介绍，SUMMARY.md 是作品的目录结构，里面要包含一个章节标题和文件索引的列表。</p>

<p>下面是一个SUMMARY.md文件的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Summary
</span><span class='line'>
</span><span class='line'>This is the summary of my book.
</span><span class='line'>
</span><span class='line'>* [section 1](section1/README.md)
</span><span class='line'>    * [example 1](section1/example1.md)
</span><span class='line'>    * [example 2](section1/example2.md)
</span><span class='line'>* [section 2](section2/README.md)
</span><span class='line'>    * [example 1](section2/example1.md)</span></code></pre></td></tr></table></div></figure>


<p>在这里，我们可以先创建对应的文件夹，然后在里面编辑对应的内容，之后更新SUMMARY.md这个目录文件；如果在编辑之前我们已经确定好了内容标题和目录，也可以先编辑SUMMARY.md文件，然后通过<code>gitbook init</code>来初始化一遍，它会自动创建文件目录和对应的md文件。</p>

<h3>3、编辑内容，并查看</h3>

<p>初始化书以后，我们就可以对我们的内容进行编辑了。
例如：
我要将本篇博客放入目录为gitbook下，首先在test目录建立一个gitbook文件夹，然后建立一个<code>gitbook安装使用.md</code>文件，目录如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>|____gitbook
</span><span class='line'>| |____gitbook安装使用.md
</span><span class='line'>|____README.md
</span><span class='line'>|____section1
</span><span class='line'>| |____example1.md
</span><span class='line'>| |____example2.md
</span><span class='line'>| |____README.md
</span><span class='line'>| |____test.md
</span><span class='line'>|____section2
</span><span class='line'>| |____example1.md
</span><span class='line'>| |____README.md
</span><span class='line'>|____SUMMARY.md</span></code></pre></td></tr></table></div></figure>


<p>之后，我们像写博客一样，使用markdown语言编辑<code>gitbook安装使用.md</code>中的内容。
编辑完之后，需要将<code>gitbook安装使用.md</code>这篇文章放入SUMMARY.md目录中。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Summary
</span><span class='line'>* [gitbook]
</span><span class='line'>    * [gitbook安装使用](gitbook/gitbook安装使用.md)
</span><span class='line'>* [section 1](section1/README.md)
</span><span class='line'>    * [example 1](section1/example1.md)
</span><span class='line'>    * [example 2](section1/example2.md)
</span><span class='line'>* [section 2](section2/README.md)</span></code></pre></td></tr></table></div></figure>


<p>这样，就加入了<code>gitbook安装使用.md</code>这篇文章。之后，可以使用下面命令启动一个本地web服务，来预览本地的内容。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gitbook serve</span></code></pre></td></tr></table></div></figure>


<p>这个时候，简洁、优雅的界面就出来了。
<img src="http://ww1.sinaimg.cn/large/7746cd07gw1eynt17tm6yj20zh0ey0ua.jpg" alt="" /></p>

<p>注意：</p>

<ul>
<li>在查看的时候没有看到刚刚加入的文章，查看一下<code>SUMMARY.md</code>是否添加</li>
<li>在预览的时候能看到文章，但是点击不起作用，查看是否目录正确</li>
</ul>


<p><strong>如果想将gitbook放到web服务器作为网站浏览，先使用gitbook build命令，之后会生成静态网页到<em>book目录下，只要将</em>book目录copy到web服务器上就行了。</strong></p>

<h3>4、发布电子书gitbook官网</h3>

<p>到<a href="https://www.gitbook.com/">gitbook官网</a>创建一个账号，创建一本<code>test</code>电子书，创建电子书的时候，gitbook会创建git仓库<a href="https://git.gitbook.liuchungui/test.git%E3%80%82">https://git.gitbook.liuchungui/test.git%E3%80%82</a></p>

<p>然后下载<a href="https://www.gitbook.com/editor">gitbook editor</a>，登陆账号，将电子书clone一份下来，将前面新建电子书将前面编辑的内容拖到这个电子书下，然后同步到官网就可以看到内容了，例如我的<a href="https://liuchungui.gitbooks.io/test/content/">test</a>。</p>

<p>上面的操作我们也可以用命令行进行操作。先在官网建立一个电子书，然后clone下来，之后编写我们的电子书内容和目录，然后使用<a href="http://www.liuchungui.com/blog/2015/10/23/gitzong-jie/">git命令</a>将内容Push到git仓库就行了。</p>

<h3>5、导出电子书</h3>

<p>其实，上面建立的<code>test</code>已经在官网上可以进行电子书下载了，有三种格式<code>PDF</code>、<code>EPUB</code>、<code>MOBI</code>。
而在本地，使用下面命令导出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pdf [options] [source_dir] 构建 pdf 格式的电子书
</span><span class='line'>epub [options] [source_dir] 构建 ePub 格式的电子书
</span><span class='line'>mobi [options] [source_dir] 构建 mobi 格式的电子书</span></code></pre></td></tr></table></div></figure>


<p>如果导出失败，需要我们下载<a href="http://calibre-ebook.com/">Calibre</a>进行电子书转换。</p>

<h3>gitbook的相关命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>build [options] [source_dir] 根据文档目录构建书籍
</span><span class='line'>serve [options] [source_dir] 构建并且提供书籍的 web 托管
</span><span class='line'>install [options] [source_dir] 安装 GitBook 插件
</span><span class='line'>pdf [options] [source_dir] 构建 pdf 格式的电子书
</span><span class='line'>epub [options] [source_dir] 构建 ePub 格式的电子书
</span><span class='line'>mobi [options] [source_dir] 构建 mobi 格式的电子书
</span><span class='line'>init [source_dir]      根据 SUMARRY.md 文件的内容生成相应的目录和文件
</span><span class='line'>publish [source_dir]   如果已绑定 GitBook.io，该命令可以直接发布书籍
</span><span class='line'>
</span><span class='line'>-h, --help     输出命令的使用说明
</span><span class='line'>-V, --version  输出程序的版本号</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>gitbook操作其实就分为两个方面内容，一个是建立git仓库对内容进行管理，另外一个就是使用markdown对内容进行编辑，然后使用SUMARRY.md生成书的目录。  <br/>
而gitbook这么优雅大方的页面，我们喜欢的话，完全可以将它做成我们的技术博客。而它还具有简单标题检索功能，我甚至想过将它做成一个api接口管理页面。</p>

<h3>参考：</h3>

<p><a href="http://zhaoda.net/2015/11/09/gitbook-plugins/">Gitbook 的使用和常用插件</a> <br/>
<a href="http://liaoer.net/2015/04/30/Mac%E4%B8%8BGitBook%E5%88%B6%E4%BD%9C%E7%94%B5%E5%AD%90%E4%B9%A6/">Mac下GitBook制作电子书</a><br/>
<a href="http://blog.windrunner.info/app/gitbook-tutorial.html">使用GitBook</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UICollectionView动画]]></title>
    <link href="http://www.liuchungui.com/blog/2015/11/24/uicollectionviewdong-hua/"/>
    <updated>2015-11-24T00:00:26+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/11/24/uicollectionviewdong-hua</id>
    <content type="html"><![CDATA[<h2>一、简单使用</h2>

<p>UICollectionView更新事件有四种分别是<code>插入</code>、<code>删除</code>、<code>刷新</code>、<code>移动</code>，
api使用起来和UITableView类似，具体可以自己在代码中找，如果需要执行多个更新事件，可以放到performBatchUpdates中的updates闭包中作为一组动画，然后全部执行完之后通过completion调回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">collectionView</span><span class="p">.</span><span class="n">performBatchUpdates</span><span class="p">({</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>            <span class="n">collectionView</span><span class="p">.</span><span class="n">insertItemsAtIndexPaths</span><span class="p">(</span><span class="n">insertIndexPaths</span><span class="p">)</span>
</span><span class='line'>            <span class="n">collectionView</span><span class="p">.</span><span class="n">moveItemAtIndexPath</span><span class="p">(</span><span class="n">currentIndexPath</span><span class="p">,</span> <span class="nl">toIndexPath</span><span class="p">:</span> <span class="n">toIndexPath</span><span class="p">)</span>
</span><span class='line'>            <span class="p">},</span> <span class="nl">completion</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="n">isFinish</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="k">in</span>
</span><span class='line'>        <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>二、UICollectionView动画</h2>

<p>四种不同的更新事件，系统默认会带有动画，不过是比较简单的。我们可以自定义layout或者继承flowLayout，在内部实现我们自己想要的动画。下面，我们来说说动画的流程，以及系统默认的四种动画内部是如何的，并且通过代码来修改达到自己想要的动画。</p>

<!-- more -->


<h4>CollectionView动画流程</h4>

<p>当我们在外部调用CollectionView相关的api去<code>插入</code>、<code>删除</code>、<code>刷新</code>、<code>移动</code>cell时，首先会通过layout中的<code>layoutAttributesForElementsInRect</code>方法获取更新以后的布局信息，然后通过<code>prepareForCollectionViewUpdates</code>方法来通知layout哪些内容将会发生改变。之后，通过调用layout中的<code>initialLayoutAttributesForAppearingItemAtIndexPath</code>、<code>finalLayoutAttributesForDisappearingItemAtIndexPath</code>方法获取对应indexPath的<code>刚出现时最初布局属性</code>和<code>消失时最终布局属性</code>。而后形成两个动画过程分别是<code>刚出现时最初布局-&gt;更新后布局的出现动画</code>和<code>更新前布局-&gt;消失时最终布局的消失动画</code>，而collectionView中'插入'、'删除'、'刷新'和'移动'动画都是基于这两个动画组合形成的。最后，等这一系列动画执行完之后，最后会调用layout中<code>finalizeCollectionViewUpdates</code>方法，这个方法仍然放在动画块中，我们可以在这个方法当中添加额外的动画。</p>

<p>从上面流程可以看出，在更新的时候，由于<code>更新前布局</code>和<code>更新后布局</code>都是在更新动画前已经设置好了，我们不能去胡乱更改布局，所以我们只能通过<code>initialLayoutAttributesForAppearingItemAtIndexPath</code>和<code>finalLayoutAttributesForDisappearingItemAtIndexPath</code>两个方法来更改<code>刚出现时最初布局属性</code>和<code>消失时最终布局属性</code>，即我们只能更改<code>出现动画的起点</code>和<code>消失动画的终点</code>。</p>

<p>为了更方面的下面说明，引申出两个名词：</p>

<ul>
<li>出现动画：initialLayoutAttributesForAppearingItemAtIndexPath获取对应indexPath的<code>刚出现时最初布局</code>->更新后布局变化过程</li>
<li>消失动画：更新之前的布局->finalLayoutAttributesForDisappearingItemAtIndexPath方法获取对应indexPath的<code>消失时最终布局</code>的变化过程</li>
</ul>


<p>注意，出现动画和消失动画针对的是一个cell单元。</p>

<p>下面我们通过代码示例来实现插入、删除、刷新、移动动画。
代码示例工程：<a href="https://github.com/liuchungui/UICollectionViewAnimationDemo">UICollectionViewAnimationDemo</a></p>

<p>在这个Demo工程中有一个<code>BGSelectImageLayout</code>，它是CollectionView的layout，它的布局方式是水平横向滑动，并且只有一组，每一个普通的cell大小都是<code>itemSize</code>，而选中的cell则宽度是<code>itemSize*2</code>。</p>

<h4>插入动画：</h4>

<p>在当前的布局下，每插入一个cell时，都会影响它后面所有cell布局变化。      <br/>
例如CollectionView有一行三个cell，为了更好的说明将indexPath是(0,0),(0,1),(0,2)标记为0，1，2。当在第1个位置插入一个cell时，如下图</p>

<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1eyba1ih4nvj20re0fs75l.jpg" alt="" /></p>

<p>而在这个插入过程中，视觉上会有三个动画过程。new插入到位置1为<code>过程1</code>，1移动一个单位到2为<code>过程2</code>，2移动一个单位到一个新的位置3为<code>过程3</code>，如下图：</p>

<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1eyba58t45gj20yc0g6760.jpg" alt="" /></p>

<p>虽然视觉上只有三个动画过程，但其实有五个动画。其中，过程1是1位置的<code>出现动画</code>；过程2是1位置的<code>消失动画</code>和2位置的<code>出现动画</code>重合而成；过程3是2位置的<code>消失动画</code>和3位置的<code>出现动画</code>。</p>

<p>其中值得注意的三点，一是除了最后一个，前面的cell消失动画与它后面cell出现动画重合，这样看起来就是当前位置的cell向后平移了一个位置；二是最后一个cell只有出现动画，没有消失动画，整个过程<code>出现动画会多一个</code>；三是插入的cell的出现动画是默认是alpha从0到1的淡入效果。</p>

<p>在代码中，想获得一个插入的cell从小变大的出现效果和其它cell整体向后移动一个位置的动画效果，可以如下实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="n">insertIndexPathArr</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//设置为前一个item的frame</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">currentFrameWithIndexPath</span><span class="p">(</span><span class="bp">NSIndexPath</span><span class="p">(</span><span class="nl">forRow</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nl">inSection</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">section</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>     <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">currentFrameWithIndexPath</span><span class="p">(</span><span class="bp">NSIndexPath</span><span class="p">(</span><span class="nl">forRow</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nl">inSection</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">section</span><span class="p">))</span>
</span><span class='line'>     <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里为了看到效果，我在模拟器的Debug模式下勾选了Slow Animations调慢了动画:
<img src="http://ww3.sinaimg.cn/large/7746cd07jw1eyaa2ommv4g208j0frab5.gif" alt="" /></p>

<h4>删除动画：</h4>

<p>在上面的位置1插入一个cell后，cell的数量变成了4个，分别是0、1、2、3，它们对应的indexPath为(0,0)、(0,1)、(0,2)、(0,3)。当要删除位置1的cell时，与插入类似，系统默认也会有三个动画过程，如下图：</p>

<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1eybbqnkm4cj20xo0dita5.jpg" alt="" /></p>

<p>其中，动画过程1是在位置1执行一个消失动画；过程2是位置1的出现动画和位置2的消失动画重合而成；过程3是位置2的出现动画和位置3的消失动画重合而成。</p>

<p><strong>需要注意的是</strong>，一是与插入不同，重合后的效果是cell向前平移了一个位置；二是最后一个位置只有消失动画没有出现动画，整个过程消失动画数会多一个；三是删除的cell的出现动画默认是从1到0的淡出效果。</p>

<p>在代码中，实现一个与插入相对应的动画，即删除的cell从大到小的淡出效果和其它cell整体向前移动一个位置的效果，可以如下实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="nf">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>    <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">currentFrameWithIndexPath</span><span class="p">(</span><span class="bp">NSIndexPath</span><span class="p">(</span><span class="nl">forRow</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">row</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nl">inSection</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">section</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="n">deleteIndexPathArr</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//这里写成缩放成(0，0)直接就不见了</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">CGAffineTransformMakeScale</span><span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">currentFrameWithIndexPath</span><span class="p">(</span><span class="bp">NSIndexPath</span><span class="p">(</span><span class="nl">forRow</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">row</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nl">inSection</span><span class="p">:</span> <span class="n">itemIndexPath</span><span class="p">.</span><span class="n">section</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1eyaqorep4rg208j0g9wgw.gif" alt="" /></p>

<h4>刷新动画：</h4>

<p>在官方的解释中，刷新是先删除然后插入。其实它就是先执行所有cell的消失动画；在此之后，它又会执行所有cell的出现动画。
在系统当中，需要注意的是默认出现动画是一个alpha从0到1的淡入效果，而消失动画则是alpha从1到0的淡入效果；与插入动画和删除动画不同的是，刷新动画会成对存在，即消失动画与出现动画数量相等。</p>

<p>在这里，实现一个点击某个cell时，当前选中的cell变大的效果，而它旁边的cell被推开的动画效果。在这里我不需要淡入和淡出效果，所以修改了消失时alpha为1.0，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>    <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">lastFrameWithIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>    <span class="c1">//注意，这里alpha设置为不透明，系统默认返回是0，即一个淡出的效果</span>
</span><span class='line'>    <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class='line'>    <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="nb">self</span><span class="p">.</span><span class="n">currentFrameWithIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<p><img src="http://ww2.sinaimg.cn/large/7746cd07jw1eyb04xye32g208j0g9755.gif" alt="" /></p>

<h4>移动动画：</h4>

<p>移动一个cell到另一个位置时，会引起当前cell到目标位置之间所有cell布局发生变化，从而形成一系列的动画。在这个动画过程中，每个indexPath都会有一个出现动画和一个消失动画。</p>

<p>例如，在系统默认情况下，0位置cell移动到2位置cell的时候，我们会看到三个动画过程，如下图：</p>

<p><img src="http://ww1.sinaimg.cn/large/7746cd07jw1eyazemzgkzj20qa0bqt9u.jpg" alt="" /></p>

<p>但是，其实它内部执行了六个动画，只是其中两两之间动画重合了而已。其中动画过程1是1位置的消失动画和0位置出现动画重合；动画过程2是0位置的消失动画和2位置的出现动画重合；动画过程3是2位置的消失动画和1位置的出现动画重合。</p>

<p><strong>其中值得注意的有两点：</strong>   <br/>
1、消失动画和出现动画数量相等    <br/>
2、动画的重合与刷新动画不同，与插入和删除动画类似，它们不同位置之间的消失动画与出现动画重合。</p>

<p>在这里，实现一个移动cell时旋转180°到目标位置效果，实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'> <span class="kr">override</span> <span class="k">func</span> <span class="n">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">initialLayoutAttributesForAppearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">itemIndexPath</span> <span class="o">==</span> <span class="nb">self</span><span class="p">.</span><span class="n">afterMoveIndexPath</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//afterMoveIndexPath的消失动画和beforeMoveIndexPath的出现动画重合</span>
</span><span class='line'>        <span class="c1">//init是设置起点，而final设置终点，理论是不重合的</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">transform3D</span> <span class="o">=</span> <span class="n">CATransform3DMakeRotation</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="n">CGFloat</span><span class="p">(</span><span class="n">M_PI</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kr">override</span> <span class="k">func</span> <span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="nl">itemIndexPath</span><span class="p">:</span> <span class="bp">NSIndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">UICollectionViewLayoutAttributes</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">let</span> <span class="n">attributes</span> <span class="o">=</span> <span class="nb">super</span><span class="p">.</span><span class="n">finalLayoutAttributesForDisappearingItemAtIndexPath</span><span class="p">(</span><span class="n">itemIndexPath</span><span class="p">)</span><span class="o">?</span><span class="p">.</span><span class="k">copy</span><span class="p">()</span> <span class="kt">as</span><span class="o">?</span> <span class="bp">UICollectionViewLayoutAttributes</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="n">beforeMoveIndexPath</span> <span class="o">==</span> <span class="n">itemIndexPath</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">//afterMoveIndexPath的消失动画和beforeMoveIndexPath的出现动画重合，设置他们旋转的角度一样，方向相反</span>
</span><span class='line'>        <span class="n">attributes</span><span class="o">?</span><span class="p">.</span><span class="n">transform3D</span> <span class="o">=</span> <span class="n">CATransform3DMakeRotation</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="n">CGFloat</span><span class="p">(</span><span class="n">M_PI</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>效果如下：</p>

<p><img src="http://ww1.sinaimg.cn/large/7746cd07jw1eyb0375fz7g208j0g9go4.gif" alt="" /></p>

<p>上面都是纯颜色，在示例工程<a href="https://github.com/liuchungui/UICollectionViewAnimationDemo">UICollectionViewAnimationDemo</a>中，我还添加了一个图片的<code>BGSimpleImageSelectCollectionViewDemo2</code>。布局基本上相同，唯一不同的是图片因为上下不可以倒转，没办法做到统一的旋转180°。</p>

<p>效果如下：</p>

<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1eybewu3qyxg208j0g9k2r.gif" alt="" /></p>

<h2>总结：</h2>

<p>1、CollectionView更新时，执行动画的时候会访问layout中哪些api，整个流程是如何形成的        <br/>
2、修改CollectionView动画就是修改出现动画的起点和消失动画的终点，即layout当中的initialLayoutAttributesForAppearingItemAtIndexPath和finalLayoutAttributesForDisappearingItemAtIndexPath方法进行修改。     <br/>
3、插入、删除、刷新、移动内部执行哪些动画，我们如何去修改。</p>

<h2>参考：</h2>

<p><a href="http://objccn.io/issue-12-5/">Collection View 动画</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UICollectionView之自定义Layout]]></title>
    <link href="http://www.liuchungui.com/blog/2015/11/06/uicollectionviewzhi-zi-ding-yi-layout/"/>
    <updated>2015-11-06T00:00:26+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/11/06/uicollectionviewzhi-zi-ding-yi-layout</id>
    <content type="html"><![CDATA[<p>当我们使用系统自带的UICollectionViewFlowLayout无法实现我们的布局时，我们就可以考虑自定义layout。     <br/>
所以，了解并学习一下自定义Layout是很有必要。    <br/>
其实可以分三个步骤：</p>

<ol>
<li>覆写prepareLayout方法，并在里面事先就计算好必要的布局信息并存储起来。</li>
<li>基于prepareLayout方法中的布局信息，使用collectionViewContentSize方法返回UICollectionView的内容尺寸。</li>
<li>使用layoutAttributesForElementsInRect:方法返回指定区域cell、Supplementary View和Decoration View的布局属性。</li>
</ol>


<!-- more -->


<p>了解了自定义布局的三个主要步骤，我们来通过自定义布局的方式用UICollectionView实现grideView。当然，grideView使用<code>UICollectionViewFlowLayout</code>就可以轻易实现，这里我们只是学习了解一下自定义布局的过程，所以拿grideView这个经常用的来作为例子。</p>

<p>我们创建一个新的工程<a href="https://github.com/liuchungui/BGCustomLayoutCollectionViewDemo">BGCustomLayoutCollectionViewDemo</a>。然后创建一个UICollectionViewLayout的子类对象<code>BGGrideLayout</code>，它就是我们自定义layout对象。</p>

<h3>在BGGrideLayout里面，我们首先覆写prepareLayout方法。</h3>

<p>prepareLayout是专门用来准备布局的，在<code>prepareLayout</code>方法里面我们可以事先就计算后面要用到的布局信息并存储起来，防止后面方法多次计算，提高性能。例如，我们可以在此方法就计算好每个cell的属性、整个CollectionView的内容尺寸等等。此方法在布局之前会调用一次，之后只有在调用<code>invalidateLayout</code>、<code>shouldInvalidateLayoutForBoundsChange:</code>返回<code>YES</code>和<code>UICollectionView刷新</code>的时候才会调用。</p>

<p>而在BGGrideLayout的prepareLayout方法中，我们有两个目的：    <br/>
一是获取对应indexPath的<code>UICollectionViewLayoutAttributes</code>对象，并存储到二维数组<code>layoutInfoArr</code>当中；   <br/>
二是计算出内容尺寸并保存到全局变量<code>contentSize</code>当中。     <br/>
代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">prepareLayout</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">prepareLayout</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">layoutInfoArr</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">maxNumberOfItems</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">//获取布局信息</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">numberOfSections</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="n">numberOfSections</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">section</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">section</span> <span class="o">&lt;</span> <span class="n">numberOfSections</span><span class="p">;</span> <span class="n">section</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="bp">NSInteger</span> <span class="n">numberOfItems</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">numberOfItemsInSection</span><span class="p">:</span><span class="n">section</span><span class="p">];</span>
</span><span class='line'>        <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">subArr</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="nl">arrayWithCapacity</span><span class="p">:</span><span class="n">numberOfItems</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="bp">NSInteger</span> <span class="n">item</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">item</span> <span class="o">&lt;</span> <span class="n">numberOfItems</span><span class="p">;</span> <span class="n">item</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="bp">NSIndexPath</span> <span class="o">*</span><span class="n">indexPath</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSIndexPath</span> <span class="nl">indexPathForItem</span><span class="p">:</span><span class="n">item</span> <span class="nl">inSection</span><span class="p">:</span><span class="n">section</span><span class="p">];</span>
</span><span class='line'>            <span class="bp">UICollectionViewLayoutAttributes</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">layoutAttributesForItemAtIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">subArr</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">attributes</span><span class="p">];</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">maxNumberOfItems</span> <span class="o">&lt;</span> <span class="n">numberOfItems</span><span class="p">){</span>
</span><span class='line'>            <span class="n">maxNumberOfItems</span> <span class="o">=</span> <span class="n">numberOfItems</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">//添加到二维数组</span>
</span><span class='line'>        <span class="p">[</span><span class="n">layoutInfoArr</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">subArr</span> <span class="k">copy</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="c1">//存储布局信息</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">layoutInfoArr</span> <span class="o">=</span> <span class="p">[</span><span class="n">layoutInfoArr</span> <span class="k">copy</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//保存内容尺寸</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">contentSize</span> <span class="o">=</span> <span class="n">CGSizeMake</span><span class="p">(</span><span class="n">maxNumberOfItems</span><span class="o">*</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">itemSize</span><span class="p">.</span><span class="n">width</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">interitemSpacing</span><span class="p">)</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">interitemSpacing</span><span class="p">,</span> <span class="n">numberOfSections</span><span class="o">*</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">itemSize</span><span class="p">.</span><span class="n">height</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">lineSpacing</span><span class="p">)</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">lineSpacing</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码中，我们看到了<code>UICollectionViewLayoutAttributes</code>这个类，这个类其实专门用来存储视图的内容，例如frame、size、apha、hiden等等，layout最后会拿着这些frame设置给对应的视图。
而上面代码中，获取<code>UICollectionViewLayoutAttributes</code>是通过<code>layoutAttributesForItemAtIndexPath:</code>方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UICollectionViewLayoutAttributes</span> <span class="o">*</span><span class="p">)</span><span class="nf">layoutAttributesForItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">UICollectionViewLayoutAttributes</span> <span class="o">*</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UICollectionViewLayoutAttributes</span> <span class="nl">layoutAttributesForCellWithIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//每一组cell为一行</span>
</span><span class='line'>    <span class="n">attributes</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">((</span><span class="nb">self</span><span class="p">.</span><span class="n">itemSize</span><span class="p">.</span><span class="n">width</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">interitemSpacing</span><span class="p">)</span><span class="o">*</span><span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">interitemSpacing</span><span class="p">,</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">itemSize</span><span class="p">.</span><span class="n">height</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">lineSpacing</span><span class="p">)</span><span class="o">*</span><span class="n">indexPath</span><span class="p">.</span><span class="n">section</span><span class="o">+</span><span class="nb">self</span><span class="p">.</span><span class="n">lineSpacing</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">itemSize</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="nb">self</span><span class="p">.</span><span class="n">itemSize</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">attributes</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个方法中，<code>itemSize</code>是cell的大小，<code>interitemSpacing</code>是cell与cell之间的间距，<code>lineSpacing</code>是行距。</p>

<h3>随后，覆写collectionViewContentSize</h3>

<p>collectionViewContentSize返回内容尺寸给UICollectionView。注意这个方法返回的尺寸是给UICollectionView这个继承于<code>UIScrollView</code>的视图作为<code>contentSize</code>，不是UICollectionView的视图尺寸。正是因为这一点，我们自定义layout如果想让它只能横向滑动，只需要将这个<code>size.height</code>设置成<code>collectionView.height</code>就行了。
这个方法会多次调用，所以最好是在prepareLayout里就计算好。
在BGGrideLayout类中，我们只需要返回前面计算好的内容尺寸就行了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">CGSize</span><span class="p">)</span><span class="nf">collectionViewContentSize</span><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">self</span><span class="p">.</span><span class="n">contentSize</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>最后，覆写layoutAttributesForElementsInRect:方法</h3>

<p>此方法需要返回一组UICollectionViewLayoutAttributes类型对象。它代表着在这个指定的区域中，我们需要显示<code>cell</code>、<code>Supplementary View</code>和<code>Decoration View</code>中哪些视图，而这些视图的属性则保存UICollectionViewLayoutAttributes中。
此方法会多次调用，为了更好的性能，在这个方法当中，我们使用的UICollectionViewLayoutAttributes最好是在prepareLayout已经布局好的信息。</p>

<p>在BGGrideLayout中，我们遍历二维数组，找出了与指定区域有交接的UICollectionViewLayoutAttributes对象放到一个数组中，然后返回。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">layoutAttributesForElementsInRect:</span><span class="p">(</span><span class="bp">CGRect</span><span class="p">)</span><span class="nv">rect</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">layoutAttributesArr</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">layoutInfoArr</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="n">array</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">i</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">array</span> <span class="nl">enumerateObjectsUsingBlock</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="bp">UICollectionViewLayoutAttributes</span> <span class="o">*</span><span class="n">obj</span><span class="p">,</span> <span class="bp">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span> <span class="n">_Nonnull</span> <span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">CGRectIntersectsRect</span><span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">frame</span><span class="p">,</span> <span class="n">rect</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">layoutAttributesArr</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">obj</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">layoutAttributesArr</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>到这里，我们的BGGrideLayout已经写好了，使用部分的代码，请直接查看<a href="https://github.com/liuchungui/BGCustomLayoutCollectionViewDemo">BGCustomLayoutCollectionViewDemo</a>中ViewController里面的代码就行了。</p>

<p>效果：</p>

<p><img src="http://ww4.sinaimg.cn/large/7746cd07jw1exqk0a7ofyg208j0fr7wh.gif" alt="Demo" /></p>

<h2>参考</h2>

<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/Introduction/Introduction.html">Collection View Programming Guide for iOS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UICollectionView之介绍使用篇]]></title>
    <link href="http://www.liuchungui.com/blog/2015/11/02/uicollectionviewzhi-jie-shao-shi-yong-pian/"/>
    <updated>2015-11-02T00:29:12+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/11/02/uicollectionviewzhi-jie-shao-shi-yong-pian</id>
    <content type="html"><![CDATA[<p>实现垂直方向的单列表来说，使用UITableView足以；若是需要构建横向滑动列表、gridView等直线型布局，则使用UICollectionView+UICollectionViewFlowLayout搭建最合适；更复杂的布局，则可以使用UICollectionView+自定义Layout来实现。</p>

<p>而这篇博客就来介绍一下UICollectionView。</p>

<p>首先，来了解一下UICollectionView工作流程：</p>

<p><img src="http://ww3.sinaimg.cn/large/7746cd07jw1exjnjqrju5j20x00qk76h.jpg" alt="" /></p>

<p>当UICollectionView显示内容时，先从数据源获取cell，然后交给UICollectionView。再从UICollectionViewLayout获取对应的layout attributes(布局属性)。最后，根据每个cell对应的layout attributes(布局属性)来对cell进行布局，生成了最终的界面。而用户交互的时候，都是通过Delegate来进行交互。当然，上面只是布局cell，但是UICollectionView内部还有Supplementary View和Decoration View，也可以对其进行布局。</p>

<p>上面，我们了解了UICollectionView的工作流程，我们将UICollectionView分成视图、数据源和代理方法、UICollectionViewLayout三块来介绍。</p>

<!-- more -->


<h2>一、视图</h2>

<p>UICollectionView上面显示内容的视图有三种Cell视图、Supplementary View和Decoration View。</p>

<h4>Cell视图</h4>

<p>CollectionView中主要的内容都是由它展示的，它是从数据源对象获取的。</p>

<h4>Supplementary View</h4>

<p>它展示了每一组当中的信息，与cell类似，它是从数据源方法当中获取的，但是与cell不同的是，它并不是强制需要的。例如flow layout当中的headers和footers就是可选的Supplementary View。</p>

<h4>Decoration View</h4>

<p>这个视图是一个装饰视图，它没有什么功能性，它不跟数据源有任何关系，它完全属于layout对象。</p>

<h2>二、数据源和代理方法</h2>

<h4>1、注册cell或者Supplementary View使其重用</h4>

<p>在使用数据源返回cell或者Supplementary View给collectionView之前，我们必须先要注册，用来进行重用。</p>

<ul>
<li>registerClass: forCellWithReuseIdentifier:</li>
<li>registerNib: forCellWithReuseIdentifier:</li>
<li>registerClass: forSupplementaryViewOfKind: withReuseIdentifier:</li>
<li>registerNib: forSupplementaryViewOfKind: withReuseIdentifier:</li>
</ul>


<p> 显而易见，前面两个方法是注册cell，后两个方法注册Supplementary View。其中，注册的方式有两种，第一种是直接注册class，它重用的时候会调用[[UICollectionView alloc] init]这样的初始化方法创建cell；另外一种是注册nib，它会自动加载nib文件。</p>

<p> 注册的之后，我们如何重用？       <br/>
 在数据源方法当中返回<code>cell</code>或者<code>Supplementary view</code>的方法当中通过<code>dequeueReusableCellWithReuseIdentifier:forIndexPath:</code> 或者 <code>dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:</code>方法获取cell或者Supplementary View。</p>

<p>示例代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">UICollectionViewCell</span> <span class="o">*</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">cellForItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span><span class="p">{</span>
</span><span class='line'>    <span class="n">CollectionViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">CollectionViewCell</span> <span class="o">*</span><span class="p">)[</span><span class="n">collectionView</span> <span class="nl">dequeueReusableCellWithReuseIdentifier</span><span class="p">:</span><span class="n">CellReuseIdentify</span> <span class="nl">forIndexPath</span><span class="p">:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">lightGrayColor</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cell</span><span class="p">.</span><span class="n">textLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;(%zd,%zd)&quot;</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">section</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">.</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cell</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2、数据源方法</h4>

<p> 数据源方法与UITableView类似，主要有：</p>

<ul>
<li>numberOfSectionsInCollectionView:</li>
<li>collectionView: numberOfItemsInSection:</li>
<li>collectionView: cellForItemAtIndexPath:</li>
<li>collectionView: viewForSupplementaryElementOfKind: atIndexPath:</li>
</ul>


<p>与UITableView不同的是多加了返回Supplementary view数据源方法。</p>

<h4>3、代理方法</h4>

<p>数据源为UICollectionView提供数据相关的内容，而代理则主要负责用户交互、与数据无关的视图外形。主要分成两部分：</p>

<p>1、通过调用代理方法，管理视图的选中、高亮</p>

<ul>
<li>collectionView:shouldDeselectItemAtIndexPath:</li>
<li>collectionView:didSelectItemAtIndexPath:</li>
<li>collectionView:didDeselectItemAtIndexPath:</li>
<li>collectionView:shouldHighlightItemAtIndexPath:</li>
<li>collectionView:didHighlightItemAtIndexPath:</li>
<li>collectionView:didUnhighlightItemAtIndexPath:</li>
</ul>


<p> 2、长按cell，显示编辑菜单
 与UITableView不同，用户长按cell时，UICollectionView可以显示编辑菜单。这个编辑菜单可以用来剪切、复制和粘贴cell。不过，要显示这个编辑菜单需要满足下面几个条件：</p>

<ul>
<li>代理对象必须实现下面三个方法：     <br/>
<code>collectionView:shouldShowMenuForItemAtIndexPath:</code>   <code>collectionView:canPerformAction:forItemAtIndexPath:withSender:</code>   <code>collectionView:performAction:forItemAtIndexPath:withSender:</code></li>
<li>对于指定要编辑的cell，<code>collectionView:shouldShowMenuForItemAtIndexPath:</code>方法需要返回<code>YES</code></li>
<li><p><code>collectionView:canPerformAction:forItemAtIndexPath:withSender:</code> 方法中，对于剪切、复制、粘贴三种action至少有一个返回YES。其实，编辑菜单是有很多种action的，但是对于UICollectionView来说，它仅仅支持的剪切、复制、粘贴三个，所以说这个代理方法至少支持这三种的一种。  <br/>
剪切、复制、粘贴的方法名是：   <br/>
<code>cut:</code>   <br/>
<code>copy:</code>   <br/>
<code>paste:</code></p>

<p>当上面的条件都满足了，用户就可以长按cell显示出编辑菜单，然后选择对应的action，从而就会回调delegate的collectionView:performAction:forItemAtIndexPath:withSender: 方法去做对应的事情。</p></li>
</ul>


<p>当我们想控制编辑菜单仅仅显示复制和粘贴时，我们就可以在<code>collectionView:canPerformAction:forItemAtIndexPath:withSender:</code>方法中进行操作，具体请见下面代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">collectionView:</span><span class="p">(</span><span class="bp">UICollectionView</span> <span class="o">*</span><span class="p">)</span><span class="nv">collectionView</span> <span class="nf">canPerformAction:</span><span class="p">(</span><span class="kt">SEL</span><span class="p">)</span><span class="nv">action</span> <span class="nf">forItemAtIndexPath:</span><span class="p">(</span><span class="bp">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="nv">indexPath</span> <span class="nf">withSender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;copy:&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="o">||</span> <span class="p">[</span><span class="n">NSStringFromSelector</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="nl">isEqualToString</span><span class="p">:</span><span class="s">@&quot;paste:&quot;</span><span class="p">])</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>三、UICollectionViewLayout</h2>

<p><code>UICollectionViewLayout</code>是通过<code>UICollectionViewLayoutAttributes</code>类来管理<code>cell</code>、<code>Supplementary View</code>和<code>Decoration View</code>的<code>位置</code>、<code>transform</code>、<code>alpha</code>、<code>hidden</code>等等。   <br/>
UICollectionViewLayout这个类只是一个基类，我们给UICollectionView使用的都是它的<code>子类</code>。系统为我们提供了一个最常用的layout为<code>UICollectionViewFlowLayout</code>，我们可以使用它制作<code>grid view</code>。当UICollectionViewLayout满足不了我们的需求时，我们可以<code>子类化UICollectionViewLayout</code>或者<code>自定义layout</code>，这个内容放到我下一篇当中。</p>

<h4>UICollectionViewFlowLayout</h4>

<p>使用UICollectionViewFlowLayout之前，我们来了解它内部常用的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//同一组当中，垂直方向：行与行之间的间距；水平方向：列与列之间的间距</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">minimumLineSpacing</span><span class="p">;</span>
</span><span class='line'><span class="c1">//垂直方向：同一行中的cell之间的间距；水平方向：同一列中，cell与cell之间的间距</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">minimumInteritemSpacing</span><span class="p">;</span>
</span><span class='line'><span class="c1">//每个cell统一尺寸</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="bp">CGSize</span> <span class="n">itemSize</span><span class="p">;</span>
</span><span class='line'><span class="c1">//滑动反向，默认滑动方向是垂直方向滑动</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="n">UICollectionViewScrollDirection</span> <span class="n">scrollDirection</span><span class="p">;</span>
</span><span class='line'><span class="c1">//每一组头视图的尺寸。如果是垂直方向滑动，则只有高起作用；如果是水平方向滑动，则只有宽起作用。</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="bp">CGSize</span> <span class="n">headerReferenceSize</span><span class="p">;</span>
</span><span class='line'><span class="c1">//每一组尾部视图的尺寸。如果是垂直方向滑动，则只有高起作用；如果是水平方向滑动，则只有宽起作用。</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="bp">CGSize</span> <span class="n">footerReferenceSize</span><span class="p">;</span>
</span><span class='line'><span class="c1">//每一组的内容缩进</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">)</span> <span class="bp">UIEdgeInsets</span> <span class="n">sectionInset</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：UICollectionViewFlowLayout内部的属性都是用来统一设置，若是统一设置无法满足需求，可以实现<code>UICollectionViewDelegateFlowLayout</code>代理方法，进行对应的设置。而后面内容我都以UICollectionViewFlowLayout的属性来叙述，请自行参照修改。</p>

<p>UICollectionViewFlowLayout在纵向滑动与横向滑动时，布局是不太一样的。</p>

<p align="center" >
  <img src="http://ww1.sinaimg.cn/large/7746cd07jw1exmpk8hs66j20ea0fcabe.jpg" width=257 height = 274>
  <img src="http://ww3.sinaimg.cn/large/7746cd07jw1exmq7ebjo2j20es0cujsp.jpg" width=266 height = 231>
</p>


<p>由上图就可以看出来，UICollectionViewFlowLayout在布局时，会根据scrollDirection的值不同而产生不同的布局。</p>

<ul>
<li><p>垂直方向滑动：</p>

<ul>
<li>Cell布局：UICollectionView的内容宽度与本身视图的宽度相等，并且是固定的。会根据<code>sectionInset左右缩进</code>、<code>itemSize的宽度</code>、<code>minimumInteritemSpacing</code>三个值来计算每一行cell数量。   <br/>
具体计算公式是:   <br/>
<code>  
cellCount = (CollectionViewContentWidth-sectionInset.left-sectionInset.right+minimumInteritemSpacing)/(itemSize.width+minimumInteritemSpacing)      
</code>
<code>CollectionViewContentWidth</code>是UICollectionView的内容宽度，计算出来的<code>cellCount</code>进行四舍五入成一个整数就是<code>每一行cell的数量</code>。  <br/>
而每个cell之间实际的间隔值则是:  <br/>
<code>realInteritemSpacing = (CollectionViewContentWidth-sectionInset.left-sectionInset.right-cellCount*itemSize.width)/(cellCount-1)</code>  <br/>
当每个cell大小确定、每一行cell的个数确定、每个cell之间的间距确定之后，UICollectionViewFlowLayout就可以计算出每一行cell的frame了。  <br/>
而如果同一组cell的个数，在水平方向的一行放不下去，则就会放入第二行，而这第二行的cell在垂直方向与第一行的cell相隔<code>minimumLineSpacing</code>。这样又确定了行与行之间的间距，那么这一组cell的布局就可以确定了。</li>
<li>头视图与尾部视图：根据headerReferenceSize和footerReferenceSize中的高来确定头部和尾部视图的高，它其实就是两个不同类型的Supplementary View。</li>
</ul>
</li>
<li><p>水平方向滑动：</p>

<ul>
<li>Cell布局：水平方向的滑动内容的高与本身视图的高是相等的，并且是固定的。它的cell是从<code>上到下进行布局</code>的。会根据<code>sectionInset上下缩进</code>、<code>itemSize的高度</code>、<code>minimumInteritemSpacing</code>三个值来计算每一列放多少个cell，具体计算公式可以参照垂直方向滑动的公式。之后的逻辑和垂直方向滑动时一样，只是minimumLineSpacing现在是代表列与列之间的间距。</li>
<li>头视图与尾部视图：根据headerReferenceSize和footerReferenceSize中的宽来确定头部和尾部视图的宽。</li>
</ul>
</li>
</ul>


<p>相关使用UICollectionViewFlowLayout代码:<a href="https://github.com/liuchungui/UICollectionViewDemo">UICollectionViewDemo</a></p>

<h2>参考</h2>

<p><a href="https://developer.apple.com/library/prerelease/ios/documentation/WindowsViews/Conceptual/CollectionViewPGforIOS/Introduction/Introduction.html">Collection View Programming Guide for iOS</a>   <br/>
<a href="http://www.onevcat.com/2012/06/introducing-collection-views/">WWDC 2012 Session笔记——205 Introducing Collection Views</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git简单总结]]></title>
    <link href="http://www.liuchungui.com/blog/2015/10/23/gitzong-jie/"/>
    <updated>2015-10-23T14:45:46+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/10/23/gitzong-jie</id>
    <content type="html"><![CDATA[<p>这篇文章分为两部分，一是搭建git服务器，二是git命令，主要是记录了一下我搭建git服务器流程和用到的相关命令。</p>

<h2>一、Mac环境下搭建Git服务器</h2>

<p>这里简单说一下Mac环境下通过git+ssh搭建服务器的流程。</p>

<h4>1、打开远程登陆</h4>

<p>系统偏好设置 -> 共享 -> 远程登陆</p>

<h4>2、添加git用户</h4>

<p>这一步不加上也可以，但是为了更好的管理和安全着想，最好加上一个git用户   <br/>
系统偏好设置 -> 用户与群组 -> 添加名为git的用户</p>

<h4>3、初始化一个空仓库</h4>

<p>在git用户目录下创建一个repos文件夹专门用来管理仓库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir repos
</span><span class='line'>$ cd repos
</span><span class='line'># 初始化一个空仓库
</span><span class='line'>$ git init --bare test.git</span></code></pre></td></tr></table></div></figure>


<h4>4、添加密钥</h4>

<p>在git服务端添加客户端的公钥后，以后git访问不需要密码了，下面是客户端与服务端的操作。    <br/>
客户端：   <br/>
使用<code>ssh-keygen</code>命令生成密钥，执行完后会生成<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，其中<code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥。客户端将<code>id_rsa.pub</code>文件交给git服务端就行了。       <br/>
服务端：       <br/>
将客户端的<code>id_rsa.pub</code>中的内容放到<code>/Users/git/.ssh/authorized_keys</code>文件中。主要，客户端每个公钥占用独立的一行，有时复制会出现问题，可以使用<code>cat id_rsa.pub &gt;&gt; /Users/git/.ssh/authorized_keys</code>命令。</p>

<!-- more -->


<h4>5、客户端使用</h4>

<p>到这一步，我们的git服务环境其实已经搭建好了，下面来使用。     <br/>
首先，我们需要知道服务端的用户和git项目的路径</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ whoami
</span><span class='line'>git
</span><span class='line'>$ pwd
</span><span class='line'>/Users/git/repos</span></code></pre></td></tr></table></div></figure>


<p>这里用户是git，路径是<code>/Users/git/repos/test.git</code>     <br/>
下面，我们就可以在客户端clone项目了。这里因为我是在本机测试，所以用的是localhost，一般都是用<code>服务器的ip或者域名</code>。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone user@localhost:/Users/user/repos/test.git
</span><span class='line'>Cloning into 'test'...
</span><span class='line'>warning: You appear to have cloned an empty repository.
</span><span class='line'>Checking connectivity... done.</span></code></pre></td></tr></table></div></figure>


<p>这里就说明服务器已经搭建好了。</p>

<p>遇到问题(这里是我在linux系统搭建时遇到的问题)：  <br/>
<code>remote: error: insufficient permission for adding an object to repository database ./objects</code>   <br/>
权限的问题，查看服务器对应的仓库的父文件夹是否属于git用户，git是否拥有可写权限</p>

<p><strong>linux系统搭建git服务器，请参考</strong><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000">搭建Git服务器</a></p>

<h2>二、Git命令</h2>

<p>1、下面是git操作的简单流程，里面的命令都是经常用到的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#克隆某个仓库的代码
</span><span class='line'>git clone https://github.com/chunguiLiu/TestLCGCocoapods.git
</span><span class='line'>#进入TestLCGCocoapods，添加文件
</span><span class='line'>cd TestLCGCocoapods
</span><span class='line'>echo "test" &gt; test.txt
</span><span class='line'>git add test.txt
</span><span class='line'>#提交文件，并添加日志为'add test.txt file'
</span><span class='line'>git commit -m 'add test.txt file'
</span><span class='line'>#推送到远程服务器
</span><span class='line'>git push origin master
</span><span class='line'>#修改文件，并推送到服务器
</span><span class='line'>echo 'add test' &gt;&gt; test.txt
</span><span class='line'>git add -update
</span><span class='line'>git commit -m 'update file'
</span><span class='line'>git push origin master
</span><span class='line'>#打上版本号，其中-m参数后面是日志，'0.1.0'是版本号
</span><span class='line'>git tag -m 'first tag' '0.1.0'
</span><span class='line'>#将版本号推送到服务器
</span><span class='line'>git push --tags</span></code></pre></td></tr></table></div></figure>


<p>2、分支是git中一个很强大的功能，这里列出我曾经使用过的相关分支命令，也许你会用到，想了解更多分支的知识请进入<a href="http://www.open-open.com/lib/view/open1328069889514.html">Git详解之三 Git分支</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#创建test分支
</span><span class='line'>git branch test
</span><span class='line'>#切换到test分支
</span><span class='line'>git checkout test
</span><span class='line'>#比较master和test两个分支
</span><span class='line'>git diff master test
</span><span class='line'>#查看当前分支
</span><span class='line'>git branch
</span><span class='line'>#删除分支
</span><span class='line'>git branch -d test
</span><span class='line'>#删除远程服务器的分支
</span><span class='line'>git push --delete origin testBranch</span></code></pre></td></tr></table></div></figure>


<p>3、查看git某个版本的内容
当我添加Cocoapods私有库的时候，想查看从pod某个版本下来的内容与我对应版本内容是否相同，这个时候，我怎么操作git？   <br/>
其实，git克隆下来的内容拥有所有版本内容，我们如果想查看某个tag版本的内容，可以使用<code>git checkout tag-version</code>命令，将这个版本当做一个分支来查看，只是这个时候它只是一个快照，我们不能修改代码。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#跳转到0.0.1版本
</span><span class='line'>git checkout 0.0.1</span></code></pre></td></tr></table></div></figure>


<p>如果我们想修改这个版本的内容时，那么我们可以通过创建一个新的分支，这个新的分支是以某个tag版本为准，可以在新的分支下修改代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#以0.0.1版本创建一个分支newBranch
</span><span class='line'>git checkout -b newBranch 0.0.1</span></code></pre></td></tr></table></div></figure>


<h2>参考：</h2>

<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000">搭建Git服务器</a>   <br/>
<a href="http://blog.jobbole.com/54184/">开发者日常使用的 Git 命令</a>   <br/>
<a href="http://www.cnblogs.com/lee0oo0/archive/2013/06/28/3161829.html">Git基本命令行操作</a>   <br/>
<a href="http://www.cnblogs.com/winterIce/archive/2012/07/22/2603488.html">github常用命令</a>   <br/>
<a href="http://www.open-open.com/lib/view/open1328069889514.html">Git详解之三 Git分支</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac环境下Nginx实现反向代理]]></title>
    <link href="http://www.liuchungui.com/blog/2015/10/21/mhuan-jing-xia-nginxshi-xian-fan-xiang-dai-li/"/>
    <updated>2015-10-21T10:16:01+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/10/21/mhuan-jing-xia-nginxshi-xian-fan-xiang-dai-li</id>
    <content type="html"><![CDATA[<h2>1、安装</h2>

<p>首先，我们需要搭建Nginx环境，我这里是通过homebrew一键式搭建，步骤如下：  <br/>
1、安装homebrew</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></code></pre></td></tr></table></div></figure>


<p>以<a href="brew.sh">官网homebrew</a>为准</p>

<p>2、安装nginx</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install nginx</span></code></pre></td></tr></table></div></figure>


<p>查看Nginx安装的版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ nginx -v</span></code></pre></td></tr></table></div></figure>


<p>Nginx常用的命令有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#查看版本，以及配置文件地址
</span><span class='line'>nginx -V
</span><span class='line'>#查看版本 
</span><span class='line'>nginx -v
</span><span class='line'>#指定配置文件
</span><span class='line'>nginx -c filename
</span><span class='line'>#帮助
</span><span class='line'>nginx -h
</span><span class='line'>#重新加载配置|重启|停止|退出 nginx
</span><span class='line'>nginx -s reload|reopen|stop|quit
</span><span class='line'>#打开 nginx
</span><span class='line'>sudo nginx
</span><span class='line'>#测试配置是否有语法错误
</span><span class='line'>sudo nginx -t</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<h2>2、Nginx配置WEB服务器</h2>

<p>使用Nginx做反向代理，我们需要了解一下Nginx中http模块的配置。</p>

<h4>编辑Nginx配置文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo vim /usr/local/etc/nginx/nginx.conf</span></code></pre></td></tr></table></div></figure>


<p>找到http模块，修改http模块中的listen为80，如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http {
</span><span class='line'>    #导入类型配置文件
</span><span class='line'>    include       mime.types;
</span><span class='line'>    #设定默认类型为二进制流
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>    #启用sendfile()函数
</span><span class='line'>    sendfile        on;
</span><span class='line'>    #客户端与服务器连接的超时时间为65秒，超过65秒，服务器关闭连接
</span><span class='line'>    keepalive_timeout  65;
</span><span class='line'>    #是否开启gzip，默认关闭
</span><span class='line'>    #gzip  on;
</span><span class='line'>    #一个server块
</span><span class='line'>    server {
</span><span class='line'>        #服务器监听的端口为80
</span><span class='line'>        listen       80;
</span><span class='line'>        #服务器名称为localhost，我们可以通过localhost来访问这个server块的服务
</span><span class='line'>        server_name  localhost;
</span><span class='line'>        #location块，它存放在server块当中，location会尝试根据用户请求中的URI来匹配上面的/uri表达式，如果可以匹配，就选择location {}块中的配置来处理用户请求。
</span><span class='line'>        location / {
</span><span class='line'>            #以root方式设置资源路径，它与alias的不同请见下面的 http模块中文件路径定义
</span><span class='line'>            root   html;
</span><span class='line'>            #默认访问的页面，从左依次找到右，直到找到这个文件，然后返回结束请求
</span><span class='line'>            index  index.html index.htm;
</span><span class='line'>            #设置错误页面，对应的错误码是404，错误页面是/Users/user/Sites/404.html
</span><span class='line'>            error_page 404  /404.html;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    include servers/*;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>http模块中文件路径定义：</h4>

<p>1、以<strong>root</strong>方式设置资源路径  <br/>
语法: root path;  <br/>
默认: root html;  <br/>
配置块: http, server, location, if   <br/>
例如，定义资源文件相对于HTTP请求的根目录。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /download/ {
</span><span class='line'>  root /opt/web/html;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在上面的配置中，如果有一个请求的URI是/download/index/test.html，那么Web服务器将会返回服务器上/opt/web/html/download/index/test.html文件的内容。</p>

<p>2、以<strong>alias</strong>方式设置资源路径   <br/>
语法：alias path;   <br/>
配置块：location     <br/>
alias也是用来设置文件资源路径的，它与root的不同点主要在于如何解读紧跟location后面的uri参数，这将会致使alias与root以不同的方式将用户请求映射到真正的磁盘文件上。  <br/>
例如，如果有一个请求的URI是/conf/nginx.conf，而用户实际想访问的文件在/usr/local/nginx/conf/nginx.conf，那么想要使用alias来进行设置的话，可以采用如下方式：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /conf {
</span><span class='line'>  alias /usr/local/nginx/conf/;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>如果用root设置，那么语句如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location /conf {
</span><span class='line'>  alias /usr/local/nginx/;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>使用alias时，在URI向实际文件路径的映射过程中，已经把location后配置的/conf这部分字符串丢弃掉，因此，/conf/nginx.conf请求将根据alias path映射为path/nginx.conf。root则不然，它会根据完整的URI请求来映射，因此/conf/nginx.conf请求会根据root path映射为path/conf/nginx.conf。这也是root可以放置到http、server、location或if块中，而alias只能放置到location块中的原因。  <br/>
alias后面还可以添加正则表达式，例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>location ~ ^/test/(\w+)\.(\w+)$ {
</span><span class='line'>  alias /usr/local/nginx/$2/$1.$2;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样，请求在访问/test/nginx.conf时，Nginx会返回/usr/local/nginx/conf/nginx.conf文件中的内容。</p>

<h4>开启Nginx的Web服务</h4>

<p>开启Nginx服务之前，如果我们开启了Apache服务，那么我需要先关闭Apache服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#开启Nginx
</span><span class='line'>$ sudo nginx</span></code></pre></td></tr></table></div></figure>


<p>使用localhost来访问，若是出现nginx欢迎页，说明成功。</p>

<h2>3、使用Nginx做反向代理</h2>

<p>反向代理（reverse proxy）方式是指用代理服务器来接受Internet上的连接请求，然后将请求转发给内部网络中的上游服务器，并将从上游服务器上得到的结果返回给Internet上请求连接的客户端，此时代理服务器对外的表现就是一个Web服务器。   <br/>
这里，我是在本机搭建，通过修改host来模拟多个域名访问本机的nginx。</p>

<h4>1、修改hosts文件</h4>

<p>$ vim /etc/hosts    <br/>
在内部添加域名解析</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1 pinger.com www.pinger.com
</span><span class='line'>127.0.0.1 test.com www.test.com
</span><span class='line'>127.0.0.1 chungui.com www.chungui.com</span></code></pre></td></tr></table></div></figure>


<h4>2、修改nginx配置文件</h4>

<p>$ sudo vim /usr/local/etc/nginx/nginx.conf    <br/>
在后面添加server模块，内部通过<code>proxy_pass</code>设置反向代理</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen  80;
</span><span class='line'>    server_name  *.pinger.com pinger.com;
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://www.baidu.com;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name *.chungui.com chungui.com;
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://www.renren.com;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>server {
</span><span class='line'>    listen 80;
</span><span class='line'>    server_name test.com;
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://www.zhihu.com;
</span><span class='line'>    }
</span><span class='line'>} </span></code></pre></td></tr></table></div></figure>


<p>其中，server_name可以指向多个域名值</p>

<h4>3、重启nginx服务</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#重启服务
</span><span class='line'>$ sudo nginx -s reload</span></code></pre></td></tr></table></div></figure>


<p>这时，反向代理已经搭建成功。你可以在本地通过<code>chungui.com</code>访问到人人网，<code>test.com</code>访问到知乎。不过，设置<code>pinger.com</code>访问的<code>http://www.baidu.com</code>站点，而百度服务器内部会自动跳转到<code>https://www.baidu.com</code>站点，所以我们通过<code>pinger.com</code>会跳转到<code>https://www.baidu.com</code>，这个时候我们可以将百度的替换成https就行了，修改配置如下：</p>

<pre><code>server {
    listen       80;
    server_name  *.pinger.com pinger.com;
    location / {
        proxy_pass https://www.baidu.com;
    }
}
</code></pre>

<p>这个时候，再使用<code>pinger.com</code>在浏览器里访问时就不会出现跳转的问题了。</p>

<h2>参考</h2>

<p><a href="http://manual.51yip.com/nginx/">Nginx中文参考手册,教程</a>    <br/>
<a href="http://blog.csdn.net/dracotianlong/article/details/21817097">mac 安装 nginx 环境</a>   <br/>
<a href="http://segmentfault.com/a/1190000002963355">Mac OS使用brew安装Nginx、MySQL、PHP-FPM的LAMP开发环境</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods创建私有Pods]]></title>
    <link href="http://www.liuchungui.com/blog/2015/10/19/cocoapodschuang-jian-si-you-pods/"/>
    <updated>2015-10-19T21:54:54+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/10/19/cocoapodschuang-jian-si-you-pods</id>
    <content type="html"><![CDATA[<p>创建Pod私有源步骤：  <br/>
1、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件  <br/>
2、添加私有的repo到CocoaPods  <br/>
3、制作Podspec，并且推送到你创建的私有repo   <br/>
4、使用Pod，在Podfile添加私有源来搭建项目</p>

<!-- more -->


<p></p>

<h3>1、创建两个git仓库，一个用来做私有的Spec Repo，一个是我们自己的公共组件</h3>

<p>在这一步当中需要git服务器用来创建仓库，我这里只是作为一个例子，所以直接使用github来当做我的服务器，我创建的这些项目都是public的。你如果是练手的话，也可以仿照我一样在github上面创建仓库。如果是为公司建立私有的公共组件库，你可以在github等平台上面创建私有仓库，或者直接搭建一个git服务器来创建仓库。搭建服务器可以参考<a href="http://www.liuchungui.com/blog/2015/10/23/gitzong-jie/">Git简单总结</a>的第一部分，里面有Mac搭建也有Linux搭建的链接。    <br/>
在这里，我们需要搭建两个git仓库。     <br/>
第一个仓库名称是<a href="https://github.com/liuchungui/first.git">first</a>，专门用来做私有Spec Repo。      <br/>
第二个仓库名称是<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>，这个就是我们公共组件库。     <br/>
在这里，我们来说一下什么是Spec Repo?</p>

<blockquote><p>他是所有的Pods的一个索引，就是一个容器，所有公开的Pods都在这个里面，他实际是一个Git仓库remote端。  <br/>
在GitHub上，当你使用了Cocoapods后他会被clone到本地的~/.cocoapods/repos目录下，可以进入到这个目录看到master文件夹就是这个官方的Spec Repo了。</p></blockquote>

<p>这里引用了<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/">使用Cocoapods创建私有podspec</a>的内容。</p>

<h3>2、添加私有的repo到CocoaPods</h3>

<p>主要命令是<code>pod repo add REPO_NAME SOURCE_URL</code>。其中，REPO_NAME是私有repo的名字，取一个容易记住的名字，后面还会用到，以后公司内部的组件对应的podspec都可以推送到这个repo中；SOURCE_URL就是刚刚我们创建的<code>first</code>仓库链接。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod repo add liuchungui https://github.com/liuchungui/first.git
</span><span class='line'>$ ls ~/.cocoapods/repos  
</span><span class='line'>liuchungui    master</span></code></pre></td></tr></table></div></figure>


<p>这时，你会发现有两个文件夹<code>liuchungui</code>和<code>master</code>，master是Cocoapods官方的repo，而liuchungui就是我刚刚创建的。进入liuchungui文件夹查看，你会发现它是clone了一份<code>https://github.com/liuchungui/first.git</code>。   <br/>
在这里，我们是一个空的仓库，可以不检查，但是你的仓库如果有什么其他东西的话，可以检查一下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd ~/.cocoapods/repos/liuchungui
</span><span class='line'>$ pod repo lint .</span></code></pre></td></tr></table></div></figure>


<h3>3、制作Podspec，并且推送到你创建的私有repo</h3>

<p>1、将我们前面创建的BGNetwork项目克隆到本地   <br/>
<code>git clone https://github.com/liuchungui/BGNetwork.git</code>   <br/>
2、在本地我们使用了xcode创建了项目，并且写了一个网络框架，运行没有问题，我们准备提交到github，并打上版本号。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'add file'
</span><span class='line'>git push origin master
</span><span class='line'>git tag -m 'add tag' '0.1.1'
</span><span class='line'>git push --tags</span></code></pre></td></tr></table></div></figure>


<p>3、我们开始制作Podspec文件。  <br/>
<code>BGNetwork</code>是一个基于<code>AFNetworking</code>而封装的网络框架，它主要的源文件都在<code>BGNetwork/BGNetwork</code>路径下。我们将它放在CocoaPods给第三方使用，主要是将这个文件夹下的源文件加载到第三方的项目中以供使用。
下面是供第三方使用的源文件结构，具体可以下载<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>代码查看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>____BGNetwork
</span><span class='line'>| |____BGAFHTTPClient.h
</span><span class='line'>| |____BGAFHTTPClient.m
</span><span class='line'>| |____BGAFRequestSerializer.h
</span><span class='line'>| |____BGAFRequestSerializer.m
</span><span class='line'>| |____BGAFResponseSerializer.h
</span><span class='line'>| |____BGAFResponseSerializer.m
</span><span class='line'>| |____BGNetworkCache.h
</span><span class='line'>| |____BGNetworkCache.m
</span><span class='line'>| |____BGNetworkConfiguration.h
</span><span class='line'>| |____BGNetworkConfiguration.m
</span><span class='line'>| |____BGNetworkConnector.h
</span><span class='line'>| |____BGNetworkConnector.m
</span><span class='line'>| |____BGNetworkManager.h
</span><span class='line'>| |____BGNetworkManager.m
</span><span class='line'>| |____BGNetworkRequest.h
</span><span class='line'>| |____BGNetworkRequest.m
</span><span class='line'>| |____BGNetworkUtil.h
</span><span class='line'>| |____BGNetworkUtil.m</span></code></pre></td></tr></table></div></figure>


<p>在BGNetwork项目的根目录下创建一个BGNetwork.podspec文件，对应上面的需求，我们的podspec可以这么写</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pod::Spec.new do |spec|
</span><span class='line'>  #项目名称
</span><span class='line'>  spec.name         = 'BGNetwork'
</span><span class='line'>  #版本号
</span><span class='line'>  spec.version      = '0.1.1'
</span><span class='line'>  #开源协议
</span><span class='line'>  spec.license      = 'MIT'
</span><span class='line'>  #对开源项目的描述
</span><span class='line'>  spec.summary      = 'BGNetwork is a request util based on AFNetworking'
</span><span class='line'>  #开源项目的首页
</span><span class='line'>  spec.homepage     = 'https://github.com/chunguiLiu/BGNetwork'
</span><span class='line'>  #作者信息
</span><span class='line'>  spec.author       = {'chunguiLiu' =&gt; 'chunguiLiu@126.com'}
</span><span class='line'>  #项目的源和版本号
</span><span class='line'>  spec.source       = { :git =&gt; 'https://github.com/chunguiLiu/BGNetwork.git', :tag =&gt; '0.1.1' }
</span><span class='line'>  #源文件，这个就是供第三方使用的源文件
</span><span class='line'>  spec.source_files = "BGNetwork/*"
</span><span class='line'>  #适用于ios7及以上版本
</span><span class='line'>  spec.platform     = :ios, '7.0'
</span><span class='line'>  #使用的是ARC
</span><span class='line'>  spec.requires_arc = true
</span><span class='line'>  #依赖AFNetworking2.0
</span><span class='line'>  spec.dependency 'AFNetworking', '~&gt; 2.0'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>注意：</strong>spec.source源是<code>BGNetwork</code>的git仓库，版本号是我们上一步打上的版本号0.1.1。</p>

<p>4、验证并推送到服务器    <br/>
在推送前，我们先验证Podspec，验证的时候是验证BGNetwork.podspec文件，所以我们需要保证进入的目录和BGNetwork.podspec同级的    <br/>
<code>$ pod lib lint</code>   <br/>
注意：验证的时候，会获取<code>BGNetwork.podspec</code>文件中的<code>spec.source</code>来获取git服务器上面对应版本的代码，然后再找到<code>spec.source_files</code>中的源代码，通过xcode命令行工具建立工程并且进行编译。所以这一步的过程会比较久，如果没有编译没有错误，就验证通过。</p>

<p>如果没有错误和警告我们就可以推送到服务器了，推送使用的命令是<code>pod repo push REPO_NAME SPEC_NAME.podspec</code>，它也会先验证，然后再推送。         <br/>
<code>$ pod repo push liuchungui BGNetwork.podspec</code> <br/>
如果没有错误，但是有警告，我们就将警告解决，也可以加<code>--allow-warnings</code>来提交   <br/>
<code>$ pod repo push liuchungui BGNetwork.podspec --allow-warnings</code>   <br/>
如果有错误，我们可以去查看错误信息对应下的Note信息并解决。在这错误当中，常常会遇到找不到对应文件的错误，这个时候你需要查看<code>BGNetwork.podspec</code>文件中<code>spec.source</code>下git仓库链接是否没问题，git仓库下对应的tag版本中<code>spec.source_files</code>路径下是否正确。</p>

<p>5、搜索我们的框架
到这一步，我们就可以通过<code>pod search BGNetwork</code>来搜索了，搜索到了说明我们私有源建立成功。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod search BGNetwork
</span><span class='line'>-&gt; BGNetwork (0.1.2)
</span><span class='line'>   BGNetwork is a request util based on AFNetworking
</span><span class='line'>   pod 'BGNetwork', '~&gt; 0.1.2'
</span><span class='line'>   Homepage: https://github.com/chunguiLiu/BGNetwork
</span><span class='line'>   Source:   https://github.com/chunguiLiu/BGNetwork.git
</span><span class='line'>   Versions: 0.1.1, 0.1.0 [liuchungui repo] - 0.1.2, 0.1.1 [master repo]</span></code></pre></td></tr></table></div></figure>


<p>由上面的搜索知道，BGNetwork在liuchungui这个私有repo中存在0.1.1和0.1.0版本，在master中存在0.1.2和0.1.1版本。  <br/>
搜索成功之后，我们将BGNetwork.podspec也推送到远程服务器。</p>

<h3>4、使用Pod，在Podfile添加私有源来搭建项目</h3>

<p>使用时，在Podfile文件中添加<strong>本地私有源和官方源</strong>。如果没有添加本地私有源，它默认是用官方的repo，这样找不到本地的Pod；如果只是设置了本地私有源，就不会再去官方源中查找。
 下面是Podfile内容</p>

<pre><code class="```">   #官方Cocoapods的源
   source 'https://github.com/CocoaPods/Specs.git'
   #本地私有源
   source 'https://github.com/liuchungui/first.git'
   platform :ios, '7.0'
   pod 'BGNetwork', '~&gt; 0.1.1'
</code></pre>

<h4>注意</h4>

<p>1、途中遇到了几次问题，就是<code>pod repo push</code>不上去，显示没有找到对应文件，后来发现是版本的问题，没有打上版本号或者<code>Podspec</code>中版本错了。所以我们在维护一个框架时，修改框架之后，push到git服务器之后先打上tag，然后再修改podspec文件中的版本，最后push到对应的pod repo中。</p>

<p>2、若是在框架当中，存在不同的文件夹，请使用<code>subspec</code>。如果不同文件夹之间的文件有相互导入的情况，请将被导入的头文件设置为<code>public_header_files</code>，并且通过<code>dependency</code>设置依赖，具体可以参考<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking.podspec">AFNetworking的podspec</a>文件。</p>

<p>3、若是需要提交给官方，请使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod trunk register youremail
</span><span class='line'>查看信息
</span><span class='line'>pod trunk me
</span><span class='line'>将对应的pod推送到服务器
</span><span class='line'>pod trunk push</span></code></pre></td></tr></table></div></figure>


<p>4、使用<code>pod install</code>时，它首先会更新整个官方的源，而Cocoapods每天都有很多人提交，所以更新比较慢。所以，建议每过一段时间更新一下官方库，平常的时候，咱们可以在<code>instal</code>l或<code>update</code>加一个参数<code>--no-repo-update</code>让它不用更新。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pod install --verbose --no-repo-update
</span><span class='line'>$ pod update --verbose --no-repo-update</span></code></pre></td></tr></table></div></figure>


<h4>参考</h4>

<p><a href="https://guides.cocoapods.org/making/private-cocoapods.html">Private Pods</a>   <br/>
<a href="http://blog.wtlucky.com/blog/2015/02/26/create-private-podspec/">使用Cocoapods创建私有podspec</a>   <br/>
<a href="http://blog.csdn.net/wzzvictory/article/details/18737437?utm_source=tuicool">CocoaPods详解之&mdash;-使用篇</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS9之适配ATS]]></title>
    <link href="http://www.liuchungui.com/blog/2015/10/11/ios9zhi-gua-pei-ats/"/>
    <updated>2015-10-11T13:15:11+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/10/11/ios9zhi-gua-pei-ats</id>
    <content type="html"><![CDATA[<p>最近的iOS9系统出来了，而网络方面的ATS(App Transport Security)特性可以说每个人都要经历。而我这篇博客，就是结合我最近几天的经历，来谈谈从服务器到iOS客户端对ATS的适配。</p>

<h3>一、简单谈谈ATS(App Transport Security)</h3>

<p>ATS(App Transport Security)是为了提高App与服务器之间安全传输数据一个特性，这个特性从iOS9和OSX10.11开始出现，它默认需要满足以下几个条件：</p>

<ul>
<li>服务器TLS版本至少是1.2版本</li>
<li>连接加密只允许几种先进的加密</li>
<li>证书必须使用SHA256或者更好的哈希算法进行签名，要么是2048位或者更长的RSA密钥，要么就是256位或更长的ECC密钥</li>
</ul>


<p>如果想了解哪几种先进的加密是被允许的，详情请见官方文档<a href="https://developer.apple.com/library/mac/technotes/App-Transport-Security-Technote/">App Transport Security Technote</a></p>

<!-- more -->


<h3>二、搭建HTTPS服务器</h3>

<p>搭建HTTPS服务器有两种方式，一种是创建证书请求，然后到权威机构认证，随之配置到服务器；另外一种是自建证书，然后配置给服务器。第一种方式搭建的HTTPS服务器当然是最优的了，建立网站的话，直接就会被信任，而作为移动端app的服务器时，也不需要为ATS做过多的适配。虽然说权威的机构认证都是需要钱的，但是如今也不乏存在免费的第三方认证机构；第二种方式搭建的HTTPS服务器，对于网站来说完全不可行，用户打开时直接弹出一个警告提醒，说这是一个不受信任的网站，让用户是否继续，体验很差，而且让用户感觉网站不安全。对于移动端来说，在iOS9出现之前，这个没什么问题，但是在iOS9出来之后，第二种方式是通不过ATS特性，需要将NSAllowsArbitraryLoads设置为YES才行。所以，我推荐使用第一种方式搭建HTTPS服务器。   <br/>
下面，咱们来说说这两种方式都如何进行操作。</p>

<h5>第一种、使用CA机构认证的证书搭建HTTPS服务器</h5>

<p>1、创建证书请求，并提交给CA机构认证</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#生成私钥
</span><span class='line'>openssl genrsa -des3 -out private.key 2048
</span><span class='line'>#生成服务器的私钥，去除密钥口令 
</span><span class='line'>openssl rsa -in private.key -out server.key
</span><span class='line'>#生成证书请求
</span><span class='line'>openssl req -new -key private.key -out server.csr</span></code></pre></td></tr></table></div></figure>


<p>将生成server.csr提交给CA机构，CA机构对它进行签名之后，然后会生成签名后的根证书和服务器证书发送给你，这个时候的证书就是CA认证之后的证书。我们这里将根证书和服务器证书分别改名为ca.crt和serve.crt。</p>

<p>2、配置Apache服务器   <br/>
将ca.crt、server.key、server.crt上传到阿里云服务器，使用SSH登陆进入这三个文件的目录，执行下面命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ssl
</span><span class='line'>cp server.crt /alidata/server/httpd/conf/ssl/server.crt
</span><span class='line'>cp server.key /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>cp demoCA/cacert.pem /alidata/server/httpd/conf/ssl/ca.crt
</span><span class='line'>cp -r ssl /alidata/server/httpd/conf/</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/alidata/server/httpd/conf/extra/httpd-ssl.conf</code>文件，找到SSLCertificateFile、SSLCertificateKeyFile、SSLCACertificatePath、SSLCACertificateFile进行修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 指定服务器证书位置
</span><span class='line'>SSLCertificateFile "/alidata/server/httpd/conf/ssl/server.crt"
</span><span class='line'># 指定服务器证书key位置
</span><span class='line'>SSLCertificateKeyFile "/alidata/server/httpd/conf/ssl/server.key"
</span><span class='line'># 证书目录
</span><span class='line'>SSLCACertificatePath "/alidata/server/httpd/conf/ssl"
</span><span class='line'># 根证书位置
</span><span class='line'>SSLCACertificateFile "/alidata/server/httpd/conf/ssl/ca.crt"</span></code></pre></td></tr></table></div></figure>


<p>修改vhost配置<code>vim /alidata/server/httpd/conf/vhosts/phpwind.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:443&gt;
</span><span class='line'>        SSLCertificateFile    /alidata/server/httpd/conf/ssl/server.crt
</span><span class='line'>        SSLCertificateKeyFile /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>        SSLCACertificatePath /alidata/server/httpd/conf/ssl
</span><span class='line'>        SSLCACertificateFile /alidata/server/httpd/conf/ssl/ca.crt
</span><span class='line'>        ServerName www.casetree.cn
</span><span class='line'>        DocumentRoot /alidata/www
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>最后，重启Apache服务器，在浏览器输入网址查看是否配置成功。我这里是个人使用，申请的是免费的证书，我申请证书的网站是<a href="https://buy.wosign.com">沃通</a>。  <br/>
搭建的成果：<a href="https://www.casetree.cn">https://www.casetree.cn</a></p>

<h5>第二种、自建证书配置HTTPS服务器</h5>

<p>请查看我的上一篇<a href="http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/">自建证书配置HTTPS服务器</a></p>

<h3>三、使用nscurl对服务器进行检测</h3>

<p>搭建完HTTPS服务器之后，可以使用nscurl命令来进行检测，查看建立的HTTPS服务器是否能通过ATS特性。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nscurl --ats-diagnostics --verbose https://casetree.cn</span></code></pre></td></tr></table></div></figure>


<p>如果HTTPS服务器能通过ATS特性，则上面所有测试案例都是PASS；如果某一项的Reuslt是FAIL，就找到ATS Dictionary来查看，就能知道HTTPS服务器不满足ATS哪个条件。
这里我前面碰到一个问题，就是自建证书的时候，通过此命令进行测试时，发现Result全是FAIL，而且在iOS的代码测试中也出现了一个很奇怪的现象，就是相同的代码，在iOS8.4请求数据完全正常，但是在iOS9上，直接是连接失败。最终发现，其实就是因为自建证书不受信任，是通不过ATS的，除非将NSAllowsArbitraryLoads设置为YES。</p>

<h3>四、iOS客户端</h3>

<p>在上面的第二大步骤当中，HTTPS服务器满足ATS默认的条件，而且SSL证书是通过权威的CA机构认证过的，那么我们在使用Xcode7开发的时候，对网络的适配什么都不用做，我们也能正常与服务器通信。但是，当我们对安全性有更高的要求时或者我们自建证书时，我们需要本地导入证书来进行验证。   <br/>
那么，如何本地导入证书进行验证呢？   <br/>
在这里先提一下，由于iOS客户端支持的证书是DER格式的，我们需要创建客户端证书。创建客户端证书，直接将服务端的CA根证书导出成DER格式就行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl  x509  -inform PEM  -outform DER -in ca.crt -out ca.cer</span></code></pre></td></tr></table></div></figure>


<p>导入完证书之后，我们分别来说说使用NSURLSession和AFNetworking来进行本地验证。</p>

<h5>首先，来说说使用NSURLSession验证</h5>

<p>验证步骤如下：   <br/>
1、导入CA根证书到工程中，即我们创建的ca.cer   <br/>
2、获取trust object，通过SecCertificateCreateWithData方法读取导入的证书的数据生成一个证书对象，然后通过SecTrustSetAnchorCertificates
设置这个证书为trust object的信任根证书（trusted anchor)  <br/>
3、通过SecTrustEvaluate方法去验证trust object  <br/>
下面是主要OC实现代码，Demo工程我也放在github上了，有OC和Swift两种语言，下载Demo请点击<a href="https://github.com/liuchungui/HTTPSConnectDemo">HTTPSConnectDemo</a>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidLoad</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//导入客户端证书</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">cerPath</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="nl">pathForResource</span><span class="p">:</span><span class="s">@&quot;ca&quot;</span> <span class="nl">ofType</span><span class="p">:</span><span class="s">@&quot;cer&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSData</span> <span class="nl">dataWithContentsOfFile</span><span class="p">:</span><span class="n">cerPath</span><span class="p">];</span>
</span><span class='line'>    <span class="n">SecCertificateRef</span> <span class="n">certificate</span> <span class="o">=</span> <span class="n">SecCertificateCreateWithData</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFDataRef</span><span class="p">)</span> <span class="n">data</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">self</span><span class="p">.</span><span class="n">trustedCerArr</span> <span class="o">=</span> <span class="l">@[</span><span class="p">(</span><span class="k">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">certificate</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//发送请求</span>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span><span class="n">testURL</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURL</span> <span class="nl">URLWithString</span><span class="p">:</span><span class="s">@&quot;https://casetree.cn/web/test/demo.php&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSURLSession</span> <span class="o">*</span><span class="n">session</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLSession</span> <span class="nl">sessionWithConfiguration</span><span class="p">:[</span><span class="bp">NSURLSessionConfiguration</span> <span class="n">defaultSessionConfiguration</span><span class="p">]</span> <span class="nl">delegate</span><span class="p">:</span><span class="nb">self</span> <span class="nl">delegateQueue</span><span class="p">:[</span><span class="bp">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]];</span>
</span><span class='line'>    <span class="bp">NSURLSessionDataTask</span> <span class="o">*</span><span class="n">task</span> <span class="o">=</span> <span class="p">[</span><span class="n">session</span> <span class="nl">dataTaskWithRequest</span><span class="p">:[</span><span class="bp">NSURLRequest</span> <span class="nl">requestWithURL</span><span class="p">:</span><span class="n">testURL</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">task</span> <span class="n">resume</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// Do any additional setup after loading the view, typically from a nib.</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#pragma mark - NSURLSessionDelegate</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">URLSession:</span><span class="p">(</span><span class="bp">NSURLSession</span> <span class="o">*</span><span class="p">)</span><span class="nv">session</span> <span class="nf">didReceiveChallenge:</span><span class="p">(</span><span class="bp">NSURLAuthenticationChallenge</span> <span class="o">*</span><span class="p">)</span><span class="nv">challenge</span>
</span><span class='line'> <span class="nf">completionHandler:</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="n">NSURLSessionAuthChallengeDisposition</span> <span class="n">disposition</span><span class="p">,</span> <span class="bp">NSURLCredential</span> <span class="o">*</span> <span class="n">__nullable</span> <span class="n">credential</span><span class="p">))</span><span class="nv">completionHandler</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">OSStatus</span> <span class="n">err</span><span class="p">;</span>
</span><span class='line'>    <span class="n">NSURLSessionAuthChallengeDisposition</span> <span class="n">disposition</span> <span class="o">=</span> <span class="n">NSURLSessionAuthChallengePerformDefaultHandling</span><span class="p">;</span>
</span><span class='line'>    <span class="n">SecTrustResultType</span>  <span class="n">trustResult</span> <span class="o">=</span> <span class="n">kSecTrustResultInvalid</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSURLCredential</span> <span class="o">*</span><span class="n">credential</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//获取服务器的trust object</span>
</span><span class='line'>    <span class="n">SecTrustRef</span> <span class="n">serverTrust</span> <span class="o">=</span> <span class="n">challenge</span><span class="p">.</span><span class="n">protectionSpace</span><span class="p">.</span><span class="n">serverTrust</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//将读取的证书设置为serverTrust的根证书</span>
</span><span class='line'>    <span class="n">err</span> <span class="o">=</span> <span class="n">SecTrustSetAnchorCertificates</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFArrayRef</span><span class="p">)</span><span class="nb">self</span><span class="p">.</span><span class="n">trustedCerArr</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="n">noErr</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">//通过本地导入的证书来验证服务器的证书是否可信，如果将SecTrustSetAnchorCertificatesOnly设置为NO，则只要通过本地或者系统证书链任何一方认证就行</span>
</span><span class='line'>        <span class="n">err</span> <span class="o">=</span> <span class="n">SecTrustEvaluate</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">trustResult</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">err</span> <span class="o">==</span> <span class="n">errSecSuccess</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">trustResult</span> <span class="o">==</span> <span class="n">kSecTrustResultProceed</span> <span class="o">||</span> <span class="n">trustResult</span> <span class="o">==</span> <span class="n">kSecTrustResultUnspecified</span><span class="p">)){</span>
</span><span class='line'>        <span class="c1">//认证成功，则创建一个凭证返回给服务器</span>
</span><span class='line'>        <span class="n">disposition</span> <span class="o">=</span> <span class="n">NSURLSessionAuthChallengeUseCredential</span><span class="p">;</span>
</span><span class='line'>        <span class="n">credential</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSURLCredential</span> <span class="nl">credentialForTrust</span><span class="p">:</span><span class="n">serverTrust</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="n">disposition</span> <span class="o">=</span> <span class="n">NSURLSessionAuthChallengeCancelAuthenticationChallenge</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//回调凭证，传递给服务器</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">completionHandler</span><span class="p">){</span>
</span><span class='line'>        <span class="n">completionHandler</span><span class="p">(</span><span class="n">disposition</span><span class="p">,</span> <span class="n">credential</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意：   <br/>
1、SecTrustSetAnchorCertificates方法会设置一个标示去屏蔽trust object对其它根证书的信任；如果你也想信任系统默认的根证书，请调用SecTrustSetAnchorCertificatesOnly方法，清空这个标示（设置为NO）
2、验证的方法不仅仅只有这一种，更多的验证方法，请参考<a href="https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECCUSTOMIZEAPIS">HTTPS Server Trust Evaluation</a></p>

<h5>下面，来谈谈AFNetworking是如何验证的，我们如何使用AFNetworking</h5>

<p>AFNetworking的证书验证工作是由AFSecurityPolicy来完成的，所以这里我们主要来了解一下AFSecurityPolicy。<strong>注意：我这里使用的是AFNetworking2.6.0，它跟2.5.0是有区别的。</strong>  <br/>
说到AFSecurityPolicy，我们必须要提到它三个重要的属性，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">readonly</span><span class="p">,</span> <span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="n">AFSSLPinningMode</span> <span class="n">SSLPinningMode</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">allowInvalidCertificates</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="k">nonatomic</span><span class="p">,</span> <span class="k">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">validatesDomainName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>SSLPingMode是最重要的属性，它标明了AFSecurityPolicy是以何种方式来验证。它是一个枚举类型，这个枚举类型有三个值，分别是AFSSLPinningModeNone、AFSSLPinningModePublicKey、AFSSLPinningModeCertificate。其中，AFSSLPinningModeNone代表了AFSecurityPolicy不做更严格的验证，只要是系统信任的证书就可以通过验证，不过，它受到allowInvalidCertificates和validatesDomainName的影响；AFSSLPinningModePublicKey是通过比较证书当中公钥(PublicKey)部分来进行验证，通过SecTrustCopyPublicKey方法获取本地证书和服务器证书，然后进行比较，如果有一个相同，则通过验证，此方式主要适用于自建证书搭建的HTTPS服务器和需要较高安全要求的验证；AFSSLPinningModeCertificate则是直接将本地的证书设置为信任的根证书，然后来进行判断，并且比较本地证书的内容和服务器证书内容是否相同，来进行二次判断，此方式适用于较高安全要求的验证。   <br/>
allowInvalidCertificates属性代表是否允许不信任的证书通过验证，默认为NO   <br/>
validatesDomainName属性代表是否验证主机名，默认为YES</p>

<p>接下来，我们说下验证流程。验证流程主要放在AFSecurityPolicy的- (BOOL)evaluateServerTrust:(SecTrustRef)serverTrust forDomain:(NSString *)domain方法当中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">evaluateServerTrust:</span><span class="p">(</span><span class="n">SecTrustRef</span><span class="p">)</span><span class="nv">serverTrust</span>
</span><span class='line'>                  <span class="nf">forDomain:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">domain</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//当使用自建证书验证域名时，需要使用AFSSLPinningModePublicKey或者AFSSLPinningModeCertificate</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">domain</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="p">.</span><span class="n">allowInvalidCertificates</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="p">.</span><span class="n">validatesDomainName</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">SSLPinningMode</span> <span class="o">==</span> <span class="n">AFSSLPinningModeNone</span> <span class="o">||</span> <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">pinnedCertificates</span> <span class="n">count</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;In order to validate a domain name for self signed certificates, you MUST use pinning.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">policies</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">//需要验证域名时，需要添加一个验证域名的策略</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">validatesDomainName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">policies</span> <span class="nl">addObject</span><span class="p">:(</span><span class="k">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">SecPolicyCreateSSL</span><span class="p">(</span><span class="nb">true</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">domain</span><span class="p">)];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">policies</span> <span class="nl">addObject</span><span class="p">:(</span><span class="k">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">SecPolicyCreateBasicX509</span><span class="p">()];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//设置验证的策略，可以是多个</span>
</span><span class='line'>    <span class="n">SecTrustSetPolicies</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFArrayRef</span><span class="p">)</span><span class="n">policies</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//SSLPinningMode为AFSSLPinningModeNone时，allowInvalidCertificates为YES，则代表服务器任何证书都能验证通过；如果它为NO，则需要判断此服务器证书是否是系统信任的证书</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">SSLPinningMode</span> <span class="o">==</span> <span class="n">AFSSLPinningModeNone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">allowInvalidCertificates</span> <span class="o">||</span> <span class="n">AFServerTrustIsValid</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">)){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">AFServerTrustIsValid</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nb">self</span><span class="p">.</span><span class="n">allowInvalidCertificates</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//获取服务器证书的内容</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">serverCertificates</span> <span class="o">=</span> <span class="n">AFCertificateTrustChainForServerTrust</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">);</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">SSLPinningMode</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AFSSLPinningModeNone</span><span class="p">:</span>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AFSSLPinningModeCertificate</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//AFSSLPinningModeCertificate是直接将本地的证书设置为信任的根证书，然后来进行判断，并且比较本地证书的内容和服务器证书内容是否相同，如果有一个相同则返回YES</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">pinnedCertificates</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="n">certificateData</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">pinnedCertificates</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">pinnedCertificates</span> <span class="nl">addObject</span><span class="p">:(</span><span class="k">__bridge_transfer</span> <span class="kt">id</span><span class="p">)</span><span class="n">SecCertificateCreateWithData</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFDataRef</span><span class="p">)</span><span class="n">certificateData</span><span class="p">)];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">//设置本地的证书为根证书</span>
</span><span class='line'>            <span class="n">SecTrustSetAnchorCertificates</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">CFArrayRef</span><span class="p">)</span><span class="n">pinnedCertificates</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//通过本地的证书来判断服务器证书是否可信，不可信，则验证不通过</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">AFServerTrustIsValid</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//判断本地证书和服务器证书的内容是否相同</span>
</span><span class='line'>            <span class="bp">NSUInteger</span> <span class="n">trustedCertificateCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="bp">NSData</span> <span class="o">*</span><span class="n">trustChainCertificate</span> <span class="k">in</span> <span class="n">serverCertificates</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">([</span><span class="nb">self</span><span class="p">.</span><span class="n">pinnedCertificates</span> <span class="nl">containsObject</span><span class="p">:</span><span class="n">trustChainCertificate</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">trustedCertificateCount</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">trustedCertificateCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">AFSSLPinningModePublicKey</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">//AFSSLPinningModePublicKey是通过比较证书当中公钥(PublicKey)部分来进行验证，通过SecTrustCopyPublicKey方法获取本地证书和服务器证书，然后进行比较，如果有一个相同，则通过验证</span>
</span><span class='line'>
</span><span class='line'>            <span class="bp">NSUInteger</span> <span class="n">trustedPublicKeyCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="bp">NSArray</span> <span class="o">*</span><span class="n">publicKeys</span> <span class="o">=</span> <span class="n">AFPublicKeyTrustChainForServerTrust</span><span class="p">(</span><span class="n">serverTrust</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">//判断服务器证书的公钥与本地的证书公钥是否相同，相同则客户端认证通过</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">trustChainPublicKey</span> <span class="k">in</span> <span class="n">publicKeys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">pinnedPublicKey</span> <span class="k">in</span> <span class="nb">self</span><span class="p">.</span><span class="n">pinnedPublicKeys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="n">AFSecKeyIsEqualToKey</span><span class="p">((</span><span class="k">__bridge</span> <span class="n">SecKeyRef</span><span class="p">)</span><span class="n">trustChainPublicKey</span><span class="p">,</span> <span class="p">(</span><span class="k">__bridge</span> <span class="n">SecKeyRef</span><span class="p">)</span><span class="n">pinnedPublicKey</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">trustedPublicKeyCount</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">trustedPublicKeyCount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>说了验证流程，我们最后来看看AFNetworking怎么使用，代码如下：</p>

<pre><code> _httpClient = [[BGAFHTTPClient alloc] initWithBaseURL:[NSURL URLWithString:baseURL]];
 AFSecurityPolicy *policy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate];
 //是否允许CA不信任的证书通过
policy.allowInvalidCertificates = YES;
//是否验证主机名
policy.validatesDomainName = YES;
_httpClient.securityPolicy = policy;  
</code></pre>

<p> 这里我就没有建立Demo了，如果要看的话，可以看看我写的一个框架<a href="https://github.com/liuchungui/BGNetwork">BGNetwork</a>，里面的Demo对ATS进行了适配，AFNetworking的使用放在BGNetworkConnector类里面的<code>- (instancetype)initWithBaseURL:(NSString *)baseURL delegate:(id&lt;BGNetworkConnectorDelegate&gt;)delegate</code>初始化方法中。</p>

<h3>五、适配ATS</h3>

<p>前面的内容讲述都是满足ATS特性的情况，但若是服务器是自建证书搭建的，或者TLS版本是1.0的话，服务器又不能轻易改动，那么我们客户端如何适配呢？
不急，我们可以在工程中的Info.plist文件当中进行设置，主要参照下图：
<img src="http://ww3.sinaimg.cn/large/91c6e389jw1ewvshzy5ilj21340m641y.jpg" alt="图片" />
适配过程中的一些总结： <br/>
1、如果是自建证书，没有经过权威机构认证的证书，那么需要将NSAllowsArbitraryLoads设置为YES才能通过。NSAllowsArbitraryLoads为YES，以前的HTTP请求也能通过。       <br/>
2、如果是认证过的证书，那么可以通过<code>nscurl --ats-diagnostics --verbose https://casetree.cn</code>这样的命令来查看服务器支持的ATS Dictionary，然后进行对应的设置。</p>

<p>适配的部分，也可以参照<a href="https://github.com/ChenYilong/iOS9AdaptationTips#1-demo1_ios9%E7%BD%91%E7%BB%9C%E9%80%82%E9%85%8D_ats%E6%94%B9%E7%94%A8%E6%9B%B4%E5%AE%89%E5%85%A8%E7%9A%84https">Demo1_iOS9网络适配_ATS：改用更安全的HTTPS</a></p>

<h3>总结</h3>

<p>回顾前面的内容，总结一下，主要讲了一下几点内容  <br/>
1. ATS需要满足的条件  <br/>
2. 如何建立证书，搭建HTTPS服务器    <br/>
3. 使用nscurl命令来检测HTTPS服务器是否满足ATS特性  <br/>
4. 客户端的适配，讲述了NSURLSession和AFNetworking的使用  <br/>
5. 讲述了如果建立的服务器不满足ATS的条件时，我们如何适配</p>

<h3>参考</h3>

<p><a href="https://developer.apple.com/library/mac/technotes/App-Transport-Security-Technote/">App Transport Security Technote</a>   <br/>
<a href="https://developer.apple.com/library/ios/technotes/tn2232/_index.html#//apple_ref/doc/uid/DTS40012884-CH1-SECCUSTOMIZEAPIS">HTTPS Server Trust Evaluation</a>   <br/>
<a href="http://www.cocoachina.com/ios/20150810/12947.html">打造安全的App！iOS安全系列之 HTTPS</a>   <br/>
<a href="http://www.cocoachina.com/ios/20140916/9632.html">AFNetworking源码解析&lt;三></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自建证书配置HTTPS服务器]]></title>
    <link href="http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi/"/>
    <updated>2015-09-25T11:24:02+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/09/25/zi-jian-zheng-shu-pei-zhi-httpsfu-wu-qi</id>
    <content type="html"><![CDATA[<h3>说明</h3>

<p>1、写这篇博客的初衷是因为最近iOS9出来了，苹果官方默认要求使用HTTPS，所以自己想整一个HTTPS服务器，也想好好了解一下HTTPS通信，也知道了HTTPS其实就是在HTTP的基础上加上了SSL/TLS。具体想了解SSL/TLS原理的请浏览<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL/TLS协议运行机制的概述</a>和<a href="http://segmentfault.com/a/1190000002554673">SSL/TLS原理详解</a>。中途看了很多博客，也花了不少时间，所以想记录一些东西。</p>

<p>2、这篇博客的内容主要是讲升级openssl、如何自己创建证书、配置证书到服务器和自建CA。其中对证书不太了解的，可以看<a href="http://kb.cnblogs.com/page/194742/">数字证书及CA的扫盲介绍</a>这篇文章。本篇博客其中第2步和第3步已经重复，只需要选择其中一步操作就可以搭建HTTPS服务器，当然搭建都是不受信任的，如果是架设网站还是需要到权威的CA机构申请证书。本来还有生成iOS客户端的证书和使用证书连接服务器相关的内容，由于篇幅的原因就把它放在下一篇吧。</p>

<p>3、本人使用了Mac10.10.5和Ubuntu 14.04.1进行配置搭建，本篇博客主要以Unbuntu 14.04.1系统为主。而本人这个Ubuntu 14.04.1是阿里云一键安装的，而且没有更改里面的服务器设置，所以诸多的配置可能与一般Linux系统不太相同（与我电脑上的Linux mint就很大不同）。不过，我会在最后说明一下Mac和Linux配置一些不同的地方，其实都是一些相关路径的不同。当然，有可能你的Apache安装路径与我说的几种路径都不同，没关系，对照着修改也应该没什么问题。</p>

<!-- more -->


<h3>1、安装升级openssl</h3>

<h5>首先，查看下当前设备的openssl版本，如果版本在openssl1.0.1g以上，请略过</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl version -a
</span><span class='line'>#OpenSSL 1.0.1f 6 Jan 2014</span></code></pre></td></tr></table></div></figure>


<p>如果是处于<code>1.0.1-1.0.1f</code>的版本，那就赶快升级到<code>1.0.1g</code>版本以上吧！因为这些版本存在漏洞，详情请见<a href="http://drops.wooyun.org/papers/1381">关于OpenSSL“心脏出血”漏洞的分析</a></p>

<p>从上面信息可以看出我们的系统版本是1.0.1f，openssl需要升级，那我们先来下载源代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://www.openssl.org/source/openssl-1.0.1g.tar.gz     </span></code></pre></td></tr></table></div></figure>


<p>下载完之后，解压并进行安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -zxvf openssl-1.0.1g.tar.gz      
</span><span class='line'>cd  openssl-1.0.1g           
</span><span class='line'>./config shared zlib          
</span><span class='line'>make && make install        </span></code></pre></td></tr></table></div></figure>


<p>安装的过程中，碰到了一个问题
make: *** [install_docs] Error 255
解决这个问题请使用<code>make install_sw</code>安装，详情见<a href="https://github.com/openssl/openssl/issues/57">https://github.com/openssl/openssl/issues/57</a></p>

<h5>随后，进行相关的设置</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#修改历史的OpenSSL文件设置备份
</span><span class='line'>mv /usr/bin/openssl /usr/bin/openssl.old
</span><span class='line'>mv /usr/include/openssl /usr/include/openssl.old
</span><span class='line'>
</span><span class='line'>#设置软连接使其使用新的OpenSSL版本 刚刚安装的OpenSSL默认安装在/usr/local/ssl
</span><span class='line'>ln -s /usr/local/ssl/bin/openssl /usr/bin/openssl
</span><span class='line'>ln -s /usr/local/ssl/include/openssl /usr/include/openssl
</span><span class='line'>
</span><span class='line'>#更新动态链接库数据
</span><span class='line'>echo "/usr/local/ssl/lib" &gt;&gt; /etc/ld.so.conf
</span><span class='line'>ldconfig -v</span></code></pre></td></tr></table></div></figure>


<p>最后查看一下版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl version
</span><span class='line'>OpenSSL 1.0.1g 7 Apr 2014</span></code></pre></td></tr></table></div></figure>


<p>1.0.1g版本安装成功</p>

<h3>2、创建用私钥签名的证书，配置到Apache服务器</h3>

<h5>首先，生成私钥，创建请求证书，使用私钥对证书进行签名</h5>

<p>生成私钥  <br/>
<code>openssl genrsa -des3 -out private.key 2048</code> <br/>
-des3代表加上了加密，后面的2048是代表生成的密钥的位数，1024已经不是很安全，详情请见<a href="http://get.jobdeer.com/1607.get">互联网全站HTTPS的时代已经到来</a></p>

<p>生成证书请求   <br/>
<code>openssl req -new -key private.key -out server.csr</code>  <br/>
这一步需要填写一些信息，其中<code>Common Name (e.g. server FQDN or YOUR name) []</code>这个需要填写你的域名或服务器地址。</p>

<p>生成服务器的私钥，去除密钥口令   <br/>
<code>openssl rsa -in private.key -out server.key</code></p>

<p>使用私钥为证书请求签名，生成给服务器签署的证书，格式是x509的PEM格式  <br/>
<code>openssl x509 -req -in server.csr -out server.crt -outform pem -signkey server.key -days 3650</code> <br/>
-outform pem指定证书生成的格式，默认是pem，所以这个命令也可以写作成<code>sudo openssl x509 -req -in server.csr -out server.crt -signkey server.key -days 3650</code>。</p>

<p>将证书copy到Apache配置路径下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo  mkdir /alidata/server/httpd/conf/ssl
</span><span class='line'>cp server.key /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>cp server.crt  /alidata/server/httpd/conf/ssl/server.crt</span></code></pre></td></tr></table></div></figure>


<h5>其次，配置Apache服务器</h5>

<p>编辑/alidata/server/httpd/conf/httpd.conf文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#LoadModule ssl_module modules/mod_ssl.so
</span><span class='line'>#LoadModule socache_shmcb_module modules/mod_socache_shmcb.so
</span><span class='line'>#Include conf/extra/httpd-ssl.conf</span></code></pre></td></tr></table></div></figure>


<p>将这三行前面的#去掉</p>

<p>编辑<code>/alidata/server/httpd/conf/extra/httpd-ssl.conf</code>文件，找到SSLCertificateFile、SSLCertificateKeyFile，修改它们两对应的文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SSLCertificateFile "/alidata/server/httpd/conf/ssl/server.crt"
</span><span class='line'>SSLCertificateKeyFile "/alidata/server/httpd/conf/ssl/server.key"</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/alidata/server/httpd/conf/vhosts/phpwind.conf</code>文件，这里我没有更改阿里云的配置，如果你不是阿里云服务器，找到对应的<code>httpd/conf/extra/httpd-vhosts.conf</code>文件进行修改。这个文件我主要加了下面的内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:443&gt;
</span><span class='line'>        SSLCertificateFile    /alidata/server/httpd/conf/ssl/server.crt
</span><span class='line'>        SSLCertificateKeyFile /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>        ServerName 182.92.5.161
</span><span class='line'>        DocumentRoot /alidata/www
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>最后，咱们重启Apache服务器，输入链接查看是否配置成功。</p>

<h3>3、自建CA，用CA证书进行签名，配置到Apache服务器</h3>

<h5>第一步、使用CA.sh创建CA根证书</h5>

<p>修改openssl的配置文件<code>sudo vim /usr/local/ssl/openssl.cnf</code>，修改<code>default_bits=1024</code>为<code>default_bits=2048</code>，使其openssl加密使用2048位，原因前面已经说过。</p>

<p>随后创建一个目录，并且将生成CA证书的脚本CA.sh复制到这个目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ca
</span><span class='line'>cd ca
</span><span class='line'>cp /usr/local/ssl/misc/CA.sh CA.sh</span></code></pre></td></tr></table></div></figure>


<p>CA.sh这个脚本如果找不到，可以使用 <code>openssl version -a</code>查看openssl对应的目录，而CA.sh一般就在这个目录的子目录misc目录下。</p>

<p>之后执行<code>./CA.sh -newca</code>命令  <br/>
CA.sh会使用<code>/usr/local/ssl/openssl.cnf</code>中的配置来创建私钥和证书，这正是我们第一步为啥需要修改这个文件的原因。</p>

<p>创建CA证书过程中，不输入信息，直接回车，填写加密私钥的密码和生成CA证书的相关信息。</p>

<p>创建完之后会生成demoCA目录。这个目录有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cacert.pem  certs  index.txt       index.txt.old  private
</span><span class='line'>careq.pem   crl    index.txt.attr  newcerts       serial</span></code></pre></td></tr></table></div></figure>


<p>其中cacert.pem是CA的证书，private存放CA的私钥，newcerts存放CA签名的备份。到这里，我们的CA已经建好了，下面我们可以通过CA来对我们的证书进行签名了。</p>

<h5>第二步、使用CA根证书为服务器证书签名</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#生成私钥
</span><span class='line'>sudo  openssl genrsa -des3 -out private.key 2048
</span><span class='line'>#生成证书请求
</span><span class='line'>sudo openssl req -new -key private.key -out server.csr
</span><span class='line'>#生成服务器的私钥，去除密钥口令
</span><span class='line'>sudo openssl rsa -in private.key -out server.key
</span><span class='line'>#使用CA进行签名，生成server.crt
</span><span class='line'>cp server.csr newreq.pem
</span><span class='line'>./CA.sh -sign
</span><span class='line'>mv newcert.pem server.crt
</span><span class='line'>或者上面三步都不需要，直接使用下面一步
</span><span class='line'>openssl ca -in server.csr -out server.crt</span></code></pre></td></tr></table></div></figure>


<p>更多openssl ca 命令请见<a href="http://blog.csdn.net/as3luyuan123/article/details/13346613">OpenSSL命令&ndash;ca</a></p>

<h5>第三步、配置服务器：</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir ssl
</span><span class='line'>cp server.crt ssl/server.crt
</span><span class='line'>cp server.key ssl/server.key
</span><span class='line'>cp demoCA/cacert.pem ssl/ca.crt
</span><span class='line'>cp -r ssl /alidata/server/httpd/conf/</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/alidata/server/httpd/conf/extra/httpd-ssl.conf</code>文件，找到SSLCertificateFile、SSLCertificateKeyFile、SSLCACertificatePath、SSLCACertificateFile进行修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 指定服务器证书位置
</span><span class='line'>SSLCertificateFile "/alidata/server/httpd/conf/ssl/server.crt"
</span><span class='line'># 指定服务器证书key位置
</span><span class='line'>SSLCertificateKeyFile "/alidata/server/httpd/conf/ssl/server.key"
</span><span class='line'># 证书目录
</span><span class='line'>SSLCACertificatePath "/alidata/server/httpd/conf/ssl"
</span><span class='line'># 根证书位置
</span><span class='line'>SSLCACertificateFile "/alidata/server/httpd/conf/ssl/ca.crt"</span></code></pre></td></tr></table></div></figure>


<p>修改vhost配置<code>vim /alidata/server/httpd/conf/vhosts/phpwind.conf</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;VirtualHost *:443&gt;
</span><span class='line'>        SSLCertificateFile    /alidata/server/httpd/conf/ssl/server.crt
</span><span class='line'>        SSLCertificateKeyFile /alidata/server/httpd/conf/ssl/server.key
</span><span class='line'>        SSLCACertificatePath /alidata/server/httpd/conf/ssl
</span><span class='line'>        SSLCACertificateFile /alidata/server/httpd/conf/ssl/ca.crt
</span><span class='line'>        ServerName 182.92.5.161
</span><span class='line'>        DocumentRoot /alidata/www
</span><span class='line'>&lt;/VirtualHost&gt;</span></code></pre></td></tr></table></div></figure>


<p>最后，咱们重启Apache服务器，在浏览器输入链接查看是否配置成功。可以在浏览器上查看证书信息，与第二步不同之处在于此时的证书有两个。</p>

<h3>最后，与Mac和寻常Linux系统一些区别</h3>

<h5>一、与MAC的几点不同</h5>

<p>1、首先安装openssl，因为本人还没有升级Mac系统上的openssl，所以暂时留着，以后升级了补上。  <br/>
2、Mac上对应的Openssl的路径是<code>/System/Library/OpenSSL/</code>  <br/>
3、Mac上对应的Apache的路径是<code>/etc/apache2/</code>  <br/>
4、Mac上重启服务器使用<code>/usr/sbin/apachectl restart</code>，阿里云服务器使用<code>/etc/init.d/httpd restart</code>或者<code>service httpd restart</code>   <br/>
5、Mac上vhost配置的路径是<code>/etc/apache2/extra/httpd-vhosts.conf</code></p>

<h5>二、与寻常Linux系统的不同</h5>

<p>主要借鉴<a href="http://m.blog.csdn.net/blog/whyliu_/41749521">MacOS openssl下生成建立CA并生成服务器和客户端证书方法</a>这篇文章   <br/>
1、linux上Apache的路径是<code>/usr/local/apache</code>  <br/>
2、linux上vhost配置的路径是<code>/usr/local/apache/conf/extra/httpd_vhosts.conf</code></p>

<h3>总结</h3>

<p>1、对HTTPS的理解  <br/>
它的基本原理是服务器拥有一个私钥，客户端拥有公钥，当然它们是使用证书管理的。每次通信它们通过证书进行身份认证。身份认证之后客户端发送一个“对话密钥”给服务器。传输“对话密钥”时，客户端公钥通过不对称加密算法进行加密了的，只有服务器才能解密。然后双方使用这个"对话密钥"对内容进行对称加密，双方之间传输内容。</p>

<p>2、对openssl、SSL/TLS的相关理解  <br/>
openssl是一套工具，它是一个开源库，可以对相关内容进行加密和解密，也可以生成证书并且进行数字签名。它创建的x509证书有PEM和DER两种编码，而且它们还可以导出p12文件。它使用的加密算法有对称加密，也有不对称加密。</p>

<p>3、HTTPS相关理论知识博客，值得细读  <br/>
<a href="http://segmentfault.com/a/1190000002568019">OpenSSL 与 SSL 数字证书概念贴</a>  <br/>
<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html">SSL/TLS协议运行机制的概述</a>  <br/>
<a href="http://segmentfault.com/a/1190000002554673">SSL/TLS原理详解</a></p>

<h3>参考：</h3>

<p><a href="http://www.yezhongqi.com/archives/1377.html">https介绍与环境搭建</a>  <br/>
<a href="http://myswirl.blog.163.com/blog/static/5131864220071014102353799/">OpenSSL常用命令</a>  <br/>
<a href="http://blog.csdn.net/as3luyuan123/article/details/13344757">OpenSSL命令&mdash;CA.pl</a>  <br/>
<a href="http://m.blog.csdn.net/blog/whyliu_/41749521">MacOS openssl下生成建立CA并生成服务器和客户端证书方法</a>   <br/>
<a href="http://blog.csdn.net/zhu410289616/article/details/46566073">mac中apache开启https功能，本地发布安装app</a>  <br/>
<a href="http://www.cnblogs.com/kyrios/p/tls-and-certificates.html">TLS/HTTPS 证书生成与验证</a>   <br/>
<a href="http://www.cnblogs.com/phpinfo/archive/2013/08/09/3246376.html">OpenSSL小结</a>      <br/>
<a href="http://www.cnblogs.com/alittlebitcool/archive/2011/09/22/2185418.html">利用openssl进行RSA加密解密</a>  <br/>
<a href="http://blog.sina.com.cn/s/blog_a9303fd90101jmtx.html">DER 和 PEM 格式</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AutoLayout使用代码写约束]]></title>
    <link href="http://www.liuchungui.com/blog/2015/09/20/autolayoutshi-yong-dai-ma-xie-yue-shu/"/>
    <updated>2015-09-20T23:20:56+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/09/20/autolayoutshi-yong-dai-ma-xie-yue-shu</id>
    <content type="html"><![CDATA[<h3>一、约束是什么？</h3>

<p>  约束是视图与视图之间一些属性关系。</p>

<!-- more -->


<p>  我们先来了解一下下面的内容：</p>

<p>  <strong>视图属性</strong>：视图属性(attribute)有<code>left</code>, <code>right</code>, <code>top</code>, <code>bottom</code>, <code>leading</code>, <code>trailing</code>, <code>width</code>, <code>height</code>, <code>centerX</code>, <code>centerY</code> 和 <code>baseline</code>。(注：iOS8加上了<code>Margin</code>，所以实际上从iOS8开始不止这些)</p>

<p>约束属性：每一个约束(Constraint)拥有的属性(Property)有：</p>

<ul>
<li> <strong>Constant value</strong>: 偏移量</li>
<li> <strong>Relation</strong>: 属性之间的关系，和关系表达式对应，例如>(大于),=(等于),>=(大于等于)</li>
<li> <strong>Priority level</strong>: 优先级，优先级越高，越会满足此约束。</li>
</ul>


<p>一个普通约束表达式: <code>view1.attribute = view2.attribute + ConstantValue</code></p>

<p>例子：当你定义一个button的位置时，你可能会有这么一个要求："按钮的左边距离父视图的左边20像素"。其实这句话用约束表达就是<code>button.left = (superView.left + 20)</code>。</p>

<h3>二、VFL(Visual Format Language)</h3>

<h5>1、语法</h5>

<p>下面这是一些常用的VFL语法示例，如果想要知道更详细的语法规则，请查看<a href="https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html">Auto Layout Guide</a></p>

<table style="text-align:center;" bgcolor="#FFFFFF"> 
   <tbody>
    <tr> 
     <td>语法示例</td> 
     <td>效果图片</td> 
     <td>解释</td> 
    </tr> 
   </tbody>
   <tbody> 
    <tr> 
     <td>[button]-[textField]</td> 
     <td><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8up8p9omj205z00odfm.jpg" /></td> 
     <td>标准空间距离为8像素</td> 
    </tr> 
    <tr> 
     <td>[button(&gt;=50)]</td> 
     <td><img src="http://ww2.sinaimg.cn/large/91c6e389jw1ew8ur9pn6nj2020015q2q.jpg" /></td> 
     <td>宽度约束</td> 
    </tr> 
    <tr> 
     <td>|-50-[purpleBox]-50-|</td> 
     <td><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8uro1kggj204800wq2r.jpg" /></td> 
     <td>设置与父视图的关系，'|'代表父视图</td> 
    </tr> 
    <tr> 
     <td>V:[topField]-10-[bottomField]</td> 
     <td><img src="http://ww1.sinaimg.cn/large/91c6e389jw1ew8us3r78nj202o01ia9t.jpg" /></td> 
     <td>垂直方向的布局，'V'代表垂直方向，'H'代表水平方向</td> 
    </tr> 
    <tr> 
     <td>[maroonView][blueView]</td> 
     <td><img src="http://ww1.sinaimg.cn/large/91c6e389jw1ew8usnshqsj202r00k0b9.jpg" /></td> 
     <td>Flush Views</td> 
    </tr> 
    <tr> 
     <td>[button(100@20)]</td> 
     <td><img src="http://ww1.sinaimg.cn/large/91c6e389jw1ew8usxcz1lj202u014t8i.jpg" /></td> 
     <td>设置优先级，@后面就是此约束的优先级</td> 
    </tr> 
    <tr> 
     <td>[button1(==button2)]</td> 
     <td><img src="http://ww3.sinaimg.cn/large/91c6e389jw1ew8ut6n9abj205e015jr9.jpg" /></td> 
     <td>等宽设置</td> 
    </tr> 
    <tr> 
     <td>[flexibleButton(&gt;=70,&lt;=100)]</td> 
     <td><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8uteqiv8j202t01m744.jpg" /></td> 
     <td>多个谓语来确定尺寸</td> 
    </tr> 
   </tbody> 
</table>


<p></p>

<h5>2、VFL使用</h5>

<p>我们现在需要做这么一个UI需求：页面中有两个元素一张图片和一个文本。图片距左右两边和顶部10像素，而距底部100像素；文本距图片30像素。这个用代码如何实现？请看下面代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;dog.jpg&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentModeScaleAspectFit</span><span class="p">;</span>
</span><span class='line'><span class="c1">//注意：代码约束需要设置视图的translatesAutoresizingMaskIntoConstraints属性为NO</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">imageView</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">darkGrayColor</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;This is a lovely dog&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">viewsDictionary</span> <span class="o">=</span> <span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">imageView</span><span class="p">,</span> <span class="n">label</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的水平方向距父视图左右两边都为10</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr1</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-10-[imageView]-10-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片垂直方向距父视图顶部10，底部100</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr2</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-10-[imageView]-100-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr2</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置label的约束</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr3</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:[imageView]-30-[label]&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr3</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如下是运行的效果图：</p>

<p><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew8yjnu80jj20yi1pcwj4.jpg" width=310 height=552 /></p>

<p>   到这里，我们已经使用VFL实现了需求。</p>

<p>   假如有一天，我们的产品经理觉得这个效果不好看，需要改一改，然后UI设计师重新出了一套效果图。上面的页面已经修改成：图片距左右两边和顶部10像素，而图片宽与高比例为5:7；描述文本处于水平居中位置，并且处于图片的下方与屏幕上方居中位置。</p>

<p>   此时，我们用代码如何实现？</p>

<p>   查看VFL语法，明显图片宽与高比例为5:7这个需求没有直接对应的语法，实现起来有点复杂。这时，我们可以使用苹果为我们封装的另外一个创建约束的方法<code>constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:</code>，就可以轻易实现我们的需求。如下，就是实现代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;dog.jpg&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentModeScaleAspectFit</span><span class="p">;</span>
</span><span class='line'><span class="c1">//注意：代码约束需要设置视图的translatesAutoresizingMaskIntoConstraints属性为NO</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">imageView</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">imageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">darkGrayColor</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;This is a lovely dog&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">viewsDictionary</span> <span class="o">=</span> <span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">imageView</span><span class="p">,</span> <span class="n">label</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的水平方向距父视图左右两边都为10像素</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr1</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;H:|-10-[imageView]-10-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">//设置图片垂直方向距父视图顶部10像素，底部100像素</span>
</span><span class='line'><span class="cm">NSArray *constraintArr2 = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:|-10-[imageView]-100-|&quot; options:0 metrics:nil views:viewsDictionary];</span>
</span><span class='line'><span class="cm">[self.view addConstraints:constraintArr2];</span>
</span><span class='line'>
</span><span class='line'><span class="cm">//设置label的约束</span>
</span><span class='line'><span class="cm">NSArray *constraintArr3 = [NSLayoutConstraint constraintsWithVisualFormat:@&quot;V:[imageView]-30-[label]&quot; options:0 metrics:nil views:viewsDictionary];</span>
</span><span class='line'><span class="cm">[self.view addConstraints:constraintArr3];</span>
</span><span class='line'><span class="cm">    */</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的宽与高的比例为5:7</span>
</span><span class='line'><span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint1</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">imageView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeHeight</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="n">imageView</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeWidth</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.4</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">constraint1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片距顶部10像素，描述文字处于图片与屏幕底部中间</span>
</span><span class='line'><span class="bp">NSArray</span> <span class="o">*</span><span class="n">constraintArr3</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintsWithVisualFormat</span><span class="p">:</span><span class="s">@&quot;V:|-10-[imageView]-[label]-|&quot;</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">metrics</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">views</span><span class="p">:</span><span class="n">viewsDictionary</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraints</span><span class="p">:</span><span class="n">constraintArr3</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//描述文本水平居中</span>
</span><span class='line'><span class="bp">NSLayoutConstraint</span> <span class="o">*</span><span class="n">constraint2</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSLayoutConstraint</span> <span class="nl">constraintWithItem</span><span class="p">:</span><span class="n">label</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeCenterX</span> <span class="nl">relatedBy</span><span class="p">:</span><span class="n">NSLayoutRelationEqual</span> <span class="nl">toItem</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">attribute</span><span class="p">:</span><span class="n">NSLayoutAttributeCenterX</span> <span class="nl">multiplier</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">constant</span><span class="p">:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addConstraint</span><span class="p">:</span><span class="n">constraint2</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行效果如下：</p>

<p><img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew905ecso1j20yi1pc78y.jpg" width=310 height=552 /></p>

<p><code>constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:</code>方法主要是为了创建视图约束属性之间的关系，而这个方法的精髓主要是这么一个表达式：<strong>view1.attribute = view2.attribute * multiplier + constant</strong>。这里与我们前面讲过的表达式类似，只是多了一个multiplier的系数。</p>

<h3>三、Masnory写约束</h3>

<p><a href="https://github.com/SnapKit/Masonry">Masonry</a>是一个轻量级的布局框架，拥有自己的描述语法，采用更优雅的链式语法封装自动布局，简洁明了 并具有高可读性。</p>

<p>上面的需求，我使用Masnory实现起来，代码简洁了很多，而且基本上不怎么需要学就能通过Masnory实现上面的需求，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//注意：代码约束需要设置视图的translatesAutoresizingMaskIntoConstraints属性为NO</span>
</span><span class='line'><span class="bp">UIImageView</span> <span class="o">*</span><span class="n">imageView</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIImageView</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithImage</span><span class="p">:[</span><span class="bp">UIImage</span> <span class="nl">imageNamed</span><span class="p">:</span><span class="s">@&quot;dog.jpg&quot;</span><span class="p">]];</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">contentMode</span> <span class="o">=</span> <span class="n">UIViewContentModeScaleAspectFit</span><span class="p">;</span>
</span><span class='line'><span class="n">imageView</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">imageView</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="bp">UILabel</span> <span class="o">*</span><span class="n">label</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UILabel</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithFrame</span><span class="p">:</span><span class="n">CGRectZero</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="p">[</span><span class="bp">UIColor</span> <span class="n">darkGrayColor</span><span class="p">];</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">@&quot;This is a lovely dog&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview</span><span class="p">:</span><span class="n">label</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//设置图片的水平方向距父视图左右两边都为10像素，图片的宽与高的比例为5:7</span>
</span><span class='line'><span class="p">[</span><span class="n">imageView</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">left</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_left</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">right</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_right</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_top</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">offset</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">height</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">imageView</span><span class="p">.</span><span class="n">mas_width</span><span class="p">).</span><span class="n">with</span><span class="p">.</span><span class="n">multipliedBy</span><span class="p">(</span><span class="mf">1.4</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//文字描述水平居中，并且处于图片与屏幕底部中间</span>
</span><span class='line'><span class="p">[</span><span class="n">label</span> <span class="nl">mas_makeConstraints</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">MASConstraintMaker</span> <span class="o">*</span><span class="n">make</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">centerX</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_centerX</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">top</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="n">imageView</span><span class="p">.</span><span class="n">mas_bottom</span><span class="p">);</span>
</span><span class='line'>    <span class="n">make</span><span class="p">.</span><span class="n">bottom</span><span class="p">.</span><span class="n">equalTo</span><span class="p">(</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">mas_bottom</span><span class="p">);</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>  效果如下：</p>

<p>  <img src="http://ww4.sinaimg.cn/large/91c6e389jw1ew905ecso1j20yi1pc78y.jpg" width=310 height=552 /></p>

<p>  示例代码已经放到github上了，<a href="https://github.com/liuchungui/VFLDemo.git">github代码示例</a></p>

<h3>四、使用AutoLayout时，如何添加动画？</h3>

<p> 使用VFL时，动画改变尺寸或位置时，很简单只需要将对应的约束保存成全局变量，然后改变约束当中的属性就行了。</p>

<p> 使用Autolayout动画改变尺寸、位置的官方模板如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">containerView</span> <span class="n">layoutIfNeeded</span><span class="p">];</span> <span class="c1">// Ensures that all pending layout operations have been completed</span>
</span><span class='line'><span class="p">[</span><span class="bp">UIView</span> <span class="nl">animateWithDuration</span><span class="p">:</span><span class="mf">1.0</span> <span class="nl">animations</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Make all constraint changes here</span>
</span><span class='line'><span class="p">[</span><span class="n">containerView</span> <span class="n">layoutIfNeeded</span><span class="p">];</span> <span class="c1">// Forces the layout of the subtree animation block and then captures all of the frame changes</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>那如果使用的是Masnory框架，怎么添加动画？</p>

<p>我这里有个Demo，请看代码：</p>

<pre><code>- (void)viewDidLoad {
    [super viewDidLoad];

    //创建displayView
    UIView *displayView = [[UIView alloc] init];
    displayView.backgroundColor = [UIColor purpleColor];
    [self.view addSubview:displayView];
    self.displayView = displayView;

    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
    [button setTitle:@"点击" forState:UIControlStateNormal];
    [button setTitleColor:[UIColor darkGrayColor] forState:UIControlStateHighlighted];
    [button setTitleColor:[UIColor blueColor] forState:UIControlStateNormal];
    [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];
    [self.view addSubview:button];

    //添加约束
    [displayView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.view.mas_top).offset(100);
        make.size.mas_equalTo(CGSizeMake(50, 50));
        make.centerX.equalTo(self.view.mas_centerX);
    }];

    [button mas_makeConstraints:^(MASConstraintMaker *make) {
        make.centerX.equalTo(self.view.mas_centerX);
        make.size.mas_equalTo(CGSizeMake(200, 50));
        make.bottom.mas_equalTo(self.view.mas_bottom).offset(-50);
    }];
    // Do any additional setup after loading the view, typically from a nib.
} 


- (void)buttonAction:(UIButton *)butt    on{
    //动    画改变
    [self.view layoutIfNeeded];
    [UIView animateWithDuration:1.0 animations:^{
        [self.displayView mas_updateConstraints:^(MASConstraintMaker *make) {
            make.size.mas_equalTo(CGSizeMake(300, 300));
            }];
        [self.view layoutIfNeeded];
    }];
}
</code></pre>

<p>示例代码已经放到github上了，<a href="https://github.com/liuchungui/AnimationForAutoLayoutDemo.git">github代码示例</a></p>

<h3>五、什么时候使用代码写约束？</h3>

<p>  使用Xib写约束，可以很直观、快捷的搭建界面，让我们的开发速度提升很快。但，Xib开发有时候不是很灵活，这个时候我们就得考虑使用代码来实现约束。</p>

<p>  以下几种情况，我觉得使用代码写约束比较适合：</p>

<ul>
<li>运行时改变视图尺寸、位置的时候，应该使用代码写约束</li>
<li>封装一个控件时，使其能够有足够的灵活性，应该使用代码写约束</li>
<li>添加动画的时候，使用代码写约束。</li>
<li>一些复杂的UI，使用IB很难实现的场景，使用代码写约束</li>
</ul>


<h3>六、总结</h3>

<p>这篇文章主要讲了下面一些东西</p>

<ul>
<li>约束是什么</li>
<li>VFL相关语法</li>
<li>VFL的使用</li>
<li>Masnory框架的使用</li>
<li>使用Autolayout时，添加动画</li>
<li>哪些场景下使用代码来写约束</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac电脑上搭建octopress博客]]></title>
    <link href="http://www.liuchungui.com/blog/2015/09/11/macdian-nao-shang-da-jian-octopressbo-ke/"/>
    <updated>2015-09-11T22:51:44+08:00</updated>
    <id>http://www.liuchungui.com/blog/2015/09/11/macdian-nao-shang-da-jian-octopressbo-ke</id>
    <content type="html"><![CDATA[<p>搭建octopress博客的文章很详细已经有很多了，文章末尾就有相关的参考，我这里只简单记录下mac电脑上搭建octopress博客的步骤。</p>

<h4>1、搭建环境</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>gem install bundler
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>遇到的问题：</p>

<ul>
<li><p><code>gem install bundler</code>失败了，需要更改一下<code>octopress/Gemfile</code>文件当中的源，将第一行<code>source "https://rubygems.org"</code> 更改成 <code>source "http://ruby.taobao.org/"</code>就行了。</p></li>
<li><p>如果安装的时候报<code>“You don't have write permissions for the /Library/Ruby/Gems/2.0.0 directory”</code>这样的错误，请加上sudo权限。</p></li>
</ul>


<p>之后，输入下面命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h4>2、将博客部署到github上</h4>

<p>在github上创建一个<code>username.github.io</code>的仓库，然后输入下面命令</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>回车，之后出现下面内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.io.git)
</span><span class='line'>           or 'https://github.com/your_username/your_username.github.io')
</span><span class='line'>Repository url:</span></code></pre></td></tr></table></div></figure>


<p>粘贴<code>username.github.io</code>仓库对应的url，例如我的就是<code>https://github.com/liuchungui/liuchungui.github.io.git</code></p>

<h4>3、生成并编辑博客</h4>

<p>首先，使用下面命令生成新文章，其中title就是博文名，你也可以输入<code>rake new_post</code>回车，然后在再输入博文名。文章在<code>source/_post/</code>目录下，<code>文件名构成为时间和标题的拼音</code>。可以进入到<code>octopress/source/_posts</code>目录，找到对应的博文进行修改。博文采用的markdown语法，我推荐一款不错的编辑工具<strong>Mou</strong>，它可以实时编辑实时查看。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post['title']</span></code></pre></td></tr></table></div></figure>


<p>然后，使用下面命令生成并在本地进行预览。<code>rake preview</code>开启一个web服务，此时就可以预览了，使用<code>localhost:4000</code>打开看查看效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>之后，查看效果没有问题，则使用下面命令上传到github。这条命令会将<code>octopress/public</code>下的文件上传到你的仓库master分支下。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>最后，将源代码上传到github仓库的source分支下，如下所示：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'add source file'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<h4>4、删除twitter、google相关东西：</h4>

<ul>
<li>修改文件<code>octopress/_config.yml</code>文件，设置title、subtitle、author，注意最好把里面的 twitter 相关的信息全部删掉，否则由于 GFW 的原因，将会造成页面 load 很慢。</li>
<li>修改头部模块 <strong>source/_includes/head.html</strong> 将<code>//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js</code>替换成<code>http://cdn.staticfile.org/jquery/1.9.1/jquery.min.js</code>，否则会很慢。</li>
<li>修改定制文件 <strong>source/_includes/custom/head.html</strong> 把 google 的自定义字体去掉，原因同上。</li>
</ul>


<h4>5、自定义博客</h4>

<p>新标签打开网站中第三方链接默认是从当前界面打开，这导致网站浏览者跳转到第三方链接后很难回来。将以下代码加入 <code>source/_includes/custom/head.html</code>文件中，我们是新建一个界面打开，仍然保持当前网页。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">addBlankTargetForLinks</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;a[href^=&quot;http&quot;]&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">,</span> <span class="s1">&#39;_blank&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;DOMNodeInserted&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">addBlankTargetForLinks</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认情况，所有文字的排头会对齐，但如果有列表项的情况下也如此，列表头就会冲出文章的主体区块了。在 octopress/sass/custom/_layout.scss 文件中找到#$indented-lists: true 行，去掉#注释即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$indented</span><span class="o">-</span><span class="nx">lists</span><span class="o">:</span> <span class="kc">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>其它，界面、侧边栏、底部栏、添加top回到顶部等，请参考<a href="http://foggry.com/blog/2014/04/28/custom-your-octopress-blog/">自定义你的Octopress博客</a></p>

<p><strong>注意：当自定义了博客时，修改了头、侧边栏、底部栏、添加评论等配置文件后，使用rake generate生成一下。</strong></p>

<h4>参考</h4>

<p>添加评论和分享系统，请参考<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">象写程序一样写博客：搭建基于github的博客</a></p>

<p><a href="http://matrixzk.github.io/blog/20141020/octopress-setup-and-analysis/#section">使用 Octopress 2.0 搭建基于 Github Pages 个人博客的详细过程及原理分析</a></p>

<p><a href="http://www.jianshu.com/p/0ac2ac1a8e45">octopress博客搭建和个性化配置</a></p>

<p><a href="http://biaobiaoqi.github.io/blog/2013/07/10/decorate-octopress/">定制Octopress</a></p>
]]></content>
  </entry>
  
</feed>
